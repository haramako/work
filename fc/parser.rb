#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'
class FcParser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
    32,    33,    30,    31,    28,    29,    27,    19,    11,     9,
    21,    50,    19,     9,    19,    21,     7,    21,    53,    23,
    13,    20,    22,    16,    17,    18,    20,    22,    20,    22,
    19,    34,    19,    21,    19,    21,    13,    21,     6,    16,
    17,    18,    51,    52,    20,    22,    20,    22,    20,    22,
    19,    10,    11,    21,    32,    33,    13,    32,    33,    16,
    17,    18,     5,    19,    20,    22,    21,    19,     4,    13,
    21,    35,    16,    17,    18,    60,    19,    20,    22,    21,
    19,    20,    22,    21,     3,    16,    17,    18,   nil,    19,
    20,    22,    21,    19,    20,    22,    21,    19,   nil,   nil,
    21,   nil,   nil,    20,    22,   nil,    19,    20,    22,    21,
   nil,    20,    22,    38,   nil,    16,    17,    18,   nil,    19,
    20,    22,    21,    19,   nil,   nil,    21,    32,    33,    30,
    31,   nil,   nil,    20,    22,   nil,   nil,    20,    22,    32,
    33,    30,    31,    28,    29,    27,    32,    33,    30,    31,
   nil,   nil,    26,    32,    33,    30,    31,    28,    29,    27,
   nil,   nil,    54,    32,    33,    30,    31,    28,    29,    27,
   nil,   nil,    55,    32,    33,    30,    31,    28,    29,    27,
    32,    33,    30,    31,    28,    29,    27,    32,    33,    30,
    31,    28,    29,    27 ]

racc_action_check = [
    47,    47,    47,    47,    47,    47,    47,    33,    36,    18,
    33,    36,    52,     7,    54,    52,     5,    54,    47,    11,
    54,    33,    33,    54,    54,    54,    52,    52,    54,    54,
    60,    16,    35,    60,    34,    35,    60,    34,     4,    60,
    60,    60,    46,    46,    60,    60,    35,    35,    34,    34,
    10,     8,     8,    10,    43,    43,    10,    44,    44,    10,
    10,    10,     3,    55,    10,    10,    55,    28,     1,    55,
    28,    17,    55,    55,    55,    57,    13,    55,    55,    13,
    31,    28,    28,    31,     0,    13,    13,    13,   nil,    30,
    13,    13,    30,    29,    31,    31,    29,    19,   nil,   nil,
    19,   nil,   nil,    30,    30,   nil,    24,    29,    29,    24,
   nil,    19,    19,    24,   nil,    24,    24,    24,   nil,    27,
    24,    24,    27,    32,   nil,   nil,    32,    42,    42,    42,
    42,   nil,   nil,    27,    27,   nil,   nil,    32,    32,    15,
    15,    15,    15,    15,    15,    15,    41,    41,    41,    41,
   nil,   nil,    15,    48,    48,    48,    48,    48,    48,    48,
   nil,   nil,    48,    49,    49,    49,    49,    49,    49,    49,
   nil,   nil,    49,    45,    45,    45,    45,    45,    45,    45,
    56,    56,    56,    56,    56,    56,    56,    40,    40,    40,
    40,    40,    40,    40 ]

racc_action_pointer = [
    74,    68,   nil,    51,    38,    13,   nil,     2,    39,   nil,
    42,     8,   nil,    68,   nil,   136,    28,    68,    -2,    89,
   nil,   nil,   nil,   nil,    98,   nil,   nil,   111,    59,    85,
    81,    72,   115,    -1,    26,    24,    -5,   nil,   nil,   nil,
   184,   143,   124,    51,    54,   170,    30,    -3,   150,   160,
   nil,   nil,     4,   nil,     6,    55,   177,    55,   nil,   nil,
    22,   nil ]

racc_action_default = [
   -29,   -29,    -1,   -29,   -29,   -29,    62,   -29,   -29,    -4,
   -29,   -29,    -2,   -29,    -6,   -29,   -29,   -29,   -29,   -29,
   -23,   -24,   -25,    -3,   -29,    -8,    -9,   -29,   -29,   -29,
   -29,   -29,   -28,   -29,   -29,   -29,   -29,   -22,    -5,    -7,
   -15,   -16,   -17,   -18,   -19,   -27,   -29,   -29,   -29,   -29,
   -12,   -20,   -29,   -21,   -29,   -29,   -26,   -13,   -11,   -10,
   -29,   -14 ]

racc_goto_table = [
    12,    37,    24,     1,     2,    59,    46,    25,     8,    40,
    41,    42,    43,    44,    45,    47,    48,    49,    39,    36,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    56,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    57,    58,   nil,   nil,   nil,   nil,
    61 ]

racc_goto_check = [
     4,     7,     5,     1,     2,     8,     9,     6,     3,     7,
     7,     7,     7,     7,     7,     7,     7,     7,     6,     3,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     7,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     4,     4,   nil,   nil,   nil,   nil,
     4 ]

racc_goto_pointer = [
   nil,     3,     4,     1,   -10,   -11,    -6,   -18,   -52,   -26 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,    14,    15,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 25, :_reduce_none,
  6, 26, :_reduce_2,
  3, 27, :_reduce_3,
  1, 27, :_reduce_4,
  3, 28, :_reduce_5,
  1, 28, :_reduce_6,
  2, 29, :_reduce_7,
  1, 29, :_reduce_8,
  2, 30, :_reduce_9,
  6, 30, :_reduce_10,
  5, 30, :_reduce_11,
  3, 30, :_reduce_12,
  0, 32, :_reduce_none,
  2, 32, :_reduce_14,
  3, 31, :_reduce_15,
  3, 31, :_reduce_16,
  3, 31, :_reduce_17,
  3, 31, :_reduce_18,
  3, 31, :_reduce_19,
  4, 31, :_reduce_20,
  4, 31, :_reduce_21,
  2, 31, :_reduce_22,
  1, 31, :_reduce_23,
  1, 31, :_reduce_24,
  1, 31, :_reduce_25,
  3, 33, :_reduce_26,
  1, 33, :_reduce_27,
  0, 33, :_reduce_28 ]

racc_reduce_n = 29

racc_shift_n = 62

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  "(" => 3,
  "[" => 4,
  "*" => 5,
  "/" => 6,
  "+" => 7,
  "-" => 8,
  "=" => 9,
  "function" => 10,
  :IDENT => 11,
  ")" => 12,
  "," => 13,
  "{" => 14,
  "}" => 15,
  ";" => 16,
  "if" => 17,
  "while" => 18,
  "var" => 19,
  "else" => 20,
  "]" => 21,
  :NUMBER => 22,
  :STRING => 23 }

racc_nt_base = 24

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "\"(\"",
  "\"[\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"=\"",
  "\"function\"",
  "IDENT",
  "\")\"",
  "\",\"",
  "\"{\"",
  "\"}\"",
  "\";\"",
  "\"if\"",
  "\"while\"",
  "\"var\"",
  "\"else\"",
  "\"]\"",
  "NUMBER",
  "STRING",
  "$start",
  "program",
  "function",
  "arg_list",
  "block",
  "statement_list",
  "statement",
  "exp",
  "else_block",
  "exp_list" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 13)
  def _reduce_2(val, _values, result)
     result = [:function, val[3], val[5]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 15)
  def _reduce_3(val, _values, result)
     result = val[0] + [val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 16)
  def _reduce_4(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_5(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 19)
  def _reduce_6(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 21)
  def _reduce_7(val, _values, result)
     result = val[0] + [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 22)
  def _reduce_8(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_10(val, _values, result)
     result = [:if, val[2], val[4], val[5]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_11(val, _values, result)
     result = [:while, val[2], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 27)
  def _reduce_12(val, _values, result)
     result = [:var, val[1]] 
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_14(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 31)
  def _reduce_15(val, _values, result)
     result = [:put, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_16(val, _values, result)
     result = [:add, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 33)
  def _reduce_17(val, _values, result)
     result = [:sub, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_18(val, _values, result)
     result = [:mul, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_19(val, _values, result)
     result = [:div, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_20(val, _values, result)
     result = [:call, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_21(val, _values, result)
     result = [:call, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_22(val, _values, result)
     result = [:uminus, val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 39)
  def _reduce_23(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_24(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 41)
  def _reduce_25(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_26(val, _values, result)
     result = val[0] + [val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_27(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 45)
  def _reduce_28(val, _values, result)
     result = [] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class FcParser
