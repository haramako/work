options ( inesprg: 1, // プログラムにいくつのバンクを使うか。今は１つ。
          ineschr: 1, // グラフィックデータにいくつのバンクを使うか。今は１つ。
          inesmir: 0, // 水平ミラーリング
          inesmap: 0  // マッパー。０番にする。
          );

include( "nes.fc" );
include( "math.fc" );
include( "util.fc" );

include( "miku.asm" );

const BG:int[1] options ( file:'miku.chr', char_bank: 0 );

function wait(n:int):void
{
  while( n ){
    var i:int = 55;
    while( i ){
      var j:int = 255;
      while( j ){
        j -= 1;
      }
      i -= i;
    }
    n -= 1;
  }
}

var anim:int = 0;
var anim_count:int = 0;
var giff:int8;

var my_x:int = 100;
var my_y:int = 100;
var my_bang_count:int = 0;
var my_wait:int;

const MY_BUL_MAX = 8;
var my_bul_x:int[MY_BUL_MAX];
var my_bul_y:int[MY_BUL_MAX];
var my_bul_idx:int = 0;

const EN_MAX = 16;
var en_type:int[EN_MAX];
var en_x:int[EN_MAX];
var en_y:int[EN_MAX];
var en_p1:int[EN_MAX];
var en_p2:int[EN_MAX];
var en_wait:int = 0;
var en_now = 0;

const EN_BUL_MAX = 32;
var en_bul_type:int[EN_BUL_MAX];
var en_bul_x:int[EN_BUL_MAX];
var en_bul_y:int[EN_BUL_MAX];
var en_bul_vx:int8[EN_BUL_MAX];
var en_bul_vy:int8[EN_BUL_MAX];
var en_bul_idx = 0;

const PALLET:int[32] = [0x0f,0x19,0x29,0x30, 0x0f,0x11,0x12,0x13, 0x0f,0x11,0x12,0x13, 0x0f,0x11,0x12,0x13,
                        0x0f,0x1B,0x2B,0x30, 0x0f,0x04,0x26,0x36, 0x0f,0x11,0x12,0x13, 0x0f,0x11,0x12,0x13];

const SPR_MIKU = 0x80;
const SPR_NEGI = 0xa0;
const SPR_ENEMY = 0xc0;
const SPR_EN_BUL = 0xe0;

function my_process():void
{
  // 自機の移動
  pad_update();
  if( pad_up ){ my_y -= 2; }
  if( pad_down ){ my_y += 2; }
  if( pad_left ){ my_x -= 2; }
  if( pad_right ){ my_x += 2; }

  // 弾との当たり判定
  var i = 0;
  while( i < EN_BUL_MAX ){
    if( en_bul_y[i] != 0 && my_x + 4 - en_bul_x[i] < 8 && my_y + 4 - en_bul_y[i] < 8 ){
      my_bang_count = 64;
      en_bul_y[i] = 0;
    }
    i += 1;
  }
  if( my_bang_count ){ my_bang_count -= 1; }

  // 弾を打つ
  if( my_wait == 0 ){
    if( pad_a ){
      my_bul_x[my_bul_idx] = my_x;
      my_bul_y[my_bul_idx] = my_y-8;
      my_bul_idx = ( my_bul_idx + 1 ) % MY_BUL_MAX;
      my_wait = 4;
    }
  }else{
    my_wait -= 1;
  }

  gr_sprite2x2( my_x-8, my_y-8, SPR_MIKU+anim*2, my_bang_count % 2 );
    
}

function my_bul_process():void
{
  // 自機の弾の処理
  var i = 0;
  while( i<MY_BUL_MAX ){
    if( my_bul_y[i] ){
      if( my_bul_y[i] > 8 ){
        my_bul_y[i] -= 6;
        gr_sprite( my_bul_x[i]-4, my_bul_y[i]-4, SPR_NEGI+anim, 0 );
        gr_sprite( my_bul_x[i]-4, my_bul_y[i]+4, SPR_NEGI+anim+16, 0 );
      }else{
        my_bul_y[i] = 0;
      }
    }
    i += 1;
  }
}

function en_process(idx:int):void
{
  if( en_type[idx] ){
    // 移動
    en_y[idx] += 1;

    // 自機の弾との当たり判定
    var i = 0;
    while( i < MY_BUL_MAX ){
      if( my_bul_y[i] != 0 && en_x[idx] + 12 - my_bul_x[i] < 24 && en_y[idx] + 12 - my_bul_y[i] < 24 ){
        en_type[idx] = 0;
        my_bul_y[i] = 0;
      }
      i += 1;
    }

    // 弾を打つ
    if( (anim_count%16) == 0 ){
      var n = en_bul_new();
      en_bul_type[n] = 1;
      en_bul_x[n] = en_x[idx];
      en_bul_y[n] = en_y[idx];
      var angle = atan( -(my_y/16 - en_y[idx]/16), my_x/16 - en_x[idx]/16 );
      en_bul_vx[n] = cos(angle)/16;
      en_bul_vy[n] = -sin(angle)/16;
    }

    // 死亡判定
    if( en_y[idx] > 240 ){
      en_type[idx] = 0;
    }else{
      gr_sprite2x2( en_x[idx]-8, en_y[idx]-8, SPR_ENEMY, 1 );
    }
  }
}

// 敵の弾の処理
function en_bul_process():void
{
  var i = 0;
  while( i<EN_BUL_MAX ){
    if( en_bul_y[i] ){
      en_bul_y[i] += (en_bul_vy[i]+giff) / 4;
      en_bul_x[i] += (en_bul_vx[i]+giff) / 4;
      gr_sprite( en_bul_x[i]-4, en_bul_y[i]-4, SPR_EN_BUL+anim, 1 );
      // 死亡判定
      if( en_bul_y[i] < 8 || en_bul_y[i] > 248 || en_bul_x[i] < 8 || en_bul_x[i] > 248 ){
          en_bul_y[i] = 0;
      }
    }
    i += 1;
  }
}

function en_bul_new():int
{
  var n = en_bul_idx;
  en_bul_idx = (en_bul_idx+1)%EN_BUL_MAX;
  return n;
}

function main(): void
{
  ppu_lock();
  
  ppu_put( 0x3f00, PALLET, 32 );
  
  ppu_unlock();

  while( 1 ){
    anim_count += 1;
    anim = anim_count / 8 % 4;
    giff = anim_count % 4;
    
    en_bul_process();
    my_process();

    // 敵の出現
    if( en_wait == 0 ){
      en_type[en_now] = 1;
      en_x[en_now] = 100+en_now*16;
      en_y[en_now] = 0;
      en_now = (en_now+1)%EN_MAX;
      en_wait = 60;
    }else{
      en_wait -= 1;
    }
    
    var i = 0;
    while( i<EN_MAX ){
      en_process(i);
      i += 1;
    }

    my_bul_process();
    
    wait_vsync();
  }
  
}

main();
