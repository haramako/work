#[1]   a.asm
    3                     
    4                         ;; options
    5                             .inesprg 1
    6                             .ineschr 1
    7                             .inesmir 0
    8                             .inesmap 0
    9                     
   10                         ;; interrupt vector
   11           0001              .bank 1
   12           FFFA              .org $FFFA
   13  01:FFFA  0D 80             .dw __interrupt
   14  01:FFFC  00 80             .dw __start
   15  01:FFFE  00 00             .dw 0
   16                     
   17                     __call .macro
   18                             txa
   19                             pha
   20                             clc
   21                             adc \2
   22                             tax
   23                             jsr \1
   24                             pla
   25                             tax
   26                             .endm   
   27                     
   28                         ;; 
   29           0000      __reg = 0                       ; 汎用レジスタ
   30           0200      __STACK__ = $0200        
   31                     
   32           0000              .bank 0
   33           8000              .org $8000
   34  00:8000            __start:
   35  00:8000  78                sei
   36  00:8001  A2 FF             ldx #255
   37  00:8003  9A                txs
   38  00:8004  A9 00             lda #0
   39  00:8006  AA                tax
   40  00:8007  20 6B 9B          jsr main
   41  00:800A            .loop:
   42  00:800A  4C 0A 80      jmp .loop
   43                     
   44  00:800D            __interrupt:
   45  00:800D  48            pha
   46  00:800E  8A            txa
   47  00:800F  48            pha
   48  00:8010  98            tya
   49  00:8011  48            pha
   50  00:8012  20 7F 87      jsr interrupt
   51  00:8015  68            pla
   52  00:8016  A8            tay
   53  00:8017  68            pla
   54  00:8018  AA            tax
   55  00:8019  68            pla
   56  00:801A  40            rti
   57                     
   58                     ;;; 掛け算用のテーブル
   59                     ;;; LOW(x*x/4)  | x < 256
   60  00:801B            __mul_tbl_l0:
   61  00:801B  00 00 01          .db 0,0,1,2,4,6,9,12,16,20,25,30,36,42,49,56
       00:801E  02 04 06  
       00:8021  09 0C 10  
       00:8024  14 19 1E  
       00:8027  24 2A 31  
       00:802A  38        
   62  00:802B  40 48 51          .db 64,72,81,90,100,110,121,132,144,156,169,182,196,210,225,240
       00:802E  5A 64 6E  
       00:8031  79 84 90  
       00:8034  9C A9 B6  
       00:8037  C4 D2 E1  
       00:803A  F0        
   63  00:803B  00 10 21          .db 0,16,33,50,68,86,105,124,144,164,185,206,228,250,17,40
       00:803E  32 44 56  
       00:8041  69 7C 90  
       00:8044  A4 B9 CE  
       00:8047  E4 FA 11  
       00:804A  28        
   64  00:804B  40 58 71          .db 64,88,113,138,164,190,217,244,16,44,73,102,132,162,193,224
       00:804E  8A A4 BE  
       00:8051  D9 F4 10  
       00:8054  2C 49 66  
       00:8057  84 A2 C1  
       00:805A  E0        
   65  00:805B  00 20 41          .db 0,32,65,98,132,166,201,236,16,52,89,126,164,202,241,24
       00:805E  62 84 A6  
       00:8061  C9 EC 10  
       00:8064  34 59 7E  
       00:8067  A4 CA F1  
       00:806A  18        
   66  00:806B  40 68 91          .db 64,104,145,186,228,14,57,100,144,188,233,22,68,114,161,208
       00:806E  BA E4 0E  
       00:8071  39 64 90  
       00:8074  BC E9 16  
       00:8077  44 72 A1  
       00:807A  D0        
   67  00:807B  00 30 61          .db 0,48,97,146,196,246,41,92,144,196,249,46,100,154,209,8
       00:807E  92 C4 F6  
       00:8081  29 5C 90  
       00:8084  C4 F9 2E  
       00:8087  64 9A D1  
       00:808A  08        
   68  00:808B  40 78 B1          .db 64,120,177,234,36,94,153,212,16,76,137,198,4,66,129,192
       00:808E  EA 24 5E  
       00:8091  99 D4 10  
       00:8094  4C 89 C6  
       00:8097  04 42 81  
       00:809A  C0        
   69  00:809B  00 40 81          .db 0,64,129,194,4,70,137,204,16,84,153,222,36,106,177,248
       00:809E  C2 04 46  
       00:80A1  89 CC 10  
       00:80A4  54 99 DE  
       00:80A7  24 6A B1  
       00:80AA  F8        
   70  00:80AB  40 88 D1          .db 64,136,209,26,100,174,249,68,144,220,41,118,196,18,97,176
       00:80AE  1A 64 AE  
       00:80B1  F9 44 90  
       00:80B4  DC 29 76  
       00:80B7  C4 12 61  
       00:80BA  B0        
   71  00:80BB  00 50 A1          .db 0,80,161,242,68,150,233,60,144,228,57,142,228,58,145,232
       00:80BE  F2 44 96  
       00:80C1  E9 3C 90  
       00:80C4  E4 39 8E  
       00:80C7  E4 3A 91  
       00:80CA  E8        
   72  00:80CB  40 98 F1          .db 64,152,241,74,164,254,89,180,16,108,201,38,132,226,65,160
       00:80CE  4A A4 FE  
       00:80D1  59 B4 10  
       00:80D4  6C C9 26  
       00:80D7  84 E2 41  
       00:80DA  A0        
   73  00:80DB  00 60 C1          .db 0,96,193,34,132,230,73,172,16,116,217,62,164,10,113,216
       00:80DE  22 84 E6  
       00:80E1  49 AC 10  
       00:80E4  74 D9 3E  
       00:80E7  A4 0A 71  
       00:80EA  D8        
   74  00:80EB  40 A8 11          .db 64,168,17,122,228,78,185,36,144,252,105,214,68,178,33,144
       00:80EE  7A E4 4E  
       00:80F1  B9 24 90  
       00:80F4  FC 69 D6  
       00:80F7  44 B2 21  
       00:80FA  90        
   75  00:80FB  00 70 E1          .db 0,112,225,82,196,54,169,28,144,4,121,238,100,218,81,200
       00:80FE  52 C4 36  
       00:8101  A9 1C 90  
       00:8104  04 79 EE  
       00:8107  64 DA 51  
       00:810A  C8        
   76  00:810B  40 B8 31          .db 64,184,49,170,36,158,25,148,16,140,9,134,4,130,1,128
       00:810E  AA 24 9E  
       00:8111  19 94 10  
       00:8114  8C 09 86  
       00:8117  04 82 01  
       00:811A  80        
   77                     ;;; LOW(x*x/4)  | x >= 256
   78  00:811B            __mul_tbl_l1:
   79  00:811B  00 80 01          .db 0,128,1,130,4,134,9,140,16,148,25,158,36,170,49,184
       00:811E  82 04 86  
       00:8121  09 8C 10  
       00:8124  94 19 9E  
       00:8127  24 AA 31  
       00:812A  B8        
   80  00:812B  40 C8 51          .db 64,200,81,218,100,238,121,4,144,28,169,54,196,82,225,112
       00:812E  DA 64 EE  
       00:8131  79 04 90  
       00:8134  1C A9 36  
       00:8137  C4 52 E1  
       00:813A  70        
   81  00:813B  00 90 21          .db 0,144,33,178,68,214,105,252,144,36,185,78,228,122,17,168
       00:813E  B2 44 D6  
       00:8141  69 FC 90  
       00:8144  24 B9 4E  
       00:8147  E4 7A 11  
       00:814A  A8        
   82  00:814B  40 D8 71          .db 64,216,113,10,164,62,217,116,16,172,73,230,132,34,193,96
       00:814E  0A A4 3E  
       00:8151  D9 74 10  
       00:8154  AC 49 E6  
       00:8157  84 22 C1  
       00:815A  60        
   83  00:815B  00 A0 41          .db 0,160,65,226,132,38,201,108,16,180,89,254,164,74,241,152
       00:815E  E2 84 26  
       00:8161  C9 6C 10  
       00:8164  B4 59 FE  
       00:8167  A4 4A F1  
       00:816A  98        
   84  00:816B  40 E8 91          .db 64,232,145,58,228,142,57,228,144,60,233,150,68,242,161,80
       00:816E  3A E4 8E  
       00:8171  39 E4 90  
       00:8174  3C E9 96  
       00:8177  44 F2 A1  
       00:817A  50        
   85  00:817B  00 B0 61          .db 0,176,97,18,196,118,41,220,144,68,249,174,100,26,209,136
       00:817E  12 C4 76  
       00:8181  29 DC 90  
       00:8184  44 F9 AE  
       00:8187  64 1A D1  
       00:818A  88        
   86  00:818B  40 F8 B1          .db 64,248,177,106,36,222,153,84,16,204,137,70,4,194,129,64
       00:818E  6A 24 DE  
       00:8191  99 54 10  
       00:8194  CC 89 46  
       00:8197  04 C2 81  
       00:819A  40        
   87  00:819B  00 C0 81          .db 0,192,129,66,4,198,137,76,16,212,153,94,36,234,177,120
       00:819E  42 04 C6  
       00:81A1  89 4C 10  
       00:81A4  D4 99 5E  
       00:81A7  24 EA B1  
       00:81AA  78        
   88  00:81AB  40 08 D1          .db 64,8,209,154,100,46,249,196,144,92,41,246,196,146,97,48
       00:81AE  9A 64 2E  
       00:81B1  F9 C4 90  
       00:81B4  5C 29 F6  
       00:81B7  C4 92 61  
       00:81BA  30        
   89  00:81BB  00 D0 A1          .db 0,208,161,114,68,22,233,188,144,100,57,14,228,186,145,104
       00:81BE  72 44 16  
       00:81C1  E9 BC 90  
       00:81C4  64 39 0E  
       00:81C7  E4 BA 91  
       00:81CA  68        
   90  00:81CB  40 18 F1          .db 64,24,241,202,164,126,89,52,16,236,201,166,132,98,65,32
       00:81CE  CA A4 7E  
       00:81D1  59 34 10  
       00:81D4  EC C9 A6  
       00:81D7  84 62 41  
       00:81DA  20        
   91  00:81DB  00 E0 C1          .db 0,224,193,162,132,102,73,44,16,244,217,190,164,138,113,88
       00:81DE  A2 84 66  
       00:81E1  49 2C 10  
       00:81E4  F4 D9 BE  
       00:81E7  A4 8A 71  
       00:81EA  58        
   92  00:81EB  40 28 11          .db 64,40,17,250,228,206,185,164,144,124,105,86,68,50,33,16
       00:81EE  FA E4 CE  
       00:81F1  B9 A4 90  
       00:81F4  7C 69 56  
       00:81F7  44 32 21  
       00:81FA  10        
   93  00:81FB  00 F0 E1          .db 0,240,225,210,196,182,169,156,144,132,121,110,100,90,81,72
       00:81FE  D2 C4 B6  
       00:8201  A9 9C 90  
       00:8204  84 79 6E  
       00:8207  64 5A 51  
       00:820A  48        
   94  00:820B  40 38 31          .db 64,56,49,42,36,30,25,20,16,12,9,6,4,2,1,0
       00:820E  2A 24 1E  
       00:8211  19 14 10  
       00:8214  0C 09 06  
       00:8217  04 02 01  
       00:821A  00        
   95                     ;;; HIGH(x*x/4)  | x < 256
   96  00:821B            __mul_tbl_h0:
   97  00:821B  00 00 00          .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       00:821E  00 00 00  
       00:8221  00 00 00  
       00:8224  00 00 00  
       00:8227  00 00 00  
       00:822A  00        
   98  00:822B  00 00 00          .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       00:822E  00 00 00  
       00:8231  00 00 00  
       00:8234  00 00 00  
       00:8237  00 00 00  
       00:823A  00        
   99  00:823B  01 01 01          .db 1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2
       00:823E  01 01 01  
       00:8241  01 01 01  
       00:8244  01 01 01  
       00:8247  01 01 02  
       00:824A  02        
  100  00:824B  02 02 02          .db 2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3
       00:824E  02 02 02  
       00:8251  02 02 03  
       00:8254  03 03 03  
       00:8257  03 03 03  
       00:825A  03        
  101  00:825B  04 04 04          .db 4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6
       00:825E  04 04 04  
       00:8261  04 04 05  
       00:8264  05 05 05  
       00:8267  05 05 05  
       00:826A  06        
  102  00:826B  06 06 06          .db 6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8
       00:826E  06 06 07  
       00:8271  07 07 07  
       00:8274  07 07 08  
       00:8277  08 08 08  
       00:827A  08        
  103  00:827B  09 09 09          .db 9,9,9,9,9,9,10,10,10,10,10,11,11,11,11,12
       00:827E  09 09 09  
       00:8281  0A 0A 0A  
       00:8284  0A 0A 0B  
       00:8287  0B 0B 0B  
       00:828A  0C        
  104  00:828B  0C 0C 0C          .db 12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15
       00:828E  0C 0D 0D  
       00:8291  0D 0D 0E  
       00:8294  0E 0E 0E  
       00:8297  0F 0F 0F  
       00:829A  0F        
  105  00:829B  10 10 10          .db 16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19
       00:829E  10 11 11  
       00:82A1  11 11 12  
       00:82A4  12 12 12  
       00:82A7  13 13 13  
       00:82AA  13        
  106  00:82AB  14 14 14          .db 20,20,20,21,21,21,21,22,22,22,23,23,23,24,24,24
       00:82AE  15 15 15  
       00:82B1  15 16 16  
       00:82B4  16 17 17  
       00:82B7  17 18 18  
       00:82BA  18        
  107  00:82BB  19 19 19          .db 25,25,25,25,26,26,26,27,27,27,28,28,28,29,29,29
       00:82BE  19 1A 1A  
       00:82C1  1A 1B 1B  
       00:82C4  1B 1C 1C  
       00:82C7  1C 1D 1D  
       00:82CA  1D        
  108  00:82CB  1E 1E 1E          .db 30,30,30,31,31,31,32,32,33,33,33,34,34,34,35,35
       00:82CE  1F 1F 1F  
       00:82D1  20 20 21  
       00:82D4  21 21 22  
       00:82D7  22 22 23  
       00:82DA  23        
  109  00:82DB  24 24 24          .db 36,36,36,37,37,37,38,38,39,39,39,40,40,41,41,41
       00:82DE  25 25 25  
       00:82E1  26 26 27  
       00:82E4  27 27 28  
       00:82E7  28 29 29  
       00:82EA  29        
  110  00:82EB  2A 2A 2B          .db 42,42,43,43,43,44,44,45,45,45,46,46,47,47,48,48
       00:82EE  2B 2B 2C  
       00:82F1  2C 2D 2D  
       00:82F4  2D 2E 2E  
       00:82F7  2F 2F 30  
       00:82FA  30        
  111  00:82FB  31 31 31          .db 49,49,49,50,50,51,51,52,52,53,53,53,54,54,55,55
       00:82FE  32 32 33  
       00:8301  33 34 34  
       00:8304  35 35 35  
       00:8307  36 36 37  
       00:830A  37        
  112  00:830B  38 38 39          .db 56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63
       00:830E  39 3A 3A  
       00:8311  3B 3B 3C  
       00:8314  3C 3D 3D  
       00:8317  3E 3E 3F  
       00:831A  3F        
  113                     ;;; HIGH(x*x/4)  | x >= 256
  114  00:831B            __mul_tbl_h1:
  115  00:831B  40 40 41          .db 64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71
       00:831E  41 42 42  
       00:8321  43 43 44  
       00:8324  44 45 45  
       00:8327  46 46 47  
       00:832A  47        
  116  00:832B  48 48 49          .db 72,72,73,73,74,74,75,76,76,77,77,78,78,79,79,80
       00:832E  49 4A 4A  
       00:8331  4B 4C 4C  
       00:8334  4D 4D 4E  
       00:8337  4E 4F 4F  
       00:833A  50        
  117  00:833B  51 51 52          .db 81,81,82,82,83,83,84,84,85,86,86,87,87,88,89,89
       00:833E  52 53 53  
       00:8341  54 54 55  
       00:8344  56 56 57  
       00:8347  57 58 59  
       00:834A  59        
  118  00:834B  5A 5A 5B          .db 90,90,91,92,92,93,93,94,95,95,96,96,97,98,98,99
       00:834E  5C 5C 5D  
       00:8351  5D 5E 5F  
       00:8354  5F 60 60  
       00:8357  61 62 62  
       00:835A  63        
  119  00:835B  64 64 65          .db 100,100,101,101,102,103,103,104,105,105,106,106,107,108,108,109
       00:835E  65 66 67  
       00:8361  67 68 69  
       00:8364  69 6A 6A  
       00:8367  6B 6C 6C  
       00:836A  6D        
  120  00:836B  6E 6E 6F          .db 110,110,111,112,112,113,114,114,115,116,116,117,118,118,119,120
       00:836E  70 70 71  
       00:8371  72 72 73  
       00:8374  74 74 75  
       00:8377  76 76 77  
       00:837A  78        
  121  00:837B  79 79 7A          .db 121,121,122,123,123,124,125,125,126,127,127,128,129,130,130,131
       00:837E  7B 7B 7C  
       00:8381  7D 7D 7E  
       00:8384  7F 7F 80  
       00:8387  81 82 82  
       00:838A  83        
  122  00:838B  84 84 85          .db 132,132,133,134,135,135,136,137,138,138,139,140,141,141,142,143
       00:838E  86 87 87  
       00:8391  88 89 8A  
       00:8394  8A 8B 8C  
       00:8397  8D 8D 8E  
       00:839A  8F        
  123  00:839B  90 90 91          .db 144,144,145,146,147,147,148,149,150,150,151,152,153,153,154,155
       00:839E  92 93 93  
       00:83A1  94 95 96  
       00:83A4  96 97 98  
       00:83A7  99 99 9A  
       00:83AA  9B        
  124  00:83AB  9C 9D 9D          .db 156,157,157,158,159,160,160,161,162,163,164,164,165,166,167,168
       00:83AE  9E 9F A0  
       00:83B1  A0 A1 A2  
       00:83B4  A3 A4 A4  
       00:83B7  A5 A6 A7  
       00:83BA  A8        
  125  00:83BB  A9 A9 AA          .db 169,169,170,171,172,173,173,174,175,176,177,178,178,179,180,181
       00:83BE  AB AC AD  
       00:83C1  AD AE AF  
       00:83C4  B0 B1 B2  
       00:83C7  B2 B3 B4  
       00:83CA  B5        
  126  00:83CB  B6 B7 B7          .db 182,183,183,184,185,186,187,188,189,189,190,191,192,193,194,195
       00:83CE  B8 B9 BA  
       00:83D1  BB BC BD  
       00:83D4  BD BE BF  
       00:83D7  C0 C1 C2  
       00:83DA  C3        
  127  00:83DB  C4 C4 C5          .db 196,196,197,198,199,200,201,202,203,203,204,205,206,207,208,209
       00:83DE  C6 C7 C8  
       00:83E1  C9 CA CB  
       00:83E4  CB CC CD  
       00:83E7  CE CF D0  
       00:83EA  D1        
  128  00:83EB  D2 D3 D4          .db 210,211,212,212,213,214,215,216,217,218,219,220,221,222,223,224
       00:83EE  D4 D5 D6  
       00:83F1  D7 D8 D9  
       00:83F4  DA DB DC  
       00:83F7  DD DE DF  
       00:83FA  E0        
  129  00:83FB  E1 E1 E2          .db 225,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239
       00:83FE  E3 E4 E5  
       00:8401  E6 E7 E8  
       00:8404  E9 EA EB  
       00:8407  EC ED EE  
       00:840A  EF        
  130  00:840B  F0 F1 F2          .db 240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
       00:840E  F3 F4 F5  
       00:8411  F6 F7 F8  
       00:8414  F9 FA FB  
       00:8417  FC FD FE  
       00:841A  FF        
  131                                     
  132                     ;;; int8xint8=>int8の掛け算
  133                     ;;; 
  134                     ;;; 以下の等式を利用する
  135                     ;;; a*b = f(a+b) - f(a-b)  | f(x): x*x/4
  136                     ;;; __reg4 = __reg0 * __reg2
  137  00:841B            __mul_8:
  138  00:841B  8A                        txa                     ; push x
  139  00:841C  48                        pha
  140  00:841D  AD 00 00          lda __reg+0             ; reg6 = (reg0-reg2)^2/4
  141  00:8420  38                sec
  142  00:8421  ED 02 00          sbc __reg+2
  143  00:8424  AA                tax
  144  00:8425  B0 06             bcs .pl1
  145  00:8427  BD 1B 81          lda __mul_tbl_l1,x
  146  00:842A  4C 30 84          jmp .pl1_end
  147  00:842D            .pl1:
  148  00:842D  BD 1B 80          lda __mul_tbl_l0,x
  149  00:8430            .pl1_end:
  150  00:8430  8D 06 00          sta __reg+6
  151  00:8433  AD 00 00          lda __reg+0             ; a = (reg0+reg2)^2/4
  152  00:8436  18                clc
  153  00:8437  6D 02 00          adc __reg+2
  154  00:843A  AA                tax
  155  00:843B  90 06             bcc .pl2
  156  00:843D  BD 1B 81          lda __mul_tbl_l1,x
  157  00:8440  4C 46 84          jmp .pl2_end
  158  00:8443            .pl2:
  159  00:8443  BD 1B 80          lda __mul_tbl_l0,x
  160  00:8446            .pl2_end:
  161  00:8446  8D 07 00          sta __reg+7
  162  00:8449  38                sec                     ; reg4 = a - reg6
  163  00:844A  ED 06 00          sbc __reg+6
  164  00:844D  8D 04 00          sta __reg+4
  165  00:8450  68                        pla                     ; pop x
  166  00:8451  AA                        tax
  167  00:8452  60                rts
  168                     
  169                     ;;; int8xint8=>int16の掛け算
  170                     ;;; __reg4 = __reg0 * __reg2
  171  00:8453            __mul_8t16:
  172  00:8453  AD 00 00          lda __reg+0             ; reg6 = (reg0-reg2)^2/4
  173  00:8456  38                sec
  174  00:8457  ED 02 00          sbc __reg+2
  175  00:845A  AA                tax
  176  00:845B  B0 06             bcs .pl1
  177  00:845D  BD 1B 81          lda __mul_tbl_l1,x
  178  00:8460  4C 66 84          jmp .pl1_end
  179  00:8463            .pl1:
  180  00:8463  BD 1B 80          lda __mul_tbl_l0,x
  181  00:8466            .pl1_end:
  182  00:8466  8D 06 00          sta __reg+6
  183  00:8469  AD 00 00          lda __reg+0             ; a = (reg0+reg2)^2/4
  184  00:846C  18                clc
  185  00:846D  6D 02 00          adc __reg+2
  186  00:8470  AA                tax
  187  00:8471  90 06             bcc .pl2
  188  00:8473  BD 1B 81          lda __mul_tbl_l1,x
  189  00:8476  4C 7C 84          jmp .pl2_end
  190  00:8479            .pl2:
  191  00:8479  BD 1B 80          lda __mul_tbl_l0,x
  192  00:847C            .pl2_end:
  193  00:847C  8D 07 00          sta __reg+7
  194  00:847F  38                sec                     ; reg4 = a - reg6
  195  00:8480  ED 06 00          sbc __reg+6
  196  00:8483  8D 04 00          sta __reg+4
  197  00:8486  60                rts
  198                             
  199                     ;;; int16xint16=>int16 の掛け算
  200                     ;;; __reg(4,5) = __reg(0,1) * __reg(2,3)
  201  00:8487            __mul_16:
  202  00:8487  60                rts                                             ; 未実装
  203                             
  204                     ;;; int8/int8=>int8 の割り算
  205                     ;;;  __reg4 = __reg0 / __reg2 ( 余り=__reg5)
  206  00:8488            __div_8:
  207  00:8488  8A                        txa                     ; push x
  208  00:8489  48                        pha
  209  00:848A  A2 08             ldx #8
  210  00:848C  A9 00             lda #0
  211  00:848E  8D 05 00          sta __reg+5
  212  00:8491            .loop:
  213  00:8491  2E 00 00          rol __reg+0
  214  00:8494  2E 05 00          rol __reg+5
  215                             
  216  00:8497  AD 05 00          lda __reg+5
  217  00:849A  38                sec
  218  00:849B  ED 02 00          sbc __reg+2
  219  00:849E  90 03             bcc .end
  220  00:84A0  8D 05 00          sta __reg+5
  221  00:84A3            .end:   
  222  00:84A3  2E 04 00          rol __reg+4
  223  00:84A6  CA                dex
  224  00:84A7  D0 E8             bne .loop
  225  00:84A9  68                        pla                     ; pop x
  226  00:84AA  AA                        tax
  227  00:84AB  60                rts
  228                     
  229                     ;;; sint8/sint8=>sint8 の割り算
  230                     ;;;  __reg4 = __reg0 / __reg2 ( 余り=__reg5)
  231  00:84AC            __div_8s:
  232  00:84AC  A9 00                     lda #0
  233  00:84AE  8D 06 00                  sta __reg+6                             ; reg6 = 0
  234  00:84B1  8D 07 00                  sta __reg+7                             ; reg7 = 0
  235                                     
  236  00:84B4  AD 00 00                  lda __reg+0                             ; if sign(__reg0) then goto .reg0_pos
  237  00:84B7  10 0E                     bpl .reg0_pos
  238  00:84B9  A9 00                     lda #0                                  ; reg0 = -reg0
  239  00:84BB  38                        sec
  240  00:84BC  ED 00 00                  sbc __reg+0
  241  00:84BF  8D 00 00                  sta __reg+0
  242  00:84C2  A9 01                     lda #1                                  ; reg6 = 1
  243  00:84C4  8D 06 00                  sta __reg+6
  244  00:84C7            .reg0_pos:
  245                                     
  246  00:84C7  AD 02 00                  lda __reg+2                             ; if sign(__reg2) then goto .reg2_pos
  247  00:84CA  10 14                     bpl .reg2_pos
  248  00:84CC  A9 00                     lda #0                                  ; reg2 = -reg2
  249  00:84CE  38                        sec
  250  00:84CF  ED 02 00                  sbc __reg+2
  251  00:84D2  8D 02 00                  sta __reg+2
  252  00:84D5  A9 01                     lda #1                                  ; reg7 = 1; reg6 = !reg6
  253  00:84D7  8D 07 00                  sta __reg+7
  254  00:84DA  4D 06 00                  eor __reg+6
  255  00:84DD  8D 06 00                  sta __reg+6                             
  256  00:84E0            .reg2_pos:
  257                     
  258  00:84E0  20 88 84                  jsr __div_8                             ; reg4 = reg0 / reg2
  259                                     
  260  00:84E3  AD 06 00                  lda __reg+6                             ; if reg6 then goto .else2
  261  00:84E6  F0 1B                     beq .else1
  262  00:84E8  A9 00                     lda #0                                  ; reg4 = -reg4
  263  00:84EA  38                        sec
  264  00:84EB  ED 04 00                  sbc __reg+4                             
  265  00:84EE  8D 04 00                  sta __reg+4
  266  00:84F1  AD 05 00                  lda __reg+5                             ; if reg5 == 0 then goto .else1
  267  00:84F4  F0 0D                     beq .else1
  268  00:84F6  AD 02 00                  lda __reg+2                             ; reg5 = reg2 - reg5
  269  00:84F9  38                        sec
  270  00:84FA  ED 05 00                  sbc __reg+5
  271  00:84FD  8D 05 00                  sta __reg+5
  272  00:8500  CE 04 00                  dec __reg+4                             ; reg4 = reg4-1
  273  00:8503            .else1:
  274  00:8503  AD 07 00                  lda __reg+7                             ; if reg7 then goto .else2
  275  00:8506  F0 09                     beq .else2
  276  00:8508  A9 00                     lda #0                                  ; reg5 = -reg5
  277  00:850A  38                        sec
  278  00:850B  ED 05 00                  sbc __reg+5
  279  00:850E  8D 05 00                  sta __reg+5
  280  00:8511            .else2:
  281  00:8511  60                        rts
  282                             
  283                     ;;; int16/int16=>int16 の割り算 
  284                     ;;;  __reg(4,5) = __reg(0,1) / __reg(2,3) ( 余り=__reg(6,7))
  285  00:8512            __div_16:
  286  00:8512  8A                        txa                     ; push x
  287  00:8513  48                        pha
  288  00:8514  A2 08             ldx #8
  289  00:8516  A9 00             lda #0
  290  00:8518  8D 06 00          sta __reg+6
  291  00:851B  8D 07 00          sta __reg+7
  292  00:851E            .loop:
  293  00:851E  2E 00 00          rol __reg+0                             ; rol reg(7,6,1,0)
  294  00:8521  2E 01 00          rol __reg+1
  295  00:8524  2E 06 00          rol __reg+6
  296  00:8527  2E 07 00          rol __reg+7
  297                             
  298  00:852A  38                sec                                             ; sub reg(7,6), reg(3,2)
  299  00:852B  AD 07 00          lda __reg+7
  300  00:852E  ED 03 00          sbc __reg+3
  301  00:8531  8D 08 00                  sta __reg+8
  302  00:8534  AD 06 00                  lda __reg+6
  303  00:8537  ED 02 00          sbc __reg+2
  304  00:853A  90 09             bcc .end
  305  00:853C  8D 06 00          sta __reg+6
  306  00:853F  AD 08 00                  lda __reg+8
  307  00:8542  8D 08 00                  sta __reg+8
  308  00:8545            .end:   
  309  00:8545  2E 04 00          rol __reg+4                             ; rol reg(5,4)
  310  00:8548  2E 05 00          rol __reg+5
  311  00:854B  CA                dex
  312  00:854C  D0 D0             bne .loop
  313  00:854E  68                        pla                     ; pop x
  314  00:854F  AA                        tax
  315  00:8550  60                rts
  316                             
  317                     ;;; int8%int8=>int8 の割り算の余り
  318                     ;;;  __reg4 = __reg0 % __reg2
  319  00:8551            __mod_8:
  320  00:8551  20 88 84          jsr __div_8
  321  00:8554  AD 05 00          lda __reg+5
  322  00:8557  8D 04 00          sta __reg+4
  323  00:855A  60                rts
  324                             
  325  00:855B            __mod_16:
  326  00:855B  60                rts                                             ; 未実装
  327                             
  328           1000      EMU_ADDR = 4096
  329           1000      EMU_DATA = 4096
  330           1002      EMU_PRINT = 4098
  331           1003      EMU_EXIT = 4099
  332           0300      i1 = $0300
  333           0002      CONST = 2
  334           0301      a1 = $0301
  335           0305      a2 = $0305
  336  00:855C            a3:
  337  00:855C  01 02             .db 1,2
  338  00:855E            s1:
  339  00:855E  68 6F 67          .db 104,111,103,101,0
       00:8561  65 00     
  340                             ; function print_int16
  341  00:8563            print_int16:
  342                             ; 0000: [:load, {EMU_DATA:uint16}, {n:uint16}]
  343  00:8563  BD 00 02          lda 0+__STACK__+0,x
  344  00:8566  8D 00 10          sta 0+EMU_DATA
  345  00:8569  BD 01 02          lda 1+__STACK__+0,x
  346  00:856C  8D 01 10          sta 1+EMU_DATA
  347                             ; 0001: [:load, {EMU_PRINT:uint8}, {2}]
  348  00:856F  A9 02             lda #2
  349  00:8571  8D 02 10          sta 0+EMU_PRINT
  350                             ; 0002: [:return]
  351  00:8574  60                rts
  352                     
  353                             ; function print
  354  00:8575            print:
  355                             ; 0000: [:load, {EMU_ADDR:uint8*}, {str:uint8*}]
  356  00:8575  BD 00 02          lda 0+__STACK__+0,x
  357  00:8578  8D 00 10          sta 0+EMU_ADDR
  358  00:857B  BD 01 02          lda 1+__STACK__+0,x
  359  00:857E  8D 01 10          sta 1+EMU_ADDR
  360                             ; 0001: [:load, {EMU_PRINT:uint8}, {1}]
  361  00:8581  A9 01             lda #1
  362  00:8583  8D 02 10          sta 0+EMU_PRINT
  363                             ; 0002: [:return]
  364  00:8586  60                rts
  365                     
  366                             ; function puts
  367  00:8587            puts:
  368                             ; 0000: [:call, nil, <Lambda:print void(uint8*)>, {str:uint8*}]
  369  00:8587  BD 00 02          lda 0+__STACK__+0,x
  370  00:858A  9D 02 02          sta 2+__STACK__,x
  371  00:858D  BD 01 02          lda 1+__STACK__+0,x
  372  00:8590  9D 03 02          sta 3+__STACK__,x
  373                             __call print, #2
       00:8593  8A                txa
       00:8594  48                pha
       00:8595  18                clc
       00:8596  69 02             adc #2
       00:8598  AA                tax
       00:8599  20 75 85          jsr print
       00:859C  68                pla
       00:859D  AA                tax
  374                             ; 0001: [:call, nil, <Lambda:print void(uint8*)>, {$0:uint8[2]}]
  375  00:859E  A9 B4             lda #LOW(._D0)
  376  00:85A0  9D 02 02          sta 2+__STACK__,x
  377  00:85A3  A9 85             lda #HIGH(._D0)
  378  00:85A5  9D 03 02          sta 3+__STACK__,x
  379                             __call print, #2
       00:85A8  8A                txa
       00:85A9  48                pha
       00:85AA  18                clc
       00:85AB  69 02             adc #2
       00:85AD  AA                tax
       00:85AE  20 75 85          jsr print
       00:85B1  68                pla
       00:85B2  AA                tax
  380                             ; 0002: [:return]
  381  00:85B3  60                rts
  382  00:85B4            ._D0:
  383  00:85B4  0A 00             .db 10,0
  384                     
  385                             ; function exit
  386  00:85B6            exit:
  387                             ; 0000: [:load, {EMU_EXIT:uint8}, {code:uint8}]
  388  00:85B6  BD 00 02          lda 0+__STACK__+0,x
  389  00:85B9  8D 03 10          sta 0+EMU_EXIT
  390                             ; 0001: [:return]
  391  00:85BC  60                rts
  392                     
  393                             ; function assert_true
  394  00:85BD            assert_true:
  395                             ; 0000: [:not, {$0:uint8}, {a:uint8}]
  396  00:85BD  BD 00 02          lda 0+__STACK__+0,x
  397  00:85C0  F0 08             beq ._1
  398  00:85C2  A9 00             lda #0
  399  00:85C4  9D 03 02          sta 0+__STACK__+3,x
  400  00:85C7  4C CF 85          jmp ._2
  401  00:85CA            ._1:
  402  00:85CA  A9 01             lda #1
  403  00:85CC  9D 03 02          sta 0+__STACK__+3,x
  404  00:85CF            ._2:
  405                             ; 0001: [:if, {$0:uint8}, ".else_1"]
  406  00:85CF  BD 03 02          lda 0+__STACK__+3,x
  407  00:85D2  D0 03             bne ._3
  408  00:85D4  4C 2B 86          jmp .else_1
  409  00:85D7            ._3:
  410                             ; 0002: [:label, ".then_1"]
  411  00:85D7            .then_1:
  412                             ; 0003: [:call, nil, <Lambda:print void(uint8*)>, {$1:uint8[9]}]
  413  00:85D7  A9 41             lda #LOW(._D1)
  414  00:85D9  9D 04 02          sta 4+__STACK__,x
  415  00:85DC  A9 86             lda #HIGH(._D1)
  416  00:85DE  9D 05 02          sta 5+__STACK__,x
  417                             __call print, #4
       00:85E1  8A                txa
       00:85E2  48                pha
       00:85E3  18                clc
       00:85E4  69 04             adc #4
       00:85E6  AA                tax
       00:85E7  20 75 85          jsr print
       00:85EA  68                pla
       00:85EB  AA                tax
  418                             ; 0004: [:call, nil, <Lambda:print void(uint8*)>, {message:uint8*}]
  419  00:85EC  BD 01 02          lda 0+__STACK__+1,x
  420  00:85EF  9D 04 02          sta 4+__STACK__,x
  421  00:85F2  BD 02 02          lda 1+__STACK__+1,x
  422  00:85F5  9D 05 02          sta 5+__STACK__,x
  423                             __call print, #4
       00:85F8  8A                txa
       00:85F9  48                pha
       00:85FA  18                clc
       00:85FB  69 04             adc #4
       00:85FD  AA                tax
       00:85FE  20 75 85          jsr print
       00:8601  68                pla
       00:8602  AA                tax
  424                             ; 0005: [:call, nil, <Lambda:print void(uint8*)>, {$2:uint8[26]}]
  425  00:8603  A9 4A             lda #LOW(._D2)
  426  00:8605  9D 04 02          sta 4+__STACK__,x
  427  00:8608  A9 86             lda #HIGH(._D2)
  428  00:860A  9D 05 02          sta 5+__STACK__,x
  429                             __call print, #4
       00:860D  8A                txa
       00:860E  48                pha
       00:860F  18                clc
       00:8610  69 04             adc #4
       00:8612  AA                tax
       00:8613  20 75 85          jsr print
       00:8616  68                pla
       00:8617  AA                tax
  430                             ; 0006: [:call, nil, <Lambda:exit void(uint8)>, {1}]
  431  00:8618  A9 01             lda #1
  432  00:861A  9D 04 02          sta 4+__STACK__,x
  433                             __call exit, #4
       00:861D  8A                txa
       00:861E  48                pha
       00:861F  18                clc
       00:8620  69 04             adc #4
       00:8622  AA                tax
       00:8623  20 B6 85          jsr exit
       00:8626  68                pla
       00:8627  AA                tax
  434                             ; 0007: [:jump, ".end_1"]
  435  00:8628  4C 40 86          jmp .end_1
  436                             ; 0008: [:label, ".else_1"]
  437  00:862B            .else_1:
  438                             ; 0009: [:call, nil, <Lambda:print void(uint8*)>, {$3:uint8[2]}]
  439  00:862B  A9 64             lda #LOW(._D3)
  440  00:862D  9D 04 02          sta 4+__STACK__,x
  441  00:8630  A9 86             lda #HIGH(._D3)
  442  00:8632  9D 05 02          sta 5+__STACK__,x
  443                             __call print, #4
       00:8635  8A                txa
       00:8636  48                pha
       00:8637  18                clc
       00:8638  69 04             adc #4
       00:863A  AA                tax
       00:863B  20 75 85          jsr print
       00:863E  68                pla
       00:863F  AA                tax
  444                             ; 0010: [:label, ".end_1"]
  445  00:8640            .end_1:
  446                             ; 0011: [:return]
  447  00:8640  60                rts
  448  00:8641            ._D1:
  449  00:8641  0A 45 52          .db 10,69,82,82,79,82,58,32,0
       00:8644  52 4F 52  
       00:8647  3A 20 00  
  450  00:864A            ._D2:
  451  00:864A  20 20 65          .db 32,32,101,120,112,101,99,116,115,32,116,114,117,101,32,98
       00:864D  78 70 65  
       00:8650  63 74 73  
       00:8653  20 74 72  
       00:8656  75 65 20  
       00:8659  62        
  452  00:865A  75 74 20          .db 117,116,32,102,97,108,115,101,10,0
       00:865D  66 61 6C  
       00:8660  73 65 0A  
       00:8663  00        
  453  00:8664            ._D3:
  454  00:8664  2E 00             .db 46,0
  455                     
  456                             ; function assert_equal
  457  00:8666            assert_equal:
  458                             ; 0000: [:eq, {$0:uint8}, {a:uint16}, {b:uint16}]
  459  00:8666  BD 00 02          lda 0+__STACK__+0,x
  460  00:8669  DD 02 02          cmp 0+__STACK__+2,x
  461  00:866C  D0 10             bne ._4
  462  00:866E  BD 01 02          lda 1+__STACK__+0,x
  463  00:8671  DD 03 02          cmp 1+__STACK__+2,x
  464  00:8674  D0 08             bne ._4
  465  00:8676  A9 01             lda #1
  466  00:8678  9D 06 02          sta 0+__STACK__+6,x
  467  00:867B  4C 83 86          jmp ._5
  468  00:867E            ._4:
  469  00:867E  A9 00             lda #0
  470  00:8680  9D 06 02          sta 0+__STACK__+6,x
  471  00:8683            ._5:
  472                             ; 0001: [:not, {$1:uint8}, {$0:uint8}]
  473  00:8683  BD 06 02          lda 0+__STACK__+6,x
  474  00:8686  F0 08             beq ._6
  475  00:8688  A9 00             lda #0
  476  00:868A  9D 07 02          sta 0+__STACK__+7,x
  477  00:868D  4C 95 86          jmp ._7
  478  00:8690            ._6:
  479  00:8690  A9 01             lda #1
  480  00:8692  9D 07 02          sta 0+__STACK__+7,x
  481  00:8695            ._7:
  482                             ; 0002: [:if, {$1:uint8}, ".else_1"]
  483  00:8695  BD 07 02          lda 0+__STACK__+7,x
  484  00:8698  D0 03             bne ._8
  485  00:869A  4C 49 87          jmp .else_1
  486  00:869D            ._8:
  487                             ; 0003: [:label, ".then_1"]
  488  00:869D            .then_1:
  489                             ; 0004: [:call, nil, <Lambda:print void(uint8*)>, {$2:uint8[9]}]
  490  00:869D  A9 5F             lda #LOW(._D2)
  491  00:869F  9D 08 02          sta 8+__STACK__,x
  492  00:86A2  A9 87             lda #HIGH(._D2)
  493  00:86A4  9D 09 02          sta 9+__STACK__,x
  494                             __call print, #8
       00:86A7  8A                txa
       00:86A8  48                pha
       00:86A9  18                clc
       00:86AA  69 08             adc #8
       00:86AC  AA                tax
       00:86AD  20 75 85          jsr print
       00:86B0  68                pla
       00:86B1  AA                tax
  495                             ; 0005: [:call, nil, <Lambda:print void(uint8*)>, {message:uint8*}]
  496  00:86B2  BD 04 02          lda 0+__STACK__+4,x
  497  00:86B5  9D 08 02          sta 8+__STACK__,x
  498  00:86B8  BD 05 02          lda 1+__STACK__+4,x
  499  00:86BB  9D 09 02          sta 9+__STACK__,x
  500                             __call print, #8
       00:86BE  8A                txa
       00:86BF  48                pha
       00:86C0  18                clc
       00:86C1  69 08             adc #8
       00:86C3  AA                tax
       00:86C4  20 75 85          jsr print
       00:86C7  68                pla
       00:86C8  AA                tax
  501                             ; 0006: [:call, nil, <Lambda:print void(uint8*)>, {$3:uint8[11]}]
  502  00:86C9  A9 68             lda #LOW(._D3)
  503  00:86CB  9D 08 02          sta 8+__STACK__,x
  504  00:86CE  A9 87             lda #HIGH(._D3)
  505  00:86D0  9D 09 02          sta 9+__STACK__,x
  506                             __call print, #8
       00:86D3  8A                txa
       00:86D4  48                pha
       00:86D5  18                clc
       00:86D6  69 08             adc #8
       00:86D8  AA                tax
       00:86D9  20 75 85          jsr print
       00:86DC  68                pla
       00:86DD  AA                tax
  507                             ; 0007: [:call, nil, <Lambda:print_int16 void(uint16)>, {b:uint16}]
  508  00:86DE  BD 02 02          lda 0+__STACK__+2,x
  509  00:86E1  9D 08 02          sta 8+__STACK__,x
  510  00:86E4  BD 03 02          lda 1+__STACK__+2,x
  511  00:86E7  9D 09 02          sta 9+__STACK__,x
  512                             __call print_int16, #8
       00:86EA  8A                txa
       00:86EB  48                pha
       00:86EC  18                clc
       00:86ED  69 08             adc #8
       00:86EF  AA                tax
       00:86F0  20 63 85          jsr print_int16
       00:86F3  68                pla
       00:86F4  AA                tax
  513                             ; 0008: [:call, nil, <Lambda:print void(uint8*)>, {$4:uint8[7]}]
  514  00:86F5  A9 73             lda #LOW(._D4)
  515  00:86F7  9D 08 02          sta 8+__STACK__,x
  516  00:86FA  A9 87             lda #HIGH(._D4)
  517  00:86FC  9D 09 02          sta 9+__STACK__,x
  518                             __call print, #8
       00:86FF  8A                txa
       00:8700  48                pha
       00:8701  18                clc
       00:8702  69 08             adc #8
       00:8704  AA                tax
       00:8705  20 75 85          jsr print
       00:8708  68                pla
       00:8709  AA                tax
  519                             ; 0009: [:call, nil, <Lambda:print_int16 void(uint16)>, {a:uint16}]
  520  00:870A  BD 00 02          lda 0+__STACK__+0,x
  521  00:870D  9D 08 02          sta 8+__STACK__,x
  522  00:8710  BD 01 02          lda 1+__STACK__+0,x
  523  00:8713  9D 09 02          sta 9+__STACK__,x
  524                             __call print_int16, #8
       00:8716  8A                txa
       00:8717  48                pha
       00:8718  18                clc
       00:8719  69 08             adc #8
       00:871B  AA                tax
       00:871C  20 63 85          jsr print_int16
       00:871F  68                pla
       00:8720  AA                tax
  525                             ; 0010: [:call, nil, <Lambda:print void(uint8*)>, {$5:uint8[2]}]
  526  00:8721  A9 7A             lda #LOW(._D5)
  527  00:8723  9D 08 02          sta 8+__STACK__,x
  528  00:8726  A9 87             lda #HIGH(._D5)
  529  00:8728  9D 09 02          sta 9+__STACK__,x
  530                             __call print, #8
       00:872B  8A                txa
       00:872C  48                pha
       00:872D  18                clc
       00:872E  69 08             adc #8
       00:8730  AA                tax
       00:8731  20 75 85          jsr print
       00:8734  68                pla
       00:8735  AA                tax
  531                             ; 0011: [:call, nil, <Lambda:exit void(uint8)>, {1}]
  532  00:8736  A9 01             lda #1
  533  00:8738  9D 08 02          sta 8+__STACK__,x
  534                             __call exit, #8
       00:873B  8A                txa
       00:873C  48                pha
       00:873D  18                clc
       00:873E  69 08             adc #8
       00:8740  AA                tax
       00:8741  20 B6 85          jsr exit
       00:8744  68                pla
       00:8745  AA                tax
  535                             ; 0012: [:jump, ".end_1"]
  536  00:8746  4C 5E 87          jmp .end_1
  537                             ; 0013: [:label, ".else_1"]
  538  00:8749            .else_1:
  539                             ; 0014: [:call, nil, <Lambda:print void(uint8*)>, {$6:uint8[2]}]
  540  00:8749  A9 7C             lda #LOW(._D6)
  541  00:874B  9D 08 02          sta 8+__STACK__,x
  542  00:874E  A9 87             lda #HIGH(._D6)
  543  00:8750  9D 09 02          sta 9+__STACK__,x
  544                             __call print, #8
       00:8753  8A                txa
       00:8754  48                pha
       00:8755  18                clc
       00:8756  69 08             adc #8
       00:8758  AA                tax
       00:8759  20 75 85          jsr print
       00:875C  68                pla
       00:875D  AA                tax
  545                             ; 0015: [:label, ".end_1"]
  546  00:875E            .end_1:
  547                             ; 0016: [:return]
  548  00:875E  60                rts
  549  00:875F            ._D2:
  550  00:875F  0A 45 52          .db 10,69,82,82,79,82,58,32,0
       00:8762  52 4F 52  
       00:8765  3A 20 00  
  551  00:8768            ._D3:
  552  00:8768  20 20 65          .db 32,32,101,120,112,101,99,116,115,32,0
       00:876B  78 70 65  
       00:876E  63 74 73  
       00:8771  20 00     
  553  00:8773            ._D4:
  554  00:8773  20 20 62          .db 32,32,98,117,116,32,0
       00:8776  75 74 20  
       00:8779  00        
  555  00:877A            ._D5:
  556  00:877A  0A 00             .db 10,0
  557  00:877C            ._D6:
  558  00:877C  2E 00             .db 46,0
  559                     
  560                             ; function init
  561  00:877E            init:
  562                             ; 0000: [:return]
  563  00:877E  60                rts
  564                     
  565                             ; function interrupt
  566  00:877F            interrupt:
  567                             ; 0000: [:return]
  568  00:877F  60                rts
  569                     
  570                             ; function test_const_op
  571  00:8780            test_const_op:
  572                             ; 0000: [:call, nil, <Lambda:print void(uint8*)>, {$0:uint8[15]}]
  573  00:8780  A9 01             lda #LOW(._D0)
  574  00:8782  9D 00 02          sta 0+__STACK__,x
  575  00:8785  A9 89             lda #HIGH(._D0)
  576  00:8787  9D 01 02          sta 1+__STACK__,x
  577                             __call print, #0
       00:878A  8A                txa
       00:878B  48                pha
       00:878C  18                clc
       00:878D  69 00             adc #0
       00:878F  AA                tax
       00:8790  20 75 85          jsr print
       00:8793  68                pla
       00:8794  AA                tax
  578                             ; 0001: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {1}, {1}, {$1:uint8[4]}]
  579  00:8795  A9 01             lda #1
  580  00:8797  9D 00 02          sta 0+__STACK__,x
  581  00:879A  A9 00             lda #0
  582  00:879C  9D 01 02          sta 1+__STACK__,x
  583  00:879F  A9 01             lda #1
  584  00:87A1  9D 02 02          sta 2+__STACK__,x
  585  00:87A4  A9 00             lda #0
  586  00:87A6  9D 03 02          sta 3+__STACK__,x
  587  00:87A9  A9 10             lda #LOW(._D1)
  588  00:87AB  9D 04 02          sta 4+__STACK__,x
  589  00:87AE  A9 89             lda #HIGH(._D1)
  590  00:87B0  9D 05 02          sta 5+__STACK__,x
  591                             __call assert_equal, #0
       00:87B3  8A                txa
       00:87B4  48                pha
       00:87B5  18                clc
       00:87B6  69 00             adc #0
       00:87B8  AA                tax
       00:87B9  20 66 86          jsr assert_equal
       00:87BC  68                pla
       00:87BD  AA                tax
  592                             ; 0002: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {8}, {8}, {$2:uint8[10]}]
  593  00:87BE  A9 08             lda #8
  594  00:87C0  9D 00 02          sta 0+__STACK__,x
  595  00:87C3  A9 00             lda #0
  596  00:87C5  9D 01 02          sta 1+__STACK__,x
  597  00:87C8  A9 08             lda #8
  598  00:87CA  9D 02 02          sta 2+__STACK__,x
  599  00:87CD  A9 00             lda #0
  600  00:87CF  9D 03 02          sta 3+__STACK__,x
  601  00:87D2  A9 14             lda #LOW(._D2)
  602  00:87D4  9D 04 02          sta 4+__STACK__,x
  603  00:87D7  A9 89             lda #HIGH(._D2)
  604  00:87D9  9D 05 02          sta 5+__STACK__,x
  605                             __call assert_equal, #0
       00:87DC  8A                txa
       00:87DD  48                pha
       00:87DE  18                clc
       00:87DF  69 00             adc #0
       00:87E1  AA                tax
       00:87E2  20 66 86          jsr assert_equal
       00:87E5  68                pla
       00:87E6  AA                tax
  606                             ; 0003: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {1}, {$3:uint8[2]}]
  607  00:87E7  A9 01             lda #1
  608  00:87E9  9D 00 02          sta 0+__STACK__,x
  609  00:87EC  A9 1E             lda #LOW(._D3)
  610  00:87EE  9D 01 02          sta 1+__STACK__,x
  611  00:87F1  A9 89             lda #HIGH(._D3)
  612  00:87F3  9D 02 02          sta 2+__STACK__,x
  613                             __call assert_true, #0
       00:87F6  8A                txa
       00:87F7  48                pha
       00:87F8  18                clc
       00:87F9  69 00             adc #0
       00:87FB  AA                tax
       00:87FC  20 BD 85          jsr assert_true
       00:87FF  68                pla
       00:8800  AA                tax
  614                             ; 0004: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {1}, {$4:uint8[4]}]
  615  00:8801  A9 01             lda #1
  616  00:8803  9D 00 02          sta 0+__STACK__,x
  617  00:8806  A9 20             lda #LOW(._D4)
  618  00:8808  9D 01 02          sta 1+__STACK__,x
  619  00:880B  A9 89             lda #HIGH(._D4)
  620  00:880D  9D 02 02          sta 2+__STACK__,x
  621                             __call assert_true, #0
       00:8810  8A                txa
       00:8811  48                pha
       00:8812  18                clc
       00:8813  69 00             adc #0
       00:8815  AA                tax
       00:8816  20 BD 85          jsr assert_true
       00:8819  68                pla
       00:881A  AA                tax
  622                             ; 0005: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {1}, {$5:uint8[2]}]
  623  00:881B  A9 01             lda #1
  624  00:881D  9D 00 02          sta 0+__STACK__,x
  625  00:8820  A9 24             lda #LOW(._D5)
  626  00:8822  9D 01 02          sta 1+__STACK__,x
  627  00:8825  A9 89             lda #HIGH(._D5)
  628  00:8827  9D 02 02          sta 2+__STACK__,x
  629                             __call assert_true, #0
       00:882A  8A                txa
       00:882B  48                pha
       00:882C  18                clc
       00:882D  69 00             adc #0
       00:882F  AA                tax
       00:8830  20 BD 85          jsr assert_true
       00:8833  68                pla
       00:8834  AA                tax
  630                             ; 0006: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {1}, {$6:uint8[4]}]
  631  00:8835  A9 01             lda #1
  632  00:8837  9D 00 02          sta 0+__STACK__,x
  633  00:883A  A9 26             lda #LOW(._D6)
  634  00:883C  9D 01 02          sta 1+__STACK__,x
  635  00:883F  A9 89             lda #HIGH(._D6)
  636  00:8841  9D 02 02          sta 2+__STACK__,x
  637                             __call assert_true, #0
       00:8844  8A                txa
       00:8845  48                pha
       00:8846  18                clc
       00:8847  69 00             adc #0
       00:8849  AA                tax
       00:884A  20 BD 85          jsr assert_true
       00:884D  68                pla
       00:884E  AA                tax
  638                             ; 0007: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {1}, {$7:uint8[3]}]
  639  00:884F  A9 01             lda #1
  640  00:8851  9D 00 02          sta 0+__STACK__,x
  641  00:8854  A9 2A             lda #LOW(._D7)
  642  00:8856  9D 01 02          sta 1+__STACK__,x
  643  00:8859  A9 89             lda #HIGH(._D7)
  644  00:885B  9D 02 02          sta 2+__STACK__,x
  645                             __call assert_true, #0
       00:885E  8A                txa
       00:885F  48                pha
       00:8860  18                clc
       00:8861  69 00             adc #0
       00:8863  AA                tax
       00:8864  20 BD 85          jsr assert_true
       00:8867  68                pla
       00:8868  AA                tax
  646                             ; 0008: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {1}, {$8:uint8[5]}]
  647  00:8869  A9 01             lda #1
  648  00:886B  9D 00 02          sta 0+__STACK__,x
  649  00:886E  A9 2D             lda #LOW(._D8)
  650  00:8870  9D 01 02          sta 1+__STACK__,x
  651  00:8873  A9 89             lda #HIGH(._D8)
  652  00:8875  9D 02 02          sta 2+__STACK__,x
  653                             __call assert_true, #0
       00:8878  8A                txa
       00:8879  48                pha
       00:887A  18                clc
       00:887B  69 00             adc #0
       00:887D  AA                tax
       00:887E  20 BD 85          jsr assert_true
       00:8881  68                pla
       00:8882  AA                tax
  654                             ; 0009: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {1}, {$9:uint8[3]}]
  655  00:8883  A9 01             lda #1
  656  00:8885  9D 00 02          sta 0+__STACK__,x
  657  00:8888  A9 32             lda #LOW(._D9)
  658  00:888A  9D 01 02          sta 1+__STACK__,x
  659  00:888D  A9 89             lda #HIGH(._D9)
  660  00:888F  9D 02 02          sta 2+__STACK__,x
  661                             __call assert_true, #0
       00:8892  8A                txa
       00:8893  48                pha
       00:8894  18                clc
       00:8895  69 00             adc #0
       00:8897  AA                tax
       00:8898  20 BD 85          jsr assert_true
       00:889B  68                pla
       00:889C  AA                tax
  662                             ; 0010: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {1}, {$10:uint8[5]}]
  663  00:889D  A9 01             lda #1
  664  00:889F  9D 00 02          sta 0+__STACK__,x
  665  00:88A2  A9 35             lda #LOW(._D10)
  666  00:88A4  9D 01 02          sta 1+__STACK__,x
  667  00:88A7  A9 89             lda #HIGH(._D10)
  668  00:88A9  9D 02 02          sta 2+__STACK__,x
  669                             __call assert_true, #0
       00:88AC  8A                txa
       00:88AD  48                pha
       00:88AE  18                clc
       00:88AF  69 00             adc #0
       00:88B1  AA                tax
       00:88B2  20 BD 85          jsr assert_true
       00:88B5  68                pla
       00:88B6  AA                tax
  670                             ; 0011: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {1}, {$11:uint8[3]}]
  671  00:88B7  A9 01             lda #1
  672  00:88B9  9D 00 02          sta 0+__STACK__,x
  673  00:88BC  A9 3A             lda #LOW(._D11)
  674  00:88BE  9D 01 02          sta 1+__STACK__,x
  675  00:88C1  A9 89             lda #HIGH(._D11)
  676  00:88C3  9D 02 02          sta 2+__STACK__,x
  677                             __call assert_true, #0
       00:88C6  8A                txa
       00:88C7  48                pha
       00:88C8  18                clc
       00:88C9  69 00             adc #0
       00:88CB  AA                tax
       00:88CC  20 BD 85          jsr assert_true
       00:88CF  68                pla
       00:88D0  AA                tax
  678                             ; 0012: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {1}, {$12:uint8[3]}]
  679  00:88D1  A9 01             lda #1
  680  00:88D3  9D 00 02          sta 0+__STACK__,x
  681  00:88D6  A9 3D             lda #LOW(._D12)
  682  00:88D8  9D 01 02          sta 1+__STACK__,x
  683  00:88DB  A9 89             lda #HIGH(._D12)
  684  00:88DD  9D 02 02          sta 2+__STACK__,x
  685                             __call assert_true, #0
       00:88E0  8A                txa
       00:88E1  48                pha
       00:88E2  18                clc
       00:88E3  69 00             adc #0
       00:88E5  AA                tax
       00:88E6  20 BD 85          jsr assert_true
       00:88E9  68                pla
       00:88EA  AA                tax
  686                             ; 0013: [:call, nil, <Lambda:puts void(uint8*)>, {$13:uint8[1]}]
  687  00:88EB  A9 40             lda #LOW(._D13)
  688  00:88ED  9D 00 02          sta 0+__STACK__,x
  689  00:88F0  A9 89             lda #HIGH(._D13)
  690  00:88F2  9D 01 02          sta 1+__STACK__,x
  691                             __call puts, #0
       00:88F5  8A                txa
       00:88F6  48                pha
       00:88F7  18                clc
       00:88F8  69 00             adc #0
       00:88FA  AA                tax
       00:88FB  20 87 85          jsr puts
       00:88FE  68                pla
       00:88FF  AA                tax
  692                             ; 0014: [:return]
  693  00:8900  60                rts
  694  00:8901            ._D0:
  695  00:8901  74 65 73          .db 116,101,115,116,95,99,111,110,115,116,95,111,112,58,0
       00:8904  74 5F 63  
       00:8907  6F 6E 73  
       00:890A  74 5F 6F  
       00:890D  70 3A 00  
  696  00:8910            ._D1:
  697  00:8910  6E 75 6D          .db 110,117,109,0
       00:8913  00        
  698  00:8914            ._D2:
  699  00:8914  2B 2C 2D          .db 43,44,45,44,42,44,47,44,37,0
       00:8917  2C 2A 2C  
       00:891A  2F 2C 25  
       00:891D  00        
  700  00:891E            ._D3:
  701  00:891E  3C 00             .db 60,0
  702  00:8920            ._D4:
  703  00:8920  21 2C 3C          .db 33,44,60,0
       00:8923  00        
  704  00:8924            ._D5:
  705  00:8924  3E 00             .db 62,0
  706  00:8926            ._D6:
  707  00:8926  21 2C 3E          .db 33,44,62,0
       00:8929  00        
  708  00:892A            ._D7:
  709  00:892A  3C 3D 00          .db 60,61,0
  710  00:892D            ._D8:
  711  00:892D  21 2C 3C          .db 33,44,60,61,0
       00:8930  3D 00     
  712  00:8932            ._D9:
  713  00:8932  3E 3D 00          .db 62,61,0
  714  00:8935            ._D10:
  715  00:8935  21 2C 3E          .db 33,44,62,61,0
       00:8938  3D 00     
  716  00:893A            ._D11:
  717  00:893A  3D 3D 00          .db 61,61,0
  718  00:893D            ._D12:
  719  00:893D  21 3D 00          .db 33,61,0
  720  00:8940            ._D13:
  721  00:8940  00                .db 0
  722                     
  723                             ; function test_int_op
  724  00:8941            test_int_op:
  725                             ; 0000: [:call, nil, <Lambda:print void(uint8*)>, {$0:uint8[13]}]
  726  00:8941  A9 56             lda #LOW(._D0)
  727  00:8943  9D 29 02          sta 41+__STACK__,x
  728  00:8946  A9 8F             lda #HIGH(._D0)
  729  00:8948  9D 2A 02          sta 42+__STACK__,x
  730                             __call print, #41
       00:894B  8A                txa
       00:894C  48                pha
       00:894D  18                clc
       00:894E  69 29             adc #41
       00:8950  AA                tax
       00:8951  20 75 85          jsr print
       00:8954  68                pla
       00:8955  AA                tax
  731                             ; 0001: [:load, {i1:uint8}, {1}]
  732  00:8956  A9 01             lda #1
  733  00:8958  9D 00 02          sta 0+__STACK__+0,x
  734                             ; 0002: [:load, {i2:uint8}, {2}]
  735  00:895B  A9 02             lda #2
  736  00:895D  9D 01 02          sta 0+__STACK__+1,x
  737                             ; 0003: [:load, {i3:uint8}, {3}]
  738  00:8960  A9 03             lda #3
  739  00:8962  9D 02 02          sta 0+__STACK__+2,x
  740                             ; 0004: [:load, {i5:uint8}, {5}]
  741  00:8965  A9 05             lda #5
  742  00:8967  9D 03 02          sta 0+__STACK__+3,x
  743                             ; 0005: [:load, {i10:uint8}, {10}]
  744  00:896A  A9 0A             lda #10
  745  00:896C  9D 04 02          sta 0+__STACK__+4,x
  746                             ; 0006: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {i1:uint8}, {i1:uint8}, {$1:uint8[4]}]
  747  00:896F  BD 00 02          lda 0+__STACK__+0,x
  748  00:8972  9D 29 02          sta 41+__STACK__,x
  749  00:8975  A9 00             lda #0
  750  00:8977  9D 2A 02          sta 42+__STACK__,x
  751  00:897A  BD 00 02          lda 0+__STACK__+0,x
  752  00:897D  9D 2B 02          sta 43+__STACK__,x
  753  00:8980  A9 00             lda #0
  754  00:8982  9D 2C 02          sta 44+__STACK__,x
  755  00:8985  A9 63             lda #LOW(._D1)
  756  00:8987  9D 2D 02          sta 45+__STACK__,x
  757  00:898A  A9 8F             lda #HIGH(._D1)
  758  00:898C  9D 2E 02          sta 46+__STACK__,x
  759                             __call assert_equal, #41
       00:898F  8A                txa
       00:8990  48                pha
       00:8991  18                clc
       00:8992  69 29             adc #41
       00:8994  AA                tax
       00:8995  20 66 86          jsr assert_equal
       00:8998  68                pla
       00:8999  AA                tax
  760                             ; 0007: [:mul, {$2:uint8}, {i2:uint8}, {i3:uint8}]
  761  00:899A  BD 01 02          lda 0+__STACK__+1,x
  762  00:899D  8D 00 00          sta __reg+0+0
  763  00:89A0  BD 02 02          lda 0+__STACK__+2,x
  764  00:89A3  8D 02 00          sta __reg+2+0
  765  00:89A6  20 1B 84          jsr __mul_8
  766  00:89A9  AD 04 00          lda __reg+4+0
  767  00:89AC  9D 05 02          sta 0+__STACK__+5,x
  768                             ; 0008: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$2:uint8}, {6}, {$3:uint8[4]}]
  769  00:89AF  BD 05 02          lda 0+__STACK__+5,x
  770  00:89B2  9D 29 02          sta 41+__STACK__,x
  771  00:89B5  A9 00             lda #0
  772  00:89B7  9D 2A 02          sta 42+__STACK__,x
  773  00:89BA  A9 06             lda #6
  774  00:89BC  9D 2B 02          sta 43+__STACK__,x
  775  00:89BF  A9 00             lda #0
  776  00:89C1  9D 2C 02          sta 44+__STACK__,x
  777  00:89C4  A9 67             lda #LOW(._D3)
  778  00:89C6  9D 2D 02          sta 45+__STACK__,x
  779  00:89C9  A9 8F             lda #HIGH(._D3)
  780  00:89CB  9D 2E 02          sta 46+__STACK__,x
  781                             __call assert_equal, #41
       00:89CE  8A                txa
       00:89CF  48                pha
       00:89D0  18                clc
       00:89D1  69 29             adc #41
       00:89D3  AA                tax
       00:89D4  20 66 86          jsr assert_equal
       00:89D7  68                pla
       00:89D8  AA                tax
  782                             ; 0009: [:mul, {$4:uint8}, {i5:uint8}, {i5:uint8}]
  783  00:89D9  BD 03 02          lda 0+__STACK__+3,x
  784  00:89DC  8D 00 00          sta __reg+0+0
  785  00:89DF  BD 03 02          lda 0+__STACK__+3,x
  786  00:89E2  8D 02 00          sta __reg+2+0
  787  00:89E5  20 1B 84          jsr __mul_8
  788  00:89E8  AD 04 00          lda __reg+4+0
  789  00:89EB  9D 06 02          sta 0+__STACK__+6,x
  790                             ; 0010: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$4:uint8}, {25}, {$5:uint8[10]}]
  791  00:89EE  BD 06 02          lda 0+__STACK__+6,x
  792  00:89F1  9D 29 02          sta 41+__STACK__,x
  793  00:89F4  A9 00             lda #0
  794  00:89F6  9D 2A 02          sta 42+__STACK__,x
  795  00:89F9  A9 19             lda #25
  796  00:89FB  9D 2B 02          sta 43+__STACK__,x
  797  00:89FE  A9 00             lda #0
  798  00:8A00  9D 2C 02          sta 44+__STACK__,x
  799  00:8A03  A9 6B             lda #LOW(._D5)
  800  00:8A05  9D 2D 02          sta 45+__STACK__,x
  801  00:8A08  A9 8F             lda #HIGH(._D5)
  802  00:8A0A  9D 2E 02          sta 46+__STACK__,x
  803                             __call assert_equal, #41
       00:8A0D  8A                txa
       00:8A0E  48                pha
       00:8A0F  18                clc
       00:8A10  69 29             adc #41
       00:8A12  AA                tax
       00:8A13  20 66 86          jsr assert_equal
       00:8A16  68                pla
       00:8A17  AA                tax
  804                             ; 0011: [:mul, {$6:uint8}, {i5:uint8}, {60}]
  805  00:8A18  BD 03 02          lda 0+__STACK__+3,x
  806  00:8A1B  8D 00 00          sta __reg+0+0
  807  00:8A1E  A9 3C             lda #60
  808  00:8A20  8D 02 00          sta __reg+2+0
  809  00:8A23  20 1B 84          jsr __mul_8
  810  00:8A26  AD 04 00          lda __reg+4+0
  811  00:8A29  9D 07 02          sta 0+__STACK__+7,x
  812                             ; 0012: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$6:uint8}, {44}, {$7:uint8[10]}]
  813  00:8A2C  BD 07 02          lda 0+__STACK__+7,x
  814  00:8A2F  9D 29 02          sta 41+__STACK__,x
  815  00:8A32  A9 00             lda #0
  816  00:8A34  9D 2A 02          sta 42+__STACK__,x
  817  00:8A37  A9 2C             lda #44
  818  00:8A39  9D 2B 02          sta 43+__STACK__,x
  819  00:8A3C  A9 00             lda #0
  820  00:8A3E  9D 2C 02          sta 44+__STACK__,x
  821  00:8A41  A9 75             lda #LOW(._D7)
  822  00:8A43  9D 2D 02          sta 45+__STACK__,x
  823  00:8A46  A9 8F             lda #HIGH(._D7)
  824  00:8A48  9D 2E 02          sta 46+__STACK__,x
  825                             __call assert_equal, #41
       00:8A4B  8A                txa
       00:8A4C  48                pha
       00:8A4D  18                clc
       00:8A4E  69 29             adc #41
       00:8A50  AA                tax
       00:8A51  20 66 86          jsr assert_equal
       00:8A54  68                pla
       00:8A55  AA                tax
  826                             ; 0013: [:div, {$8:uint8}, {i10:uint8}, {i3:uint8}]
  827  00:8A56  BD 04 02          lda 0+__STACK__+4,x
  828  00:8A59  8D 00 00          sta __reg+0+0
  829  00:8A5C  BD 02 02          lda 0+__STACK__+2,x
  830  00:8A5F  8D 02 00          sta __reg+2+0
  831  00:8A62  20 88 84          jsr __div_8
  832  00:8A65  AD 04 00          lda __reg+4+0
  833  00:8A68  9D 08 02          sta 0+__STACK__+8,x
  834                             ; 0014: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$8:uint8}, {3}, {$9:uint8[2]}]
  835  00:8A6B  BD 08 02          lda 0+__STACK__+8,x
  836  00:8A6E  9D 29 02          sta 41+__STACK__,x
  837  00:8A71  A9 00             lda #0
  838  00:8A73  9D 2A 02          sta 42+__STACK__,x
  839  00:8A76  A9 03             lda #3
  840  00:8A78  9D 2B 02          sta 43+__STACK__,x
  841  00:8A7B  A9 00             lda #0
  842  00:8A7D  9D 2C 02          sta 44+__STACK__,x
  843  00:8A80  A9 7F             lda #LOW(._D9)
  844  00:8A82  9D 2D 02          sta 45+__STACK__,x
  845  00:8A85  A9 8F             lda #HIGH(._D9)
  846  00:8A87  9D 2E 02          sta 46+__STACK__,x
  847                             __call assert_equal, #41
       00:8A8A  8A                txa
       00:8A8B  48                pha
       00:8A8C  18                clc
       00:8A8D  69 29             adc #41
       00:8A8F  AA                tax
       00:8A90  20 66 86          jsr assert_equal
       00:8A93  68                pla
       00:8A94  AA                tax
  848                             ; 0015: [:div, {$10:uint8}, {255}, {i10:uint8}]
  849  00:8A95  A9 FF             lda #255
  850  00:8A97  8D 00 00          sta __reg+0+0
  851  00:8A9A  BD 04 02          lda 0+__STACK__+4,x
  852  00:8A9D  8D 02 00          sta __reg+2+0
  853  00:8AA0  20 88 84          jsr __div_8
  854  00:8AA3  AD 04 00          lda __reg+4+0
  855  00:8AA6  9D 09 02          sta 0+__STACK__+9,x
  856                             ; 0016: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$10:uint8}, {25}, {$11:uint8[2]}]
  857  00:8AA9  BD 09 02          lda 0+__STACK__+9,x
  858  00:8AAC  9D 29 02          sta 41+__STACK__,x
  859  00:8AAF  A9 00             lda #0
  860  00:8AB1  9D 2A 02          sta 42+__STACK__,x
  861  00:8AB4  A9 19             lda #25
  862  00:8AB6  9D 2B 02          sta 43+__STACK__,x
  863  00:8AB9  A9 00             lda #0
  864  00:8ABB  9D 2C 02          sta 44+__STACK__,x
  865  00:8ABE  A9 81             lda #LOW(._D11)
  866  00:8AC0  9D 2D 02          sta 45+__STACK__,x
  867  00:8AC3  A9 8F             lda #HIGH(._D11)
  868  00:8AC5  9D 2E 02          sta 46+__STACK__,x
  869                             __call assert_equal, #41
       00:8AC8  8A                txa
       00:8AC9  48                pha
       00:8ACA  18                clc
       00:8ACB  69 29             adc #41
       00:8ACD  AA                tax
       00:8ACE  20 66 86          jsr assert_equal
       00:8AD1  68                pla
       00:8AD2  AA                tax
  870                             ; 0017: [:mod, {$12:uint8}, {255}, {i10:uint8}]
  871  00:8AD3  A9 FF             lda #255
  872  00:8AD5  8D 00 00          sta __reg+0+0
  873  00:8AD8  BD 04 02          lda 0+__STACK__+4,x
  874  00:8ADB  8D 02 00          sta __reg+2+0
  875  00:8ADE  20 51 85          jsr __mod_8
  876  00:8AE1  AD 04 00          lda __reg+4+0
  877  00:8AE4  9D 0A 02          sta 0+__STACK__+10,x
  878                             ; 0018: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$12:uint8}, {5}, {$13:uint8[2]}]
  879  00:8AE7  BD 0A 02          lda 0+__STACK__+10,x
  880  00:8AEA  9D 29 02          sta 41+__STACK__,x
  881  00:8AED  A9 00             lda #0
  882  00:8AEF  9D 2A 02          sta 42+__STACK__,x
  883  00:8AF2  A9 05             lda #5
  884  00:8AF4  9D 2B 02          sta 43+__STACK__,x
  885  00:8AF7  A9 00             lda #0
  886  00:8AF9  9D 2C 02          sta 44+__STACK__,x
  887  00:8AFC  A9 83             lda #LOW(._D13)
  888  00:8AFE  9D 2D 02          sta 45+__STACK__,x
  889  00:8B01  A9 8F             lda #HIGH(._D13)
  890  00:8B03  9D 2E 02          sta 46+__STACK__,x
  891                             __call assert_equal, #41
       00:8B06  8A                txa
       00:8B07  48                pha
       00:8B08  18                clc
       00:8B09  69 29             adc #41
       00:8B0B  AA                tax
       00:8B0C  20 66 86          jsr assert_equal
       00:8B0F  68                pla
       00:8B10  AA                tax
  892                             ; 0019: [:add, {$14:uint8}, {i10:uint8}, {i10:uint8}]
  893  00:8B11  18                clc
  894  00:8B12  BD 04 02          lda 0+__STACK__+4,x
  895  00:8B15  7D 04 02          adc 0+__STACK__+4,x
  896  00:8B18  9D 0B 02          sta 0+__STACK__+11,x
  897                             ; 0020: [:sub, {$15:uint8}, {$14:uint8}, {i5:uint8}]
  898  00:8B1B  38                sec
  899  00:8B1C  BD 0B 02          lda 0+__STACK__+11,x
  900  00:8B1F  FD 03 02          sbc 0+__STACK__+3,x
  901  00:8B22  9D 0C 02          sta 0+__STACK__+12,x
  902                             ; 0021: [:mul, {$16:uint8}, {i2:uint8}, {$15:uint8}]
  903  00:8B25  BD 01 02          lda 0+__STACK__+1,x
  904  00:8B28  8D 00 00          sta __reg+0+0
  905  00:8B2B  BD 0C 02          lda 0+__STACK__+12,x
  906  00:8B2E  8D 02 00          sta __reg+2+0
  907  00:8B31  20 1B 84          jsr __mul_8
  908  00:8B34  AD 04 00          lda __reg+4+0
  909  00:8B37  9D 0D 02          sta 0+__STACK__+13,x
  910                             ; 0022: [:div, {$17:uint8}, {$16:uint8}, {i3:uint8}]
  911  00:8B3A  BD 0D 02          lda 0+__STACK__+13,x
  912  00:8B3D  8D 00 00          sta __reg+0+0
  913  00:8B40  BD 02 02          lda 0+__STACK__+2,x
  914  00:8B43  8D 02 00          sta __reg+2+0
  915  00:8B46  20 88 84          jsr __div_8
  916  00:8B49  AD 04 00          lda __reg+4+0
  917  00:8B4C  9D 0E 02          sta 0+__STACK__+14,x
  918                             ; 0023: [:mod, {$18:uint8}, {18}, {$17:uint8}]
  919  00:8B4F  A9 12             lda #18
  920  00:8B51  8D 00 00          sta __reg+0+0
  921  00:8B54  BD 0E 02          lda 0+__STACK__+14,x
  922  00:8B57  8D 02 00          sta __reg+2+0
  923  00:8B5A  20 51 85          jsr __mod_8
  924  00:8B5D  AD 04 00          lda __reg+4+0
  925  00:8B60  9D 0F 02          sta 0+__STACK__+15,x
  926                             ; 0024: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$18:uint8}, {8}, {$19:uint8[10]}]
  927  00:8B63  BD 0F 02          lda 0+__STACK__+15,x
  928  00:8B66  9D 29 02          sta 41+__STACK__,x
  929  00:8B69  A9 00             lda #0
  930  00:8B6B  9D 2A 02          sta 42+__STACK__,x
  931  00:8B6E  A9 08             lda #8
  932  00:8B70  9D 2B 02          sta 43+__STACK__,x
  933  00:8B73  A9 00             lda #0
  934  00:8B75  9D 2C 02          sta 44+__STACK__,x
  935  00:8B78  A9 85             lda #LOW(._D19)
  936  00:8B7A  9D 2D 02          sta 45+__STACK__,x
  937  00:8B7D  A9 8F             lda #HIGH(._D19)
  938  00:8B7F  9D 2E 02          sta 46+__STACK__,x
  939                             __call assert_equal, #41
       00:8B82  8A                txa
       00:8B83  48                pha
       00:8B84  18                clc
       00:8B85  69 29             adc #41
       00:8B87  AA                tax
       00:8B88  20 66 86          jsr assert_equal
       00:8B8B  68                pla
       00:8B8C  AA                tax
  940                             ; 0025: [:and, {$20:uint8}, {i3:uint8}, {i2:uint8}]
  941  00:8B8D  BD 02 02          lda 0+__STACK__+2,x
  942  00:8B90  3D 01 02          and 0+__STACK__+1,x
  943  00:8B93  9D 10 02          sta 0+__STACK__+16,x
  944                             ; 0026: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$20:uint8}, {2}, {$21:uint8[2]}]
  945  00:8B96  BD 10 02          lda 0+__STACK__+16,x
  946  00:8B99  9D 29 02          sta 41+__STACK__,x
  947  00:8B9C  A9 00             lda #0
  948  00:8B9E  9D 2A 02          sta 42+__STACK__,x
  949  00:8BA1  A9 02             lda #2
  950  00:8BA3  9D 2B 02          sta 43+__STACK__,x
  951  00:8BA6  A9 00             lda #0
  952  00:8BA8  9D 2C 02          sta 44+__STACK__,x
  953  00:8BAB  A9 8F             lda #LOW(._D21)
  954  00:8BAD  9D 2D 02          sta 45+__STACK__,x
  955  00:8BB0  A9 8F             lda #HIGH(._D21)
  956  00:8BB2  9D 2E 02          sta 46+__STACK__,x
  957                             __call assert_equal, #41
       00:8BB5  8A                txa
       00:8BB6  48                pha
       00:8BB7  18                clc
       00:8BB8  69 29             adc #41
       00:8BBA  AA                tax
       00:8BBB  20 66 86          jsr assert_equal
       00:8BBE  68                pla
       00:8BBF  AA                tax
  958                             ; 0027: [:or, {$22:uint8}, {i1:uint8}, {i2:uint8}]
  959  00:8BC0  BD 00 02          lda 0+__STACK__+0,x
  960  00:8BC3  1D 01 02          ora 0+__STACK__+1,x
  961  00:8BC6  9D 11 02          sta 0+__STACK__+17,x
  962                             ; 0028: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$22:uint8}, {3}, {$23:uint8[2]}]
  963  00:8BC9  BD 11 02          lda 0+__STACK__+17,x
  964  00:8BCC  9D 29 02          sta 41+__STACK__,x
  965  00:8BCF  A9 00             lda #0
  966  00:8BD1  9D 2A 02          sta 42+__STACK__,x
  967  00:8BD4  A9 03             lda #3
  968  00:8BD6  9D 2B 02          sta 43+__STACK__,x
  969  00:8BD9  A9 00             lda #0
  970  00:8BDB  9D 2C 02          sta 44+__STACK__,x
  971  00:8BDE  A9 91             lda #LOW(._D23)
  972  00:8BE0  9D 2D 02          sta 45+__STACK__,x
  973  00:8BE3  A9 8F             lda #HIGH(._D23)
  974  00:8BE5  9D 2E 02          sta 46+__STACK__,x
  975                             __call assert_equal, #41
       00:8BE8  8A                txa
       00:8BE9  48                pha
       00:8BEA  18                clc
       00:8BEB  69 29             adc #41
       00:8BED  AA                tax
       00:8BEE  20 66 86          jsr assert_equal
       00:8BF1  68                pla
       00:8BF2  AA                tax
  976                             ; 0029: [:xor, {$24:uint8}, {i3:uint8}, {i2:uint8}]
  977  00:8BF3  BD 02 02          lda 0+__STACK__+2,x
  978  00:8BF6  5D 01 02          eor 0+__STACK__+1,x
  979  00:8BF9  9D 12 02          sta 0+__STACK__+18,x
  980                             ; 0030: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$24:uint8}, {1}, {$25:uint8[2]}]
  981  00:8BFC  BD 12 02          lda 0+__STACK__+18,x
  982  00:8BFF  9D 29 02          sta 41+__STACK__,x
  983  00:8C02  A9 00             lda #0
  984  00:8C04  9D 2A 02          sta 42+__STACK__,x
  985  00:8C07  A9 01             lda #1
  986  00:8C09  9D 2B 02          sta 43+__STACK__,x
  987  00:8C0C  A9 00             lda #0
  988  00:8C0E  9D 2C 02          sta 44+__STACK__,x
  989  00:8C11  A9 93             lda #LOW(._D25)
  990  00:8C13  9D 2D 02          sta 45+__STACK__,x
  991  00:8C16  A9 8F             lda #HIGH(._D25)
  992  00:8C18  9D 2E 02          sta 46+__STACK__,x
  993                             __call assert_equal, #41
       00:8C1B  8A                txa
       00:8C1C  48                pha
       00:8C1D  18                clc
       00:8C1E  69 29             adc #41
       00:8C20  AA                tax
       00:8C21  20 66 86          jsr assert_equal
       00:8C24  68                pla
       00:8C25  AA                tax
  994                             ; 0031: [:lt, {$26:uint8}, {i1:uint8}, {i2:uint8}]
  995  00:8C26  BD 00 02          lda 0+__STACK__+0,x
  996  00:8C29  DD 01 02          cmp 0+__STACK__+1,x
  997  00:8C2C  90 08             bcc ._9
  998  00:8C2E  A9 00             lda #0
  999  00:8C30  9D 13 02          sta 0+__STACK__+19,x
 1000  00:8C33  4C 3B 8C          jmp ._10
 1001  00:8C36            ._9:
 1002  00:8C36  A9 01             lda #1
 1003  00:8C38  9D 13 02          sta 0+__STACK__+19,x
 1004  00:8C3B            ._10:
 1005                             ; 0032: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$26:uint8}, {$27:uint8[2]}]
 1006  00:8C3B  BD 13 02          lda 0+__STACK__+19,x
 1007  00:8C3E  9D 29 02          sta 41+__STACK__,x
 1008  00:8C41  A9 95             lda #LOW(._D27)
 1009  00:8C43  9D 2A 02          sta 42+__STACK__,x
 1010  00:8C46  A9 8F             lda #HIGH(._D27)
 1011  00:8C48  9D 2B 02          sta 43+__STACK__,x
 1012                             __call assert_true, #41
       00:8C4B  8A                txa
       00:8C4C  48                pha
       00:8C4D  18                clc
       00:8C4E  69 29             adc #41
       00:8C50  AA                tax
       00:8C51  20 BD 85          jsr assert_true
       00:8C54  68                pla
       00:8C55  AA                tax
 1013                             ; 0033: [:lt, {$28:uint8}, {i2:uint8}, {i2:uint8}]
 1014  00:8C56  BD 01 02          lda 0+__STACK__+1,x
 1015  00:8C59  DD 01 02          cmp 0+__STACK__+1,x
 1016  00:8C5C  90 08             bcc ._11
 1017  00:8C5E  A9 00             lda #0
 1018  00:8C60  9D 14 02          sta 0+__STACK__+20,x
 1019  00:8C63  4C 6B 8C          jmp ._12
 1020  00:8C66            ._11:
 1021  00:8C66  A9 01             lda #1
 1022  00:8C68  9D 14 02          sta 0+__STACK__+20,x
 1023  00:8C6B            ._12:
 1024                             ; 0034: [:not, {$29:uint8}, {$28:uint8}]
 1025  00:8C6B  BD 14 02          lda 0+__STACK__+20,x
 1026  00:8C6E  F0 08             beq ._13
 1027  00:8C70  A9 00             lda #0
 1028  00:8C72  9D 15 02          sta 0+__STACK__+21,x
 1029  00:8C75  4C 7D 8C          jmp ._14
 1030  00:8C78            ._13:
 1031  00:8C78  A9 01             lda #1
 1032  00:8C7A  9D 15 02          sta 0+__STACK__+21,x
 1033  00:8C7D            ._14:
 1034                             ; 0035: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$29:uint8}, {$30:uint8[4]}]
 1035  00:8C7D  BD 15 02          lda 0+__STACK__+21,x
 1036  00:8C80  9D 29 02          sta 41+__STACK__,x
 1037  00:8C83  A9 97             lda #LOW(._D30)
 1038  00:8C85  9D 2A 02          sta 42+__STACK__,x
 1039  00:8C88  A9 8F             lda #HIGH(._D30)
 1040  00:8C8A  9D 2B 02          sta 43+__STACK__,x
 1041                             __call assert_true, #41
       00:8C8D  8A                txa
       00:8C8E  48                pha
       00:8C8F  18                clc
       00:8C90  69 29             adc #41
       00:8C92  AA                tax
       00:8C93  20 BD 85          jsr assert_true
       00:8C96  68                pla
       00:8C97  AA                tax
 1042                             ; 0036: [:lt, {$31:uint8}, {i1:uint8}, {i2:uint8}]
 1043  00:8C98  BD 00 02          lda 0+__STACK__+0,x
 1044  00:8C9B  DD 01 02          cmp 0+__STACK__+1,x
 1045  00:8C9E  90 08             bcc ._15
 1046  00:8CA0  A9 00             lda #0
 1047  00:8CA2  9D 16 02          sta 0+__STACK__+22,x
 1048  00:8CA5  4C AD 8C          jmp ._16
 1049  00:8CA8            ._15:
 1050  00:8CA8  A9 01             lda #1
 1051  00:8CAA  9D 16 02          sta 0+__STACK__+22,x
 1052  00:8CAD            ._16:
 1053                             ; 0037: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$31:uint8}, {$32:uint8[2]}]
 1054  00:8CAD  BD 16 02          lda 0+__STACK__+22,x
 1055  00:8CB0  9D 29 02          sta 41+__STACK__,x
 1056  00:8CB3  A9 9B             lda #LOW(._D32)
 1057  00:8CB5  9D 2A 02          sta 42+__STACK__,x
 1058  00:8CB8  A9 8F             lda #HIGH(._D32)
 1059  00:8CBA  9D 2B 02          sta 43+__STACK__,x
 1060                             __call assert_true, #41
       00:8CBD  8A                txa
       00:8CBE  48                pha
       00:8CBF  18                clc
       00:8CC0  69 29             adc #41
       00:8CC2  AA                tax
       00:8CC3  20 BD 85          jsr assert_true
       00:8CC6  68                pla
       00:8CC7  AA                tax
 1061                             ; 0038: [:lt, {$33:uint8}, {i2:uint8}, {i2:uint8}]
 1062  00:8CC8  BD 01 02          lda 0+__STACK__+1,x
 1063  00:8CCB  DD 01 02          cmp 0+__STACK__+1,x
 1064  00:8CCE  90 08             bcc ._17
 1065  00:8CD0  A9 00             lda #0
 1066  00:8CD2  9D 17 02          sta 0+__STACK__+23,x
 1067  00:8CD5  4C DD 8C          jmp ._18
 1068  00:8CD8            ._17:
 1069  00:8CD8  A9 01             lda #1
 1070  00:8CDA  9D 17 02          sta 0+__STACK__+23,x
 1071  00:8CDD            ._18:
 1072                             ; 0039: [:not, {$34:uint8}, {$33:uint8}]
 1073  00:8CDD  BD 17 02          lda 0+__STACK__+23,x
 1074  00:8CE0  F0 08             beq ._19
 1075  00:8CE2  A9 00             lda #0
 1076  00:8CE4  9D 18 02          sta 0+__STACK__+24,x
 1077  00:8CE7  4C EF 8C          jmp ._20
 1078  00:8CEA            ._19:
 1079  00:8CEA  A9 01             lda #1
 1080  00:8CEC  9D 18 02          sta 0+__STACK__+24,x
 1081  00:8CEF            ._20:
 1082                             ; 0040: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$34:uint8}, {$35:uint8[4]}]
 1083  00:8CEF  BD 18 02          lda 0+__STACK__+24,x
 1084  00:8CF2  9D 29 02          sta 41+__STACK__,x
 1085  00:8CF5  A9 9D             lda #LOW(._D35)
 1086  00:8CF7  9D 2A 02          sta 42+__STACK__,x
 1087  00:8CFA  A9 8F             lda #HIGH(._D35)
 1088  00:8CFC  9D 2B 02          sta 43+__STACK__,x
 1089                             __call assert_true, #41
       00:8CFF  8A                txa
       00:8D00  48                pha
       00:8D01  18                clc
       00:8D02  69 29             adc #41
       00:8D04  AA                tax
       00:8D05  20 BD 85          jsr assert_true
       00:8D08  68                pla
       00:8D09  AA                tax
 1090                             ; 0041: [:lt, {$36:uint8}, {i2:uint8}, {i2:uint8}]
 1091  00:8D0A  BD 01 02          lda 0+__STACK__+1,x
 1092  00:8D0D  DD 01 02          cmp 0+__STACK__+1,x
 1093  00:8D10  90 08             bcc ._21
 1094  00:8D12  A9 00             lda #0
 1095  00:8D14  9D 19 02          sta 0+__STACK__+25,x
 1096  00:8D17  4C 1F 8D          jmp ._22
 1097  00:8D1A            ._21:
 1098  00:8D1A  A9 01             lda #1
 1099  00:8D1C  9D 19 02          sta 0+__STACK__+25,x
 1100  00:8D1F            ._22:
 1101                             ; 0042: [:not, {$37:uint8}, {$36:uint8}]
 1102  00:8D1F  BD 19 02          lda 0+__STACK__+25,x
 1103  00:8D22  F0 08             beq ._23
 1104  00:8D24  A9 00             lda #0
 1105  00:8D26  9D 1A 02          sta 0+__STACK__+26,x
 1106  00:8D29  4C 31 8D          jmp ._24
 1107  00:8D2C            ._23:
 1108  00:8D2C  A9 01             lda #1
 1109  00:8D2E  9D 1A 02          sta 0+__STACK__+26,x
 1110  00:8D31            ._24:
 1111                             ; 0043: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$37:uint8}, {$38:uint8[3]}]
 1112  00:8D31  BD 1A 02          lda 0+__STACK__+26,x
 1113  00:8D34  9D 29 02          sta 41+__STACK__,x
 1114  00:8D37  A9 A1             lda #LOW(._D38)
 1115  00:8D39  9D 2A 02          sta 42+__STACK__,x
 1116  00:8D3C  A9 8F             lda #HIGH(._D38)
 1117  00:8D3E  9D 2B 02          sta 43+__STACK__,x
 1118                             __call assert_true, #41
       00:8D41  8A                txa
       00:8D42  48                pha
       00:8D43  18                clc
       00:8D44  69 29             adc #41
       00:8D46  AA                tax
       00:8D47  20 BD 85          jsr assert_true
       00:8D4A  68                pla
       00:8D4B  AA                tax
 1119                             ; 0044: [:lt, {$39:uint8}, {i2:uint8}, {i3:uint8}]
 1120  00:8D4C  BD 01 02          lda 0+__STACK__+1,x
 1121  00:8D4F  DD 02 02          cmp 0+__STACK__+2,x
 1122  00:8D52  90 08             bcc ._25
 1123  00:8D54  A9 00             lda #0
 1124  00:8D56  9D 1B 02          sta 0+__STACK__+27,x
 1125  00:8D59  4C 61 8D          jmp ._26
 1126  00:8D5C            ._25:
 1127  00:8D5C  A9 01             lda #1
 1128  00:8D5E  9D 1B 02          sta 0+__STACK__+27,x
 1129  00:8D61            ._26:
 1130                             ; 0045: [:not, {$40:uint8}, {$39:uint8}]
 1131  00:8D61  BD 1B 02          lda 0+__STACK__+27,x
 1132  00:8D64  F0 08             beq ._27
 1133  00:8D66  A9 00             lda #0
 1134  00:8D68  9D 1C 02          sta 0+__STACK__+28,x
 1135  00:8D6B  4C 73 8D          jmp ._28
 1136  00:8D6E            ._27:
 1137  00:8D6E  A9 01             lda #1
 1138  00:8D70  9D 1C 02          sta 0+__STACK__+28,x
 1139  00:8D73            ._28:
 1140                             ; 0046: [:not, {$41:uint8}, {$40:uint8}]
 1141  00:8D73  BD 1C 02          lda 0+__STACK__+28,x
 1142  00:8D76  F0 08             beq ._29
 1143  00:8D78  A9 00             lda #0
 1144  00:8D7A  9D 1D 02          sta 0+__STACK__+29,x
 1145  00:8D7D  4C 85 8D          jmp ._30
 1146  00:8D80            ._29:
 1147  00:8D80  A9 01             lda #1
 1148  00:8D82  9D 1D 02          sta 0+__STACK__+29,x
 1149  00:8D85            ._30:
 1150                             ; 0047: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$41:uint8}, {$42:uint8[5]}]
 1151  00:8D85  BD 1D 02          lda 0+__STACK__+29,x
 1152  00:8D88  9D 29 02          sta 41+__STACK__,x
 1153  00:8D8B  A9 A4             lda #LOW(._D42)
 1154  00:8D8D  9D 2A 02          sta 42+__STACK__,x
 1155  00:8D90  A9 8F             lda #HIGH(._D42)
 1156  00:8D92  9D 2B 02          sta 43+__STACK__,x
 1157                             __call assert_true, #41
       00:8D95  8A                txa
       00:8D96  48                pha
       00:8D97  18                clc
       00:8D98  69 29             adc #41
       00:8D9A  AA                tax
       00:8D9B  20 BD 85          jsr assert_true
       00:8D9E  68                pla
       00:8D9F  AA                tax
 1158                             ; 0048: [:lt, {$43:uint8}, {i3:uint8}, {i2:uint8}]
 1159  00:8DA0  BD 02 02          lda 0+__STACK__+2,x
 1160  00:8DA3  DD 01 02          cmp 0+__STACK__+1,x
 1161  00:8DA6  90 08             bcc ._31
 1162  00:8DA8  A9 00             lda #0
 1163  00:8DAA  9D 1E 02          sta 0+__STACK__+30,x
 1164  00:8DAD  4C B5 8D          jmp ._32
 1165  00:8DB0            ._31:
 1166  00:8DB0  A9 01             lda #1
 1167  00:8DB2  9D 1E 02          sta 0+__STACK__+30,x
 1168  00:8DB5            ._32:
 1169                             ; 0049: [:not, {$44:uint8}, {$43:uint8}]
 1170  00:8DB5  BD 1E 02          lda 0+__STACK__+30,x
 1171  00:8DB8  F0 08             beq ._33
 1172  00:8DBA  A9 00             lda #0
 1173  00:8DBC  9D 1F 02          sta 0+__STACK__+31,x
 1174  00:8DBF  4C C7 8D          jmp ._34
 1175  00:8DC2            ._33:
 1176  00:8DC2  A9 01             lda #1
 1177  00:8DC4  9D 1F 02          sta 0+__STACK__+31,x
 1178  00:8DC7            ._34:
 1179                             ; 0050: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$44:uint8}, {$45:uint8[3]}]
 1180  00:8DC7  BD 1F 02          lda 0+__STACK__+31,x
 1181  00:8DCA  9D 29 02          sta 41+__STACK__,x
 1182  00:8DCD  A9 A9             lda #LOW(._D45)
 1183  00:8DCF  9D 2A 02          sta 42+__STACK__,x
 1184  00:8DD2  A9 8F             lda #HIGH(._D45)
 1185  00:8DD4  9D 2B 02          sta 43+__STACK__,x
 1186                             __call assert_true, #41
       00:8DD7  8A                txa
       00:8DD8  48                pha
       00:8DD9  18                clc
       00:8DDA  69 29             adc #41
       00:8DDC  AA                tax
       00:8DDD  20 BD 85          jsr assert_true
       00:8DE0  68                pla
       00:8DE1  AA                tax
 1187                             ; 0051: [:lt, {$46:uint8}, {i2:uint8}, {i3:uint8}]
 1188  00:8DE2  BD 01 02          lda 0+__STACK__+1,x
 1189  00:8DE5  DD 02 02          cmp 0+__STACK__+2,x
 1190  00:8DE8  90 08             bcc ._35
 1191  00:8DEA  A9 00             lda #0
 1192  00:8DEC  9D 20 02          sta 0+__STACK__+32,x
 1193  00:8DEF  4C F7 8D          jmp ._36
 1194  00:8DF2            ._35:
 1195  00:8DF2  A9 01             lda #1
 1196  00:8DF4  9D 20 02          sta 0+__STACK__+32,x
 1197  00:8DF7            ._36:
 1198                             ; 0052: [:not, {$47:uint8}, {$46:uint8}]
 1199  00:8DF7  BD 20 02          lda 0+__STACK__+32,x
 1200  00:8DFA  F0 08             beq ._37
 1201  00:8DFC  A9 00             lda #0
 1202  00:8DFE  9D 21 02          sta 0+__STACK__+33,x
 1203  00:8E01  4C 09 8E          jmp ._38
 1204  00:8E04            ._37:
 1205  00:8E04  A9 01             lda #1
 1206  00:8E06  9D 21 02          sta 0+__STACK__+33,x
 1207  00:8E09            ._38:
 1208                             ; 0053: [:not, {$48:uint8}, {$47:uint8}]
 1209  00:8E09  BD 21 02          lda 0+__STACK__+33,x
 1210  00:8E0C  F0 08             beq ._39
 1211  00:8E0E  A9 00             lda #0
 1212  00:8E10  9D 22 02          sta 0+__STACK__+34,x
 1213  00:8E13  4C 1B 8E          jmp ._40
 1214  00:8E16            ._39:
 1215  00:8E16  A9 01             lda #1
 1216  00:8E18  9D 22 02          sta 0+__STACK__+34,x
 1217  00:8E1B            ._40:
 1218                             ; 0054: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$48:uint8}, {$49:uint8[5]}]
 1219  00:8E1B  BD 22 02          lda 0+__STACK__+34,x
 1220  00:8E1E  9D 29 02          sta 41+__STACK__,x
 1221  00:8E21  A9 AC             lda #LOW(._D49)
 1222  00:8E23  9D 2A 02          sta 42+__STACK__,x
 1223  00:8E26  A9 8F             lda #HIGH(._D49)
 1224  00:8E28  9D 2B 02          sta 43+__STACK__,x
 1225                             __call assert_true, #41
       00:8E2B  8A                txa
       00:8E2C  48                pha
       00:8E2D  18                clc
       00:8E2E  69 29             adc #41
       00:8E30  AA                tax
       00:8E31  20 BD 85          jsr assert_true
       00:8E34  68                pla
       00:8E35  AA                tax
 1226                             ; 0055: [:eq, {$50:uint8}, {i2:uint8}, {i2:uint8}]
 1227  00:8E36  BD 01 02          lda 0+__STACK__+1,x
 1228  00:8E39  DD 01 02          cmp 0+__STACK__+1,x
 1229  00:8E3C  D0 08             bne ._41
 1230  00:8E3E  A9 01             lda #1
 1231  00:8E40  9D 23 02          sta 0+__STACK__+35,x
 1232  00:8E43  4C 4B 8E          jmp ._42
 1233  00:8E46            ._41:
 1234  00:8E46  A9 00             lda #0
 1235  00:8E48  9D 23 02          sta 0+__STACK__+35,x
 1236  00:8E4B            ._42:
 1237                             ; 0056: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$50:uint8}, {$51:uint8[3]}]
 1238  00:8E4B  BD 23 02          lda 0+__STACK__+35,x
 1239  00:8E4E  9D 29 02          sta 41+__STACK__,x
 1240  00:8E51  A9 B1             lda #LOW(._D51)
 1241  00:8E53  9D 2A 02          sta 42+__STACK__,x
 1242  00:8E56  A9 8F             lda #HIGH(._D51)
 1243  00:8E58  9D 2B 02          sta 43+__STACK__,x
 1244                             __call assert_true, #41
       00:8E5B  8A                txa
       00:8E5C  48                pha
       00:8E5D  18                clc
       00:8E5E  69 29             adc #41
       00:8E60  AA                tax
       00:8E61  20 BD 85          jsr assert_true
       00:8E64  68                pla
       00:8E65  AA                tax
 1245                             ; 0057: [:eq, {$52:uint8}, {i2:uint8}, {i3:uint8}]
 1246  00:8E66  BD 01 02          lda 0+__STACK__+1,x
 1247  00:8E69  DD 02 02          cmp 0+__STACK__+2,x
 1248  00:8E6C  D0 08             bne ._43
 1249  00:8E6E  A9 01             lda #1
 1250  00:8E70  9D 24 02          sta 0+__STACK__+36,x
 1251  00:8E73  4C 7B 8E          jmp ._44
 1252  00:8E76            ._43:
 1253  00:8E76  A9 00             lda #0
 1254  00:8E78  9D 24 02          sta 0+__STACK__+36,x
 1255  00:8E7B            ._44:
 1256                             ; 0058: [:not, {$53:uint8}, {$52:uint8}]
 1257  00:8E7B  BD 24 02          lda 0+__STACK__+36,x
 1258  00:8E7E  F0 08             beq ._45
 1259  00:8E80  A9 00             lda #0
 1260  00:8E82  9D 25 02          sta 0+__STACK__+37,x
 1261  00:8E85  4C 8D 8E          jmp ._46
 1262  00:8E88            ._45:
 1263  00:8E88  A9 01             lda #1
 1264  00:8E8A  9D 25 02          sta 0+__STACK__+37,x
 1265  00:8E8D            ._46:
 1266                             ; 0059: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$53:uint8}, {$54:uint8[3]}]
 1267  00:8E8D  BD 25 02          lda 0+__STACK__+37,x
 1268  00:8E90  9D 29 02          sta 41+__STACK__,x
 1269  00:8E93  A9 B4             lda #LOW(._D54)
 1270  00:8E95  9D 2A 02          sta 42+__STACK__,x
 1271  00:8E98  A9 8F             lda #HIGH(._D54)
 1272  00:8E9A  9D 2B 02          sta 43+__STACK__,x
 1273                             __call assert_true, #41
       00:8E9D  8A                txa
       00:8E9E  48                pha
       00:8E9F  18                clc
       00:8EA0  69 29             adc #41
       00:8EA2  AA                tax
       00:8EA3  20 BD 85          jsr assert_true
       00:8EA6  68                pla
       00:8EA7  AA                tax
 1274                             ; 0060: [:mul, {$55:uint8}, {i10:uint8}, {16}]
 1275  00:8EA8  BD 04 02          lda 0+__STACK__+4,x
 1276  00:8EAB  0A                asl a
 1277  00:8EAC  0A                asl a
 1278  00:8EAD  0A                asl a
 1279  00:8EAE  0A                asl a
 1280  00:8EAF  9D 26 02          sta 0+__STACK__+38,x
 1281                             ; 0061: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$55:uint8}, {160}, {$56:uint8[7]}]
 1282  00:8EB2  BD 26 02          lda 0+__STACK__+38,x
 1283  00:8EB5  9D 29 02          sta 41+__STACK__,x
 1284  00:8EB8  A9 00             lda #0
 1285  00:8EBA  9D 2A 02          sta 42+__STACK__,x
 1286  00:8EBD  A9 A0             lda #160
 1287  00:8EBF  9D 2B 02          sta 43+__STACK__,x
 1288  00:8EC2  A9 00             lda #0
 1289  00:8EC4  9D 2C 02          sta 44+__STACK__,x
 1290  00:8EC7  A9 B7             lda #LOW(._D56)
 1291  00:8EC9  9D 2D 02          sta 45+__STACK__,x
 1292  00:8ECC  A9 8F             lda #HIGH(._D56)
 1293  00:8ECE  9D 2E 02          sta 46+__STACK__,x
 1294                             __call assert_equal, #41
       00:8ED1  8A                txa
       00:8ED2  48                pha
       00:8ED3  18                clc
       00:8ED4  69 29             adc #41
       00:8ED6  AA                tax
       00:8ED7  20 66 86          jsr assert_equal
       00:8EDA  68                pla
       00:8EDB  AA                tax
 1295                             ; 0062: [:div, {$57:uint8}, {i10:uint8}, {4}]
 1296  00:8EDC  BD 04 02          lda 0+__STACK__+4,x
 1297  00:8EDF  4A                lsr a
 1298  00:8EE0  4A                lsr a
 1299  00:8EE1  9D 27 02          sta 0+__STACK__+39,x
 1300                             ; 0063: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$57:uint8}, {2}, {$58:uint8[7]}]
 1301  00:8EE4  BD 27 02          lda 0+__STACK__+39,x
 1302  00:8EE7  9D 29 02          sta 41+__STACK__,x
 1303  00:8EEA  A9 00             lda #0
 1304  00:8EEC  9D 2A 02          sta 42+__STACK__,x
 1305  00:8EEF  A9 02             lda #2
 1306  00:8EF1  9D 2B 02          sta 43+__STACK__,x
 1307  00:8EF4  A9 00             lda #0
 1308  00:8EF6  9D 2C 02          sta 44+__STACK__,x
 1309  00:8EF9  A9 BE             lda #LOW(._D58)
 1310  00:8EFB  9D 2D 02          sta 45+__STACK__,x
 1311  00:8EFE  A9 8F             lda #HIGH(._D58)
 1312  00:8F00  9D 2E 02          sta 46+__STACK__,x
 1313                             __call assert_equal, #41
       00:8F03  8A                txa
       00:8F04  48                pha
       00:8F05  18                clc
       00:8F06  69 29             adc #41
       00:8F08  AA                tax
       00:8F09  20 66 86          jsr assert_equal
       00:8F0C  68                pla
       00:8F0D  AA                tax
 1314                             ; 0064: [:mod, {$59:uint8}, {i10:uint8}, {8}]
 1315  00:8F0E  BD 04 02          lda 0+__STACK__+4,x
 1316  00:8F11  29 07             and #7
 1317  00:8F13  9D 28 02          sta 0+__STACK__+40,x
 1318                             ; 0065: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$59:uint8}, {2}, {$60:uint8[7]}]
 1319  00:8F16  BD 28 02          lda 0+__STACK__+40,x
 1320  00:8F19  9D 29 02          sta 41+__STACK__,x
 1321  00:8F1C  A9 00             lda #0
 1322  00:8F1E  9D 2A 02          sta 42+__STACK__,x
 1323  00:8F21  A9 02             lda #2
 1324  00:8F23  9D 2B 02          sta 43+__STACK__,x
 1325  00:8F26  A9 00             lda #0
 1326  00:8F28  9D 2C 02          sta 44+__STACK__,x
 1327  00:8F2B  A9 C5             lda #LOW(._D60)
 1328  00:8F2D  9D 2D 02          sta 45+__STACK__,x
 1329  00:8F30  A9 8F             lda #HIGH(._D60)
 1330  00:8F32  9D 2E 02          sta 46+__STACK__,x
 1331                             __call assert_equal, #41
       00:8F35  8A                txa
       00:8F36  48                pha
       00:8F37  18                clc
       00:8F38  69 29             adc #41
       00:8F3A  AA                tax
       00:8F3B  20 66 86          jsr assert_equal
       00:8F3E  68                pla
       00:8F3F  AA                tax
 1332                             ; 0066: [:call, nil, <Lambda:puts void(uint8*)>, {$61:uint8[1]}]
 1333  00:8F40  A9 CC             lda #LOW(._D61)
 1334  00:8F42  9D 29 02          sta 41+__STACK__,x
 1335  00:8F45  A9 8F             lda #HIGH(._D61)
 1336  00:8F47  9D 2A 02          sta 42+__STACK__,x
 1337                             __call puts, #41
       00:8F4A  8A                txa
       00:8F4B  48                pha
       00:8F4C  18                clc
       00:8F4D  69 29             adc #41
       00:8F4F  AA                tax
       00:8F50  20 87 85          jsr puts
       00:8F53  68                pla
       00:8F54  AA                tax
 1338                             ; 0067: [:return]
 1339  00:8F55  60                rts
 1340  00:8F56            ._D0:
 1341  00:8F56  74 65 73          .db 116,101,115,116,95,105,110,116,95,111,112,58,0
       00:8F59  74 5F 69  
       00:8F5C  6E 74 5F  
       00:8F5F  6F 70 3A  
       00:8F62  00        
 1342  00:8F63            ._D1:
 1343  00:8F63  6E 75 6D          .db 110,117,109,0
       00:8F66  00        
 1344  00:8F67            ._D3:
 1345  00:8F67  32 2A 33          .db 50,42,51,0
       00:8F6A  00        
 1346  00:8F6B            ._D5:
 1347  00:8F6B  2B 2C 2D          .db 43,44,45,44,42,44,47,44,37,0
       00:8F6E  2C 2A 2C  
       00:8F71  2F 2C 25  
       00:8F74  00        
 1348  00:8F75            ._D7:
 1349  00:8F75  2B 2C 2D          .db 43,44,45,44,42,44,47,44,37,0
       00:8F78  2C 2A 2C  
       00:8F7B  2F 2C 25  
       00:8F7E  00        
 1350  00:8F7F            ._D9:
 1351  00:8F7F  2F 00             .db 47,0
 1352  00:8F81            ._D11:
 1353  00:8F81  2F 00             .db 47,0
 1354  00:8F83            ._D13:
 1355  00:8F83  25 00             .db 37,0
 1356  00:8F85            ._D19:
 1357  00:8F85  2B 2C 2D          .db 43,44,45,44,42,44,47,44,37,0
       00:8F88  2C 2A 2C  
       00:8F8B  2F 2C 25  
       00:8F8E  00        
 1358  00:8F8F            ._D21:
 1359  00:8F8F  26 00             .db 38,0
 1360  00:8F91            ._D23:
 1361  00:8F91  7C 00             .db 124,0
 1362  00:8F93            ._D25:
 1363  00:8F93  5E 00             .db 94,0
 1364  00:8F95            ._D27:
 1365  00:8F95  3C 00             .db 60,0
 1366  00:8F97            ._D30:
 1367  00:8F97  21 2C 3C          .db 33,44,60,0
       00:8F9A  00        
 1368  00:8F9B            ._D32:
 1369  00:8F9B  3E 00             .db 62,0
 1370  00:8F9D            ._D35:
 1371  00:8F9D  21 2C 3E          .db 33,44,62,0
       00:8FA0  00        
 1372  00:8FA1            ._D38:
 1373  00:8FA1  3C 3D 00          .db 60,61,0
 1374  00:8FA4            ._D42:
 1375  00:8FA4  21 2C 3C          .db 33,44,60,61,0
       00:8FA7  3D 00     
 1376  00:8FA9            ._D45:
 1377  00:8FA9  3E 3D 00          .db 62,61,0
 1378  00:8FAC            ._D49:
 1379  00:8FAC  21 2C 3E          .db 33,44,62,61,0
       00:8FAF  3D 00     
 1380  00:8FB1            ._D51:
 1381  00:8FB1  3D 3D 00          .db 61,61,0
 1382  00:8FB4            ._D54:
 1383  00:8FB4  21 3D 00          .db 33,61,0
 1384  00:8FB7            ._D56:
 1385  00:8FB7  2A 63 6F          .db 42,99,111,110,115,116,0
       00:8FBA  6E 73 74  
       00:8FBD  00        
 1386  00:8FBE            ._D58:
 1387  00:8FBE  2F 63 6F          .db 47,99,111,110,115,116,0
       00:8FC1  6E 73 74  
       00:8FC4  00        
 1388  00:8FC5            ._D60:
 1389  00:8FC5  25 63 6F          .db 37,99,111,110,115,116,0
       00:8FC8  6E 73 74  
       00:8FCB  00        
 1390  00:8FCC            ._D61:
 1391  00:8FCC  00                .db 0
 1392                     
 1393                             ; function test_int8_op
 1394  00:8FCD            test_int8_op:
 1395                             ; 0000: [:call, nil, <Lambda:print void(uint8*)>, {$0:uint8[14]}]
 1396  00:8FCD  A9 42             lda #LOW(._D0)
 1397  00:8FCF  9D 0B 02          sta 11+__STACK__,x
 1398  00:8FD2  A9 91             lda #HIGH(._D0)
 1399  00:8FD4  9D 0C 02          sta 12+__STACK__,x
 1400                             __call print, #11
       00:8FD7  8A                txa
       00:8FD8  48                pha
       00:8FD9  18                clc
       00:8FDA  69 0B             adc #11
       00:8FDC  AA                tax
       00:8FDD  20 75 85          jsr print
       00:8FE0  68                pla
       00:8FE1  AA                tax
 1401                             ; 0001: [:load, {i1:sint8}, {-1}]
 1402  00:8FE2  A9 FF             lda #255
 1403  00:8FE4  9D 00 02          sta 0+__STACK__+0,x
 1404                             ; 0002: [:load, {i2:sint8}, {-2}]
 1405  00:8FE7  A9 FE             lda #254
 1406  00:8FE9  9D 01 02          sta 0+__STACK__+1,x
 1407                             ; 0003: [:load, {i3:sint8}, {3}]
 1408  00:8FEC  A9 03             lda #3
 1409  00:8FEE  9D 02 02          sta 0+__STACK__+2,x
 1410                             ; 0004: [:load, {m3:sint8}, {-3}]
 1411  00:8FF1  A9 FD             lda #253
 1412  00:8FF3  9D 03 02          sta 0+__STACK__+3,x
 1413                             ; 0005: [:load, {i5:sint8}, {-5}]
 1414  00:8FF6  A9 FB             lda #251
 1415  00:8FF8  9D 04 02          sta 0+__STACK__+4,x
 1416                             ; 0006: [:load, {i10:sint8}, {10}]
 1417  00:8FFB  A9 0A             lda #10
 1418  00:8FFD  9D 05 02          sta 0+__STACK__+5,x
 1419                             ; 0007: [:load, {m10:sint8}, {-10}]
 1420  00:9000  A9 F6             lda #246
 1421  00:9002  9D 06 02          sta 0+__STACK__+6,x
 1422                             ; 0008: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {i1:sint8}, {i1:sint8}, {$1:uint8[4]}]
 1423  00:9005  BD 00 02          lda 0+__STACK__+0,x
 1424  00:9008  9D 0B 02          sta 11+__STACK__,x
 1425  00:900B  A9 00             lda #0
 1426  00:900D  9D 0C 02          sta 12+__STACK__,x
 1427  00:9010  BD 00 02          lda 0+__STACK__+0,x
 1428  00:9013  9D 0D 02          sta 13+__STACK__,x
 1429  00:9016  A9 00             lda #0
 1430  00:9018  9D 0E 02          sta 14+__STACK__,x
 1431  00:901B  A9 50             lda #LOW(._D1)
 1432  00:901D  9D 0F 02          sta 15+__STACK__,x
 1433  00:9020  A9 91             lda #HIGH(._D1)
 1434  00:9022  9D 10 02          sta 16+__STACK__,x
 1435                             __call assert_equal, #11
       00:9025  8A                txa
       00:9026  48                pha
       00:9027  18                clc
       00:9028  69 0B             adc #11
       00:902A  AA                tax
       00:902B  20 66 86          jsr assert_equal
       00:902E  68                pla
       00:902F  AA                tax
 1436                             ; 0009: [:div, {$2:sint8}, {i10:sint8}, {i3:sint8}]
 1437  00:9030  BD 05 02          lda 0+__STACK__+5,x
 1438  00:9033  8D 00 00          sta __reg+0+0
 1439  00:9036  BD 02 02          lda 0+__STACK__+2,x
 1440  00:9039  8D 02 00          sta __reg+2+0
 1441  00:903C  20 AC 84          jsr __div_8s
 1442  00:903F  AD 04 00          lda __reg+4+0
 1443  00:9042  9D 07 02          sta 0+__STACK__+7,x
 1444                             ; 0010: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$2:sint8}, {3}, {$3:uint8[5]}]
 1445  00:9045  BD 07 02          lda 0+__STACK__+7,x
 1446  00:9048  9D 0B 02          sta 11+__STACK__,x
 1447  00:904B  A9 00             lda #0
 1448  00:904D  9D 0C 02          sta 12+__STACK__,x
 1449  00:9050  A9 03             lda #3
 1450  00:9052  9D 0D 02          sta 13+__STACK__,x
 1451  00:9055  A9 00             lda #0
 1452  00:9057  9D 0E 02          sta 14+__STACK__,x
 1453  00:905A  A9 54             lda #LOW(._D3)
 1454  00:905C  9D 0F 02          sta 15+__STACK__,x
 1455  00:905F  A9 91             lda #HIGH(._D3)
 1456  00:9061  9D 10 02          sta 16+__STACK__,x
 1457                             __call assert_equal, #11
       00:9064  8A                txa
       00:9065  48                pha
       00:9066  18                clc
       00:9067  69 0B             adc #11
       00:9069  AA                tax
       00:906A  20 66 86          jsr assert_equal
       00:906D  68                pla
       00:906E  AA                tax
 1458                             ; 0011: [:div, {$4:sint8}, {m10:sint8}, {i3:sint8}]
 1459  00:906F  BD 06 02          lda 0+__STACK__+6,x
 1460  00:9072  8D 00 00          sta __reg+0+0
 1461  00:9075  BD 02 02          lda 0+__STACK__+2,x
 1462  00:9078  8D 02 00          sta __reg+2+0
 1463  00:907B  20 AC 84          jsr __div_8s
 1464  00:907E  AD 04 00          lda __reg+4+0
 1465  00:9081  9D 08 02          sta 0+__STACK__+8,x
 1466                             ; 0012: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$4:sint8}, {-4}, {$5:uint8[6]}]
 1467  00:9084  BD 08 02          lda 0+__STACK__+8,x
 1468  00:9087  9D 0B 02          sta 11+__STACK__,x
 1469  00:908A  A9 00             lda #0
 1470  00:908C  9D 0C 02          sta 12+__STACK__,x
 1471  00:908F  A9 FC             lda #252
 1472  00:9091  9D 0D 02          sta 13+__STACK__,x
 1473  00:9094  A9 00             lda #0
 1474  00:9096  9D 0E 02          sta 14+__STACK__,x
 1475  00:9099  A9 59             lda #LOW(._D5)
 1476  00:909B  9D 0F 02          sta 15+__STACK__,x
 1477  00:909E  A9 91             lda #HIGH(._D5)
 1478  00:90A0  9D 10 02          sta 16+__STACK__,x
 1479                             __call assert_equal, #11
       00:90A3  8A                txa
       00:90A4  48                pha
       00:90A5  18                clc
       00:90A6  69 0B             adc #11
       00:90A8  AA                tax
       00:90A9  20 66 86          jsr assert_equal
       00:90AC  68                pla
       00:90AD  AA                tax
 1480                             ; 0013: [:div, {$6:sint8}, {i10:sint8}, {m3:sint8}]
 1481  00:90AE  BD 05 02          lda 0+__STACK__+5,x
 1482  00:90B1  8D 00 00          sta __reg+0+0
 1483  00:90B4  BD 03 02          lda 0+__STACK__+3,x
 1484  00:90B7  8D 02 00          sta __reg+2+0
 1485  00:90BA  20 AC 84          jsr __div_8s
 1486  00:90BD  AD 04 00          lda __reg+4+0
 1487  00:90C0  9D 09 02          sta 0+__STACK__+9,x
 1488                             ; 0014: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$6:sint8}, {-4}, {$7:uint8[7]}]
 1489  00:90C3  BD 09 02          lda 0+__STACK__+9,x
 1490  00:90C6  9D 0B 02          sta 11+__STACK__,x
 1491  00:90C9  A9 00             lda #0
 1492  00:90CB  9D 0C 02          sta 12+__STACK__,x
 1493  00:90CE  A9 FC             lda #252
 1494  00:90D0  9D 0D 02          sta 13+__STACK__,x
 1495  00:90D3  A9 00             lda #0
 1496  00:90D5  9D 0E 02          sta 14+__STACK__,x
 1497  00:90D8  A9 5F             lda #LOW(._D7)
 1498  00:90DA  9D 0F 02          sta 15+__STACK__,x
 1499  00:90DD  A9 91             lda #HIGH(._D7)
 1500  00:90DF  9D 10 02          sta 16+__STACK__,x
 1501                             __call assert_equal, #11
       00:90E2  8A                txa
       00:90E3  48                pha
       00:90E4  18                clc
       00:90E5  69 0B             adc #11
       00:90E7  AA                tax
       00:90E8  20 66 86          jsr assert_equal
       00:90EB  68                pla
       00:90EC  AA                tax
 1502                             ; 0015: [:div, {$8:sint8}, {m10:sint8}, {m3:sint8}]
 1503  00:90ED  BD 06 02          lda 0+__STACK__+6,x
 1504  00:90F0  8D 00 00          sta __reg+0+0
 1505  00:90F3  BD 03 02          lda 0+__STACK__+3,x
 1506  00:90F6  8D 02 00          sta __reg+2+0
 1507  00:90F9  20 AC 84          jsr __div_8s
 1508  00:90FC  AD 04 00          lda __reg+4+0
 1509  00:90FF  9D 0A 02          sta 0+__STACK__+10,x
 1510                             ; 0016: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$8:sint8}, {3}, {$9:uint8[7]}]
 1511  00:9102  BD 0A 02          lda 0+__STACK__+10,x
 1512  00:9105  9D 0B 02          sta 11+__STACK__,x
 1513  00:9108  A9 00             lda #0
 1514  00:910A  9D 0C 02          sta 12+__STACK__,x
 1515  00:910D  A9 03             lda #3
 1516  00:910F  9D 0D 02          sta 13+__STACK__,x
 1517  00:9112  A9 00             lda #0
 1518  00:9114  9D 0E 02          sta 14+__STACK__,x
 1519  00:9117  A9 66             lda #LOW(._D9)
 1520  00:9119  9D 0F 02          sta 15+__STACK__,x
 1521  00:911C  A9 91             lda #HIGH(._D9)
 1522  00:911E  9D 10 02          sta 16+__STACK__,x
 1523                             __call assert_equal, #11
       00:9121  8A                txa
       00:9122  48                pha
       00:9123  18                clc
       00:9124  69 0B             adc #11
       00:9126  AA                tax
       00:9127  20 66 86          jsr assert_equal
       00:912A  68                pla
       00:912B  AA                tax
 1524                             ; 0017: [:call, nil, <Lambda:puts void(uint8*)>, {$10:uint8[1]}]
 1525  00:912C  A9 6D             lda #LOW(._D10)
 1526  00:912E  9D 0B 02          sta 11+__STACK__,x
 1527  00:9131  A9 91             lda #HIGH(._D10)
 1528  00:9133  9D 0C 02          sta 12+__STACK__,x
 1529                             __call puts, #11
       00:9136  8A                txa
       00:9137  48                pha
       00:9138  18                clc
       00:9139  69 0B             adc #11
       00:913B  AA                tax
       00:913C  20 87 85          jsr puts
       00:913F  68                pla
       00:9140  AA                tax
 1530                             ; 0018: [:return]
 1531  00:9141  60                rts
 1532  00:9142            ._D0:
 1533  00:9142  74 65 73          .db 116,101,115,116,95,105,110,116,56,95,111,112,58,0
       00:9145  74 5F 69  
       00:9148  6E 74 38  
       00:914B  5F 6F 70  
       00:914E  3A 00     
 1534  00:9150            ._D1:
 1535  00:9150  6E 75 6D          .db 110,117,109,0
       00:9153  00        
 1536  00:9154            ._D3:
 1537  00:9154  31 30 2F          .db 49,48,47,51,0
       00:9157  33 00     
 1538  00:9159            ._D5:
 1539  00:9159  31 30 2F          .db 49,48,47,45,51,0
       00:915C  2D 33 00  
 1540  00:915F            ._D7:
 1541  00:915F  2D 31 30          .db 45,49,48,47,45,51,0
       00:9162  2F 2D 33  
       00:9165  00        
 1542  00:9166            ._D9:
 1543  00:9166  2D 31 30          .db 45,49,48,47,45,51,0
       00:9169  2F 2D 33  
       00:916C  00        
 1544  00:916D            ._D10:
 1545  00:916D  00                .db 0
 1546                     
 1547                             ; function test_int16_op
 1548  00:916E            test_int16_op:
 1549                             ; 0000: [:call, nil, <Lambda:print void(uint8*)>, {$0:uint8[15]}]
 1550  00:916E  A9 4E             lda #LOW(._D0)
 1551  00:9170  9D 29 02          sta 41+__STACK__,x
 1552  00:9173  A9 96             lda #HIGH(._D0)
 1553  00:9175  9D 2A 02          sta 42+__STACK__,x
 1554                             __call print, #41
       00:9178  8A                txa
       00:9179  48                pha
       00:917A  18                clc
       00:917B  69 29             adc #41
       00:917D  AA                tax
       00:917E  20 75 85          jsr print
       00:9181  68                pla
       00:9182  AA                tax
 1555                             ; 0001: [:load, {i1:uint16}, {1}]
 1556  00:9183  A9 01             lda #1
 1557  00:9185  9D 00 02          sta 0+__STACK__+0,x
 1558  00:9188  A9 00             lda #0
 1559  00:918A  9D 01 02          sta 1+__STACK__+0,x
 1560                             ; 0002: [:load, {i2:uint16}, {2}]
 1561  00:918D  A9 02             lda #2
 1562  00:918F  9D 02 02          sta 0+__STACK__+2,x
 1563  00:9192  A9 00             lda #0
 1564  00:9194  9D 03 02          sta 1+__STACK__+2,x
 1565                             ; 0003: [:load, {i3:uint16}, {3}]
 1566  00:9197  A9 03             lda #3
 1567  00:9199  9D 04 02          sta 0+__STACK__+4,x
 1568  00:919C  A9 00             lda #0
 1569  00:919E  9D 05 02          sta 1+__STACK__+4,x
 1570                             ; 0004: [:load, {i5:uint16}, {5}]
 1571  00:91A1  A9 05             lda #5
 1572  00:91A3  9D 06 02          sta 0+__STACK__+6,x
 1573  00:91A6  A9 00             lda #0
 1574  00:91A8  9D 07 02          sta 1+__STACK__+6,x
 1575                             ; 0005: [:load, {i10:uint16}, {10}]
 1576  00:91AB  A9 0A             lda #10
 1577  00:91AD  9D 08 02          sta 0+__STACK__+8,x
 1578  00:91B0  A9 00             lda #0
 1579  00:91B2  9D 09 02          sta 1+__STACK__+8,x
 1580                             ; 0006: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {i1:uint16}, {i1:uint16}, {$1:uint8[4]}]
 1581  00:91B5  BD 00 02          lda 0+__STACK__+0,x
 1582  00:91B8  9D 29 02          sta 41+__STACK__,x
 1583  00:91BB  BD 01 02          lda 1+__STACK__+0,x
 1584  00:91BE  9D 2A 02          sta 42+__STACK__,x
 1585  00:91C1  BD 00 02          lda 0+__STACK__+0,x
 1586  00:91C4  9D 2B 02          sta 43+__STACK__,x
 1587  00:91C7  BD 01 02          lda 1+__STACK__+0,x
 1588  00:91CA  9D 2C 02          sta 44+__STACK__,x
 1589  00:91CD  A9 5D             lda #LOW(._D1)
 1590  00:91CF  9D 2D 02          sta 45+__STACK__,x
 1591  00:91D2  A9 96             lda #HIGH(._D1)
 1592  00:91D4  9D 2E 02          sta 46+__STACK__,x
 1593                             __call assert_equal, #41
       00:91D7  8A                txa
       00:91D8  48                pha
       00:91D9  18                clc
       00:91DA  69 29             adc #41
       00:91DC  AA                tax
       00:91DD  20 66 86          jsr assert_equal
       00:91E0  68                pla
       00:91E1  AA                tax
 1594                             ; 0007: [:and, {$2:uint16}, {i3:uint16}, {i2:uint16}]
 1595  00:91E2  BD 04 02          lda 0+__STACK__+4,x
 1596  00:91E5  3D 02 02          and 0+__STACK__+2,x
 1597  00:91E8  9D 0A 02          sta 0+__STACK__+10,x
 1598  00:91EB  BD 05 02          lda 1+__STACK__+4,x
 1599  00:91EE  3D 03 02          and 1+__STACK__+2,x
 1600  00:91F1  9D 0B 02          sta 1+__STACK__+10,x
 1601                             ; 0008: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$2:uint16}, {2}, {$3:uint8[2]}]
 1602  00:91F4  BD 0A 02          lda 0+__STACK__+10,x
 1603  00:91F7  9D 29 02          sta 41+__STACK__,x
 1604  00:91FA  BD 0B 02          lda 1+__STACK__+10,x
 1605  00:91FD  9D 2A 02          sta 42+__STACK__,x
 1606  00:9200  A9 02             lda #2
 1607  00:9202  9D 2B 02          sta 43+__STACK__,x
 1608  00:9205  A9 00             lda #0
 1609  00:9207  9D 2C 02          sta 44+__STACK__,x
 1610  00:920A  A9 61             lda #LOW(._D3)
 1611  00:920C  9D 2D 02          sta 45+__STACK__,x
 1612  00:920F  A9 96             lda #HIGH(._D3)
 1613  00:9211  9D 2E 02          sta 46+__STACK__,x
 1614                             __call assert_equal, #41
       00:9214  8A                txa
       00:9215  48                pha
       00:9216  18                clc
       00:9217  69 29             adc #41
       00:9219  AA                tax
       00:921A  20 66 86          jsr assert_equal
       00:921D  68                pla
       00:921E  AA                tax
 1615                             ; 0009: [:or, {$4:uint16}, {i1:uint16}, {i2:uint16}]
 1616  00:921F  BD 00 02          lda 0+__STACK__+0,x
 1617  00:9222  1D 02 02          ora 0+__STACK__+2,x
 1618  00:9225  9D 0C 02          sta 0+__STACK__+12,x
 1619  00:9228  BD 01 02          lda 1+__STACK__+0,x
 1620  00:922B  1D 03 02          ora 1+__STACK__+2,x
 1621  00:922E  9D 0D 02          sta 1+__STACK__+12,x
 1622                             ; 0010: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$4:uint16}, {3}, {$5:uint8[2]}]
 1623  00:9231  BD 0C 02          lda 0+__STACK__+12,x
 1624  00:9234  9D 29 02          sta 41+__STACK__,x
 1625  00:9237  BD 0D 02          lda 1+__STACK__+12,x
 1626  00:923A  9D 2A 02          sta 42+__STACK__,x
 1627  00:923D  A9 03             lda #3
 1628  00:923F  9D 2B 02          sta 43+__STACK__,x
 1629  00:9242  A9 00             lda #0
 1630  00:9244  9D 2C 02          sta 44+__STACK__,x
 1631  00:9247  A9 63             lda #LOW(._D5)
 1632  00:9249  9D 2D 02          sta 45+__STACK__,x
 1633  00:924C  A9 96             lda #HIGH(._D5)
 1634  00:924E  9D 2E 02          sta 46+__STACK__,x
 1635                             __call assert_equal, #41
       00:9251  8A                txa
       00:9252  48                pha
       00:9253  18                clc
       00:9254  69 29             adc #41
       00:9256  AA                tax
       00:9257  20 66 86          jsr assert_equal
       00:925A  68                pla
       00:925B  AA                tax
 1636                             ; 0011: [:xor, {$6:uint16}, {i3:uint16}, {i2:uint16}]
 1637  00:925C  BD 04 02          lda 0+__STACK__+4,x
 1638  00:925F  5D 02 02          eor 0+__STACK__+2,x
 1639  00:9262  9D 0E 02          sta 0+__STACK__+14,x
 1640  00:9265  BD 05 02          lda 1+__STACK__+4,x
 1641  00:9268  5D 03 02          eor 1+__STACK__+2,x
 1642  00:926B  9D 0F 02          sta 1+__STACK__+14,x
 1643                             ; 0012: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$6:uint16}, {1}, {$7:uint8[2]}]
 1644  00:926E  BD 0E 02          lda 0+__STACK__+14,x
 1645  00:9271  9D 29 02          sta 41+__STACK__,x
 1646  00:9274  BD 0F 02          lda 1+__STACK__+14,x
 1647  00:9277  9D 2A 02          sta 42+__STACK__,x
 1648  00:927A  A9 01             lda #1
 1649  00:927C  9D 2B 02          sta 43+__STACK__,x
 1650  00:927F  A9 00             lda #0
 1651  00:9281  9D 2C 02          sta 44+__STACK__,x
 1652  00:9284  A9 65             lda #LOW(._D7)
 1653  00:9286  9D 2D 02          sta 45+__STACK__,x
 1654  00:9289  A9 96             lda #HIGH(._D7)
 1655  00:928B  9D 2E 02          sta 46+__STACK__,x
 1656                             __call assert_equal, #41
       00:928E  8A                txa
       00:928F  48                pha
       00:9290  18                clc
       00:9291  69 29             adc #41
       00:9293  AA                tax
       00:9294  20 66 86          jsr assert_equal
       00:9297  68                pla
       00:9298  AA                tax
 1657                             ; 0013: [:lt, {$8:uint8}, {i1:uint16}, {i2:uint16}]
 1658  00:9299  BD 01 02          lda 1+__STACK__+0,x
 1659  00:929C  DD 03 02          cmp 1+__STACK__+2,x
 1660  00:929F  90 10             bcc ._47
 1661  00:92A1  BD 00 02          lda 0+__STACK__+0,x
 1662  00:92A4  DD 02 02          cmp 0+__STACK__+2,x
 1663  00:92A7  90 08             bcc ._47
 1664  00:92A9  A9 00             lda #0
 1665  00:92AB  9D 10 02          sta 0+__STACK__+16,x
 1666  00:92AE  4C B6 92          jmp ._48
 1667  00:92B1            ._47:
 1668  00:92B1  A9 01             lda #1
 1669  00:92B3  9D 10 02          sta 0+__STACK__+16,x
 1670  00:92B6            ._48:
 1671                             ; 0014: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$8:uint8}, {$9:uint8[2]}]
 1672  00:92B6  BD 10 02          lda 0+__STACK__+16,x
 1673  00:92B9  9D 29 02          sta 41+__STACK__,x
 1674  00:92BC  A9 67             lda #LOW(._D9)
 1675  00:92BE  9D 2A 02          sta 42+__STACK__,x
 1676  00:92C1  A9 96             lda #HIGH(._D9)
 1677  00:92C3  9D 2B 02          sta 43+__STACK__,x
 1678                             __call assert_true, #41
       00:92C6  8A                txa
       00:92C7  48                pha
       00:92C8  18                clc
       00:92C9  69 29             adc #41
       00:92CB  AA                tax
       00:92CC  20 BD 85          jsr assert_true
       00:92CF  68                pla
       00:92D0  AA                tax
 1679                             ; 0015: [:lt, {$10:uint8}, {i2:uint16}, {i2:uint16}]
 1680  00:92D1  BD 03 02          lda 1+__STACK__+2,x
 1681  00:92D4  DD 03 02          cmp 1+__STACK__+2,x
 1682  00:92D7  90 10             bcc ._49
 1683  00:92D9  BD 02 02          lda 0+__STACK__+2,x
 1684  00:92DC  DD 02 02          cmp 0+__STACK__+2,x
 1685  00:92DF  90 08             bcc ._49
 1686  00:92E1  A9 00             lda #0
 1687  00:92E3  9D 11 02          sta 0+__STACK__+17,x
 1688  00:92E6  4C EE 92          jmp ._50
 1689  00:92E9            ._49:
 1690  00:92E9  A9 01             lda #1
 1691  00:92EB  9D 11 02          sta 0+__STACK__+17,x
 1692  00:92EE            ._50:
 1693                             ; 0016: [:not, {$11:uint8}, {$10:uint8}]
 1694  00:92EE  BD 11 02          lda 0+__STACK__+17,x
 1695  00:92F1  F0 08             beq ._51
 1696  00:92F3  A9 00             lda #0
 1697  00:92F5  9D 12 02          sta 0+__STACK__+18,x
 1698  00:92F8  4C 00 93          jmp ._52
 1699  00:92FB            ._51:
 1700  00:92FB  A9 01             lda #1
 1701  00:92FD  9D 12 02          sta 0+__STACK__+18,x
 1702  00:9300            ._52:
 1703                             ; 0017: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$11:uint8}, {$12:uint8[4]}]
 1704  00:9300  BD 12 02          lda 0+__STACK__+18,x
 1705  00:9303  9D 29 02          sta 41+__STACK__,x
 1706  00:9306  A9 69             lda #LOW(._D12)
 1707  00:9308  9D 2A 02          sta 42+__STACK__,x
 1708  00:930B  A9 96             lda #HIGH(._D12)
 1709  00:930D  9D 2B 02          sta 43+__STACK__,x
 1710                             __call assert_true, #41
       00:9310  8A                txa
       00:9311  48                pha
       00:9312  18                clc
       00:9313  69 29             adc #41
       00:9315  AA                tax
       00:9316  20 BD 85          jsr assert_true
       00:9319  68                pla
       00:931A  AA                tax
 1711                             ; 0018: [:lt, {$13:uint8}, {i1:uint16}, {i2:uint16}]
 1712  00:931B  BD 01 02          lda 1+__STACK__+0,x
 1713  00:931E  DD 03 02          cmp 1+__STACK__+2,x
 1714  00:9321  90 10             bcc ._53
 1715  00:9323  BD 00 02          lda 0+__STACK__+0,x
 1716  00:9326  DD 02 02          cmp 0+__STACK__+2,x
 1717  00:9329  90 08             bcc ._53
 1718  00:932B  A9 00             lda #0
 1719  00:932D  9D 13 02          sta 0+__STACK__+19,x
 1720  00:9330  4C 38 93          jmp ._54
 1721  00:9333            ._53:
 1722  00:9333  A9 01             lda #1
 1723  00:9335  9D 13 02          sta 0+__STACK__+19,x
 1724  00:9338            ._54:
 1725                             ; 0019: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$13:uint8}, {$14:uint8[2]}]
 1726  00:9338  BD 13 02          lda 0+__STACK__+19,x
 1727  00:933B  9D 29 02          sta 41+__STACK__,x
 1728  00:933E  A9 6D             lda #LOW(._D14)
 1729  00:9340  9D 2A 02          sta 42+__STACK__,x
 1730  00:9343  A9 96             lda #HIGH(._D14)
 1731  00:9345  9D 2B 02          sta 43+__STACK__,x
 1732                             __call assert_true, #41
       00:9348  8A                txa
       00:9349  48                pha
       00:934A  18                clc
       00:934B  69 29             adc #41
       00:934D  AA                tax
       00:934E  20 BD 85          jsr assert_true
       00:9351  68                pla
       00:9352  AA                tax
 1733                             ; 0020: [:lt, {$15:uint8}, {i2:uint16}, {i2:uint16}]
 1734  00:9353  BD 03 02          lda 1+__STACK__+2,x
 1735  00:9356  DD 03 02          cmp 1+__STACK__+2,x
 1736  00:9359  90 10             bcc ._55
 1737  00:935B  BD 02 02          lda 0+__STACK__+2,x
 1738  00:935E  DD 02 02          cmp 0+__STACK__+2,x
 1739  00:9361  90 08             bcc ._55
 1740  00:9363  A9 00             lda #0
 1741  00:9365  9D 14 02          sta 0+__STACK__+20,x
 1742  00:9368  4C 70 93          jmp ._56
 1743  00:936B            ._55:
 1744  00:936B  A9 01             lda #1
 1745  00:936D  9D 14 02          sta 0+__STACK__+20,x
 1746  00:9370            ._56:
 1747                             ; 0021: [:not, {$16:uint8}, {$15:uint8}]
 1748  00:9370  BD 14 02          lda 0+__STACK__+20,x
 1749  00:9373  F0 08             beq ._57
 1750  00:9375  A9 00             lda #0
 1751  00:9377  9D 15 02          sta 0+__STACK__+21,x
 1752  00:937A  4C 82 93          jmp ._58
 1753  00:937D            ._57:
 1754  00:937D  A9 01             lda #1
 1755  00:937F  9D 15 02          sta 0+__STACK__+21,x
 1756  00:9382            ._58:
 1757                             ; 0022: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$16:uint8}, {$17:uint8[4]}]
 1758  00:9382  BD 15 02          lda 0+__STACK__+21,x
 1759  00:9385  9D 29 02          sta 41+__STACK__,x
 1760  00:9388  A9 6F             lda #LOW(._D17)
 1761  00:938A  9D 2A 02          sta 42+__STACK__,x
 1762  00:938D  A9 96             lda #HIGH(._D17)
 1763  00:938F  9D 2B 02          sta 43+__STACK__,x
 1764                             __call assert_true, #41
       00:9392  8A                txa
       00:9393  48                pha
       00:9394  18                clc
       00:9395  69 29             adc #41
       00:9397  AA                tax
       00:9398  20 BD 85          jsr assert_true
       00:939B  68                pla
       00:939C  AA                tax
 1765                             ; 0023: [:lt, {$18:uint8}, {i2:uint16}, {i2:uint16}]
 1766  00:939D  BD 03 02          lda 1+__STACK__+2,x
 1767  00:93A0  DD 03 02          cmp 1+__STACK__+2,x
 1768  00:93A3  90 10             bcc ._59
 1769  00:93A5  BD 02 02          lda 0+__STACK__+2,x
 1770  00:93A8  DD 02 02          cmp 0+__STACK__+2,x
 1771  00:93AB  90 08             bcc ._59
 1772  00:93AD  A9 00             lda #0
 1773  00:93AF  9D 16 02          sta 0+__STACK__+22,x
 1774  00:93B2  4C BA 93          jmp ._60
 1775  00:93B5            ._59:
 1776  00:93B5  A9 01             lda #1
 1777  00:93B7  9D 16 02          sta 0+__STACK__+22,x
 1778  00:93BA            ._60:
 1779                             ; 0024: [:not, {$19:uint8}, {$18:uint8}]
 1780  00:93BA  BD 16 02          lda 0+__STACK__+22,x
 1781  00:93BD  F0 08             beq ._61
 1782  00:93BF  A9 00             lda #0
 1783  00:93C1  9D 17 02          sta 0+__STACK__+23,x
 1784  00:93C4  4C CC 93          jmp ._62
 1785  00:93C7            ._61:
 1786  00:93C7  A9 01             lda #1
 1787  00:93C9  9D 17 02          sta 0+__STACK__+23,x
 1788  00:93CC            ._62:
 1789                             ; 0025: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$19:uint8}, {$20:uint8[3]}]
 1790  00:93CC  BD 17 02          lda 0+__STACK__+23,x
 1791  00:93CF  9D 29 02          sta 41+__STACK__,x
 1792  00:93D2  A9 73             lda #LOW(._D20)
 1793  00:93D4  9D 2A 02          sta 42+__STACK__,x
 1794  00:93D7  A9 96             lda #HIGH(._D20)
 1795  00:93D9  9D 2B 02          sta 43+__STACK__,x
 1796                             __call assert_true, #41
       00:93DC  8A                txa
       00:93DD  48                pha
       00:93DE  18                clc
       00:93DF  69 29             adc #41
       00:93E1  AA                tax
       00:93E2  20 BD 85          jsr assert_true
       00:93E5  68                pla
       00:93E6  AA                tax
 1797                             ; 0026: [:lt, {$21:uint8}, {i2:uint16}, {i3:uint16}]
 1798  00:93E7  BD 03 02          lda 1+__STACK__+2,x
 1799  00:93EA  DD 05 02          cmp 1+__STACK__+4,x
 1800  00:93ED  90 10             bcc ._63
 1801  00:93EF  BD 02 02          lda 0+__STACK__+2,x
 1802  00:93F2  DD 04 02          cmp 0+__STACK__+4,x
 1803  00:93F5  90 08             bcc ._63
 1804  00:93F7  A9 00             lda #0
 1805  00:93F9  9D 18 02          sta 0+__STACK__+24,x
 1806  00:93FC  4C 04 94          jmp ._64
 1807  00:93FF            ._63:
 1808  00:93FF  A9 01             lda #1
 1809  00:9401  9D 18 02          sta 0+__STACK__+24,x
 1810  00:9404            ._64:
 1811                             ; 0027: [:not, {$22:uint8}, {$21:uint8}]
 1812  00:9404  BD 18 02          lda 0+__STACK__+24,x
 1813  00:9407  F0 08             beq ._65
 1814  00:9409  A9 00             lda #0
 1815  00:940B  9D 19 02          sta 0+__STACK__+25,x
 1816  00:940E  4C 16 94          jmp ._66
 1817  00:9411            ._65:
 1818  00:9411  A9 01             lda #1
 1819  00:9413  9D 19 02          sta 0+__STACK__+25,x
 1820  00:9416            ._66:
 1821                             ; 0028: [:not, {$23:uint8}, {$22:uint8}]
 1822  00:9416  BD 19 02          lda 0+__STACK__+25,x
 1823  00:9419  F0 08             beq ._67
 1824  00:941B  A9 00             lda #0
 1825  00:941D  9D 1A 02          sta 0+__STACK__+26,x
 1826  00:9420  4C 28 94          jmp ._68
 1827  00:9423            ._67:
 1828  00:9423  A9 01             lda #1
 1829  00:9425  9D 1A 02          sta 0+__STACK__+26,x
 1830  00:9428            ._68:
 1831                             ; 0029: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$23:uint8}, {$24:uint8[5]}]
 1832  00:9428  BD 1A 02          lda 0+__STACK__+26,x
 1833  00:942B  9D 29 02          sta 41+__STACK__,x
 1834  00:942E  A9 76             lda #LOW(._D24)
 1835  00:9430  9D 2A 02          sta 42+__STACK__,x
 1836  00:9433  A9 96             lda #HIGH(._D24)
 1837  00:9435  9D 2B 02          sta 43+__STACK__,x
 1838                             __call assert_true, #41
       00:9438  8A                txa
       00:9439  48                pha
       00:943A  18                clc
       00:943B  69 29             adc #41
       00:943D  AA                tax
       00:943E  20 BD 85          jsr assert_true
       00:9441  68                pla
       00:9442  AA                tax
 1839                             ; 0030: [:lt, {$25:uint8}, {i3:uint16}, {i2:uint16}]
 1840  00:9443  BD 05 02          lda 1+__STACK__+4,x
 1841  00:9446  DD 03 02          cmp 1+__STACK__+2,x
 1842  00:9449  90 10             bcc ._69
 1843  00:944B  BD 04 02          lda 0+__STACK__+4,x
 1844  00:944E  DD 02 02          cmp 0+__STACK__+2,x
 1845  00:9451  90 08             bcc ._69
 1846  00:9453  A9 00             lda #0
 1847  00:9455  9D 1B 02          sta 0+__STACK__+27,x
 1848  00:9458  4C 60 94          jmp ._70
 1849  00:945B            ._69:
 1850  00:945B  A9 01             lda #1
 1851  00:945D  9D 1B 02          sta 0+__STACK__+27,x
 1852  00:9460            ._70:
 1853                             ; 0031: [:not, {$26:uint8}, {$25:uint8}]
 1854  00:9460  BD 1B 02          lda 0+__STACK__+27,x
 1855  00:9463  F0 08             beq ._71
 1856  00:9465  A9 00             lda #0
 1857  00:9467  9D 1C 02          sta 0+__STACK__+28,x
 1858  00:946A  4C 72 94          jmp ._72
 1859  00:946D            ._71:
 1860  00:946D  A9 01             lda #1
 1861  00:946F  9D 1C 02          sta 0+__STACK__+28,x
 1862  00:9472            ._72:
 1863                             ; 0032: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$26:uint8}, {$27:uint8[3]}]
 1864  00:9472  BD 1C 02          lda 0+__STACK__+28,x
 1865  00:9475  9D 29 02          sta 41+__STACK__,x
 1866  00:9478  A9 7B             lda #LOW(._D27)
 1867  00:947A  9D 2A 02          sta 42+__STACK__,x
 1868  00:947D  A9 96             lda #HIGH(._D27)
 1869  00:947F  9D 2B 02          sta 43+__STACK__,x
 1870                             __call assert_true, #41
       00:9482  8A                txa
       00:9483  48                pha
       00:9484  18                clc
       00:9485  69 29             adc #41
       00:9487  AA                tax
       00:9488  20 BD 85          jsr assert_true
       00:948B  68                pla
       00:948C  AA                tax
 1871                             ; 0033: [:lt, {$28:uint8}, {i2:uint16}, {i3:uint16}]
 1872  00:948D  BD 03 02          lda 1+__STACK__+2,x
 1873  00:9490  DD 05 02          cmp 1+__STACK__+4,x
 1874  00:9493  90 10             bcc ._73
 1875  00:9495  BD 02 02          lda 0+__STACK__+2,x
 1876  00:9498  DD 04 02          cmp 0+__STACK__+4,x
 1877  00:949B  90 08             bcc ._73
 1878  00:949D  A9 00             lda #0
 1879  00:949F  9D 1D 02          sta 0+__STACK__+29,x
 1880  00:94A2  4C AA 94          jmp ._74
 1881  00:94A5            ._73:
 1882  00:94A5  A9 01             lda #1
 1883  00:94A7  9D 1D 02          sta 0+__STACK__+29,x
 1884  00:94AA            ._74:
 1885                             ; 0034: [:not, {$29:uint8}, {$28:uint8}]
 1886  00:94AA  BD 1D 02          lda 0+__STACK__+29,x
 1887  00:94AD  F0 08             beq ._75
 1888  00:94AF  A9 00             lda #0
 1889  00:94B1  9D 1E 02          sta 0+__STACK__+30,x
 1890  00:94B4  4C BC 94          jmp ._76
 1891  00:94B7            ._75:
 1892  00:94B7  A9 01             lda #1
 1893  00:94B9  9D 1E 02          sta 0+__STACK__+30,x
 1894  00:94BC            ._76:
 1895                             ; 0035: [:not, {$30:uint8}, {$29:uint8}]
 1896  00:94BC  BD 1E 02          lda 0+__STACK__+30,x
 1897  00:94BF  F0 08             beq ._77
 1898  00:94C1  A9 00             lda #0
 1899  00:94C3  9D 1F 02          sta 0+__STACK__+31,x
 1900  00:94C6  4C CE 94          jmp ._78
 1901  00:94C9            ._77:
 1902  00:94C9  A9 01             lda #1
 1903  00:94CB  9D 1F 02          sta 0+__STACK__+31,x
 1904  00:94CE            ._78:
 1905                             ; 0036: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$30:uint8}, {$31:uint8[5]}]
 1906  00:94CE  BD 1F 02          lda 0+__STACK__+31,x
 1907  00:94D1  9D 29 02          sta 41+__STACK__,x
 1908  00:94D4  A9 7E             lda #LOW(._D31)
 1909  00:94D6  9D 2A 02          sta 42+__STACK__,x
 1910  00:94D9  A9 96             lda #HIGH(._D31)
 1911  00:94DB  9D 2B 02          sta 43+__STACK__,x
 1912                             __call assert_true, #41
       00:94DE  8A                txa
       00:94DF  48                pha
       00:94E0  18                clc
       00:94E1  69 29             adc #41
       00:94E3  AA                tax
       00:94E4  20 BD 85          jsr assert_true
       00:94E7  68                pla
       00:94E8  AA                tax
 1913                             ; 0037: [:eq, {$32:uint8}, {i2:uint16}, {i2:uint16}]
 1914  00:94E9  BD 02 02          lda 0+__STACK__+2,x
 1915  00:94EC  DD 02 02          cmp 0+__STACK__+2,x
 1916  00:94EF  D0 10             bne ._79
 1917  00:94F1  BD 03 02          lda 1+__STACK__+2,x
 1918  00:94F4  DD 03 02          cmp 1+__STACK__+2,x
 1919  00:94F7  D0 08             bne ._79
 1920  00:94F9  A9 01             lda #1
 1921  00:94FB  9D 20 02          sta 0+__STACK__+32,x
 1922  00:94FE  4C 06 95          jmp ._80
 1923  00:9501            ._79:
 1924  00:9501  A9 00             lda #0
 1925  00:9503  9D 20 02          sta 0+__STACK__+32,x
 1926  00:9506            ._80:
 1927                             ; 0038: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$32:uint8}, {$33:uint8[3]}]
 1928  00:9506  BD 20 02          lda 0+__STACK__+32,x
 1929  00:9509  9D 29 02          sta 41+__STACK__,x
 1930  00:950C  A9 83             lda #LOW(._D33)
 1931  00:950E  9D 2A 02          sta 42+__STACK__,x
 1932  00:9511  A9 96             lda #HIGH(._D33)
 1933  00:9513  9D 2B 02          sta 43+__STACK__,x
 1934                             __call assert_true, #41
       00:9516  8A                txa
       00:9517  48                pha
       00:9518  18                clc
       00:9519  69 29             adc #41
       00:951B  AA                tax
       00:951C  20 BD 85          jsr assert_true
       00:951F  68                pla
       00:9520  AA                tax
 1935                             ; 0039: [:eq, {$34:uint8}, {i2:uint16}, {i3:uint16}]
 1936  00:9521  BD 02 02          lda 0+__STACK__+2,x
 1937  00:9524  DD 04 02          cmp 0+__STACK__+4,x
 1938  00:9527  D0 10             bne ._81
 1939  00:9529  BD 03 02          lda 1+__STACK__+2,x
 1940  00:952C  DD 05 02          cmp 1+__STACK__+4,x
 1941  00:952F  D0 08             bne ._81
 1942  00:9531  A9 01             lda #1
 1943  00:9533  9D 21 02          sta 0+__STACK__+33,x
 1944  00:9536  4C 3E 95          jmp ._82
 1945  00:9539            ._81:
 1946  00:9539  A9 00             lda #0
 1947  00:953B  9D 21 02          sta 0+__STACK__+33,x
 1948  00:953E            ._82:
 1949                             ; 0040: [:not, {$35:uint8}, {$34:uint8}]
 1950  00:953E  BD 21 02          lda 0+__STACK__+33,x
 1951  00:9541  F0 08             beq ._83
 1952  00:9543  A9 00             lda #0
 1953  00:9545  9D 22 02          sta 0+__STACK__+34,x
 1954  00:9548  4C 50 95          jmp ._84
 1955  00:954B            ._83:
 1956  00:954B  A9 01             lda #1
 1957  00:954D  9D 22 02          sta 0+__STACK__+34,x
 1958  00:9550            ._84:
 1959                             ; 0041: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$35:uint8}, {$36:uint8[3]}]
 1960  00:9550  BD 22 02          lda 0+__STACK__+34,x
 1961  00:9553  9D 29 02          sta 41+__STACK__,x
 1962  00:9556  A9 86             lda #LOW(._D36)
 1963  00:9558  9D 2A 02          sta 42+__STACK__,x
 1964  00:955B  A9 96             lda #HIGH(._D36)
 1965  00:955D  9D 2B 02          sta 43+__STACK__,x
 1966                             __call assert_true, #41
       00:9560  8A                txa
       00:9561  48                pha
       00:9562  18                clc
       00:9563  69 29             adc #41
       00:9565  AA                tax
       00:9566  20 BD 85          jsr assert_true
       00:9569  68                pla
       00:956A  AA                tax
 1967                             ; 0042: [:mul, {$37:uint16}, {i10:uint16}, {16}]
 1968  00:956B  BD 08 02          lda 0+__STACK__+8,x
 1969  00:956E  9D 23 02          sta 0+__STACK__+35,x
 1970  00:9571  BD 09 02          lda 1+__STACK__+8,x
 1971  00:9574  9D 24 02          sta 1+__STACK__+35,x
 1972  00:9577  1E 23 02          asl 0+__STACK__+35,x
 1973  00:957A  3E 24 02          rol 1+__STACK__+35,x
 1974  00:957D  1E 23 02          asl 0+__STACK__+35,x
 1975  00:9580  3E 24 02          rol 1+__STACK__+35,x
 1976  00:9583  1E 23 02          asl 0+__STACK__+35,x
 1977  00:9586  3E 24 02          rol 1+__STACK__+35,x
 1978  00:9589  1E 23 02          asl 0+__STACK__+35,x
 1979  00:958C  3E 24 02          rol 1+__STACK__+35,x
 1980                             ; 0043: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$37:uint16}, {160}, {$38:uint8[7]}]
 1981  00:958F  BD 23 02          lda 0+__STACK__+35,x
 1982  00:9592  9D 29 02          sta 41+__STACK__,x
 1983  00:9595  BD 24 02          lda 1+__STACK__+35,x
 1984  00:9598  9D 2A 02          sta 42+__STACK__,x
 1985  00:959B  A9 A0             lda #160
 1986  00:959D  9D 2B 02          sta 43+__STACK__,x
 1987  00:95A0  A9 00             lda #0
 1988  00:95A2  9D 2C 02          sta 44+__STACK__,x
 1989  00:95A5  A9 89             lda #LOW(._D38)
 1990  00:95A7  9D 2D 02          sta 45+__STACK__,x
 1991  00:95AA  A9 96             lda #HIGH(._D38)
 1992  00:95AC  9D 2E 02          sta 46+__STACK__,x
 1993                             __call assert_equal, #41
       00:95AF  8A                txa
       00:95B0  48                pha
       00:95B1  18                clc
       00:95B2  69 29             adc #41
       00:95B4  AA                tax
       00:95B5  20 66 86          jsr assert_equal
       00:95B8  68                pla
       00:95B9  AA                tax
 1994                             ; 0044: [:div, {$39:uint16}, {i10:uint16}, {4}]
 1995  00:95BA  BD 08 02          lda 0+__STACK__+8,x
 1996  00:95BD  9D 25 02          sta 0+__STACK__+37,x
 1997  00:95C0  BD 09 02          lda 1+__STACK__+8,x
 1998  00:95C3  9D 26 02          sta 1+__STACK__+37,x
 1999  00:95C6  5E 26 02          lsr 1+__STACK__+37,x
 2000  00:95C9  7E 25 02          ror 0+__STACK__+37,x
 2001  00:95CC  5E 26 02          lsr 1+__STACK__+37,x
 2002  00:95CF  7E 25 02          ror 0+__STACK__+37,x
 2003                             ; 0045: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$39:uint16}, {2}, {$40:uint8[7]}]
 2004  00:95D2  BD 25 02          lda 0+__STACK__+37,x
 2005  00:95D5  9D 29 02          sta 41+__STACK__,x
 2006  00:95D8  BD 26 02          lda 1+__STACK__+37,x
 2007  00:95DB  9D 2A 02          sta 42+__STACK__,x
 2008  00:95DE  A9 02             lda #2
 2009  00:95E0  9D 2B 02          sta 43+__STACK__,x
 2010  00:95E3  A9 00             lda #0
 2011  00:95E5  9D 2C 02          sta 44+__STACK__,x
 2012  00:95E8  A9 90             lda #LOW(._D40)
 2013  00:95EA  9D 2D 02          sta 45+__STACK__,x
 2014  00:95ED  A9 96             lda #HIGH(._D40)
 2015  00:95EF  9D 2E 02          sta 46+__STACK__,x
 2016                             __call assert_equal, #41
       00:95F2  8A                txa
       00:95F3  48                pha
       00:95F4  18                clc
       00:95F5  69 29             adc #41
       00:95F7  AA                tax
       00:95F8  20 66 86          jsr assert_equal
       00:95FB  68                pla
       00:95FC  AA                tax
 2017                             ; 0046: [:mod, {$41:uint16}, {i10:uint16}, {8}]
 2018  00:95FD  BD 08 02          lda 0+__STACK__+8,x
 2019  00:9600  29 07             and #7
 2020  00:9602  9D 27 02          sta 0+__STACK__+39,x
 2021  00:9605  BD 09 02          lda 1+__STACK__+8,x
 2022  00:9608  29 00             and #0
 2023  00:960A  9D 28 02          sta 1+__STACK__+39,x
 2024                             ; 0047: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$41:uint16}, {2}, {$42:uint8[7]}]
 2025  00:960D  BD 27 02          lda 0+__STACK__+39,x
 2026  00:9610  9D 29 02          sta 41+__STACK__,x
 2027  00:9613  BD 28 02          lda 1+__STACK__+39,x
 2028  00:9616  9D 2A 02          sta 42+__STACK__,x
 2029  00:9619  A9 02             lda #2
 2030  00:961B  9D 2B 02          sta 43+__STACK__,x
 2031  00:961E  A9 00             lda #0
 2032  00:9620  9D 2C 02          sta 44+__STACK__,x
 2033  00:9623  A9 97             lda #LOW(._D42)
 2034  00:9625  9D 2D 02          sta 45+__STACK__,x
 2035  00:9628  A9 96             lda #HIGH(._D42)
 2036  00:962A  9D 2E 02          sta 46+__STACK__,x
 2037                             __call assert_equal, #41
       00:962D  8A                txa
       00:962E  48                pha
       00:962F  18                clc
       00:9630  69 29             adc #41
       00:9632  AA                tax
       00:9633  20 66 86          jsr assert_equal
       00:9636  68                pla
       00:9637  AA                tax
 2038                             ; 0048: [:call, nil, <Lambda:puts void(uint8*)>, {$43:uint8[1]}]
 2039  00:9638  A9 9E             lda #LOW(._D43)
 2040  00:963A  9D 29 02          sta 41+__STACK__,x
 2041  00:963D  A9 96             lda #HIGH(._D43)
 2042  00:963F  9D 2A 02          sta 42+__STACK__,x
 2043                             __call puts, #41
       00:9642  8A                txa
       00:9643  48                pha
       00:9644  18                clc
       00:9645  69 29             adc #41
       00:9647  AA                tax
       00:9648  20 87 85          jsr puts
       00:964B  68                pla
       00:964C  AA                tax
 2044                             ; 0049: [:return]
 2045  00:964D  60                rts
 2046  00:964E            ._D0:
 2047  00:964E  74 65 73          .db 116,101,115,116,95,105,110,116,49,54,95,111,112,58,0
       00:9651  74 5F 69  
       00:9654  6E 74 31  
       00:9657  36 5F 6F  
       00:965A  70 3A 00  
 2048  00:965D            ._D1:
 2049  00:965D  6E 75 6D          .db 110,117,109,0
       00:9660  00        
 2050  00:9661            ._D3:
 2051  00:9661  26 00             .db 38,0
 2052  00:9663            ._D5:
 2053  00:9663  7C 00             .db 124,0
 2054  00:9665            ._D7:
 2055  00:9665  5E 00             .db 94,0
 2056  00:9667            ._D9:
 2057  00:9667  3C 00             .db 60,0
 2058  00:9669            ._D12:
 2059  00:9669  21 2C 3C          .db 33,44,60,0
       00:966C  00        
 2060  00:966D            ._D14:
 2061  00:966D  3E 00             .db 62,0
 2062  00:966F            ._D17:
 2063  00:966F  21 2C 3E          .db 33,44,62,0
       00:9672  00        
 2064  00:9673            ._D20:
 2065  00:9673  3C 3D 00          .db 60,61,0
 2066  00:9676            ._D24:
 2067  00:9676  21 2C 3C          .db 33,44,60,61,0
       00:9679  3D 00     
 2068  00:967B            ._D27:
 2069  00:967B  3E 3D 00          .db 62,61,0
 2070  00:967E            ._D31:
 2071  00:967E  21 2C 3E          .db 33,44,62,61,0
       00:9681  3D 00     
 2072  00:9683            ._D33:
 2073  00:9683  3D 3D 00          .db 61,61,0
 2074  00:9686            ._D36:
 2075  00:9686  21 3D 00          .db 33,61,0
 2076  00:9689            ._D38:
 2077  00:9689  2A 63 6F          .db 42,99,111,110,115,116,0
       00:968C  6E 73 74  
       00:968F  00        
 2078  00:9690            ._D40:
 2079  00:9690  2F 63 6F          .db 47,99,111,110,115,116,0
       00:9693  6E 73 74  
       00:9696  00        
 2080  00:9697            ._D42:
 2081  00:9697  25 63 6F          .db 37,99,111,110,115,116,0
       00:969A  6E 73 74  
       00:969D  00        
 2082  00:969E            ._D43:
 2083  00:969E  00                .db 0
 2084                     
 2085                             ; function test_int8x16_op
 2086  00:969F            test_int8x16_op:
 2087                             ; 0000: [:return]
 2088  00:969F  60                rts
 2089                     
 2090                             ; function test_logical_op
 2091  00:96A0            test_logical_op:
 2092                             ; 0000: [:call, nil, <Lambda:print void(uint8*)>, {$0:uint8[17]}]
 2093  00:96A0  A9 DD             lda #LOW(._D0)
 2094  00:96A2  9D 12 02          sta 18+__STACK__,x
 2095  00:96A5  A9 98             lda #HIGH(._D0)
 2096  00:96A7  9D 13 02          sta 19+__STACK__,x
 2097                             __call print, #18
       00:96AA  8A                txa
       00:96AB  48                pha
       00:96AC  18                clc
       00:96AD  69 12             adc #18
       00:96AF  AA                tax
       00:96B0  20 75 85          jsr print
       00:96B3  68                pla
       00:96B4  AA                tax
 2098                             ; 0001: [:load, {T:uint8}, {1}]
 2099  00:96B5  A9 01             lda #1
 2100  00:96B7  9D 00 02          sta 0+__STACK__+0,x
 2101                             ; 0002: [:load, {F:uint8}, {0}]
 2102  00:96BA  A9 00             lda #0
 2103  00:96BC  9D 01 02          sta 0+__STACK__+1,x
 2104                             ; 0003: [:load, {$1:uint8}, {T:uint8}]
 2105  00:96BF  BD 00 02          lda 0+__STACK__+0,x
 2106  00:96C2  9D 02 02          sta 0+__STACK__+2,x
 2107                             ; 0004: [:if, {$1:uint8}, ".end_1"]
 2108  00:96C5  BD 02 02          lda 0+__STACK__+2,x
 2109  00:96C8  D0 03             bne ._85
 2110  00:96CA  4C D3 96          jmp .end_1
 2111  00:96CD            ._85:
 2112                             ; 0005: [:load, {$1:uint8}, {T:uint8}]
 2113  00:96CD  BD 00 02          lda 0+__STACK__+0,x
 2114  00:96D0  9D 02 02          sta 0+__STACK__+2,x
 2115                             ; 0006: [:label, ".end_1"]
 2116  00:96D3            .end_1:
 2117                             ; 0007: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$1:uint8}, {$2:uint8[5]}]
 2118  00:96D3  BD 02 02          lda 0+__STACK__+2,x
 2119  00:96D6  9D 12 02          sta 18+__STACK__,x
 2120  00:96D9  A9 EE             lda #LOW(._D2)
 2121  00:96DB  9D 13 02          sta 19+__STACK__,x
 2122  00:96DE  A9 98             lda #HIGH(._D2)
 2123  00:96E0  9D 14 02          sta 20+__STACK__,x
 2124                             __call assert_true, #18
       00:96E3  8A                txa
       00:96E4  48                pha
       00:96E5  18                clc
       00:96E6  69 12             adc #18
       00:96E8  AA                tax
       00:96E9  20 BD 85          jsr assert_true
       00:96EC  68                pla
       00:96ED  AA                tax
 2125                             ; 0008: [:load, {$3:uint8}, {T:uint8}]
 2126  00:96EE  BD 00 02          lda 0+__STACK__+0,x
 2127  00:96F1  9D 03 02          sta 0+__STACK__+3,x
 2128                             ; 0009: [:if, {$3:uint8}, ".end_2"]
 2129  00:96F4  BD 03 02          lda 0+__STACK__+3,x
 2130  00:96F7  D0 03             bne ._86
 2131  00:96F9  4C 02 97          jmp .end_2
 2132  00:96FC            ._86:
 2133                             ; 0010: [:load, {$3:uint8}, {F:uint8}]
 2134  00:96FC  BD 01 02          lda 0+__STACK__+1,x
 2135  00:96FF  9D 03 02          sta 0+__STACK__+3,x
 2136                             ; 0011: [:label, ".end_2"]
 2137  00:9702            .end_2:
 2138                             ; 0012: [:not, {$4:uint8}, {$3:uint8}]
 2139  00:9702  BD 03 02          lda 0+__STACK__+3,x
 2140  00:9705  F0 08             beq ._87
 2141  00:9707  A9 00             lda #0
 2142  00:9709  9D 04 02          sta 0+__STACK__+4,x
 2143  00:970C  4C 14 97          jmp ._88
 2144  00:970F            ._87:
 2145  00:970F  A9 01             lda #1
 2146  00:9711  9D 04 02          sta 0+__STACK__+4,x
 2147  00:9714            ._88:
 2148                             ; 0013: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$4:uint8}, {$5:uint8[5]}]
 2149  00:9714  BD 04 02          lda 0+__STACK__+4,x
 2150  00:9717  9D 12 02          sta 18+__STACK__,x
 2151  00:971A  A9 F3             lda #LOW(._D5)
 2152  00:971C  9D 13 02          sta 19+__STACK__,x
 2153  00:971F  A9 98             lda #HIGH(._D5)
 2154  00:9721  9D 14 02          sta 20+__STACK__,x
 2155                             __call assert_true, #18
       00:9724  8A                txa
       00:9725  48                pha
       00:9726  18                clc
       00:9727  69 12             adc #18
       00:9729  AA                tax
       00:972A  20 BD 85          jsr assert_true
       00:972D  68                pla
       00:972E  AA                tax
 2156                             ; 0014: [:load, {$6:uint8}, {F:uint8}]
 2157  00:972F  BD 01 02          lda 0+__STACK__+1,x
 2158  00:9732  9D 05 02          sta 0+__STACK__+5,x
 2159                             ; 0015: [:if, {$6:uint8}, ".end_3"]
 2160  00:9735  BD 05 02          lda 0+__STACK__+5,x
 2161  00:9738  D0 03             bne ._89
 2162  00:973A  4C 43 97          jmp .end_3
 2163  00:973D            ._89:
 2164                             ; 0016: [:load, {$6:uint8}, {T:uint8}]
 2165  00:973D  BD 00 02          lda 0+__STACK__+0,x
 2166  00:9740  9D 05 02          sta 0+__STACK__+5,x
 2167                             ; 0017: [:label, ".end_3"]
 2168  00:9743            .end_3:
 2169                             ; 0018: [:not, {$7:uint8}, {$6:uint8}]
 2170  00:9743  BD 05 02          lda 0+__STACK__+5,x
 2171  00:9746  F0 08             beq ._90
 2172  00:9748  A9 00             lda #0
 2173  00:974A  9D 06 02          sta 0+__STACK__+6,x
 2174  00:974D  4C 55 97          jmp ._91
 2175  00:9750            ._90:
 2176  00:9750  A9 01             lda #1
 2177  00:9752  9D 06 02          sta 0+__STACK__+6,x
 2178  00:9755            ._91:
 2179                             ; 0019: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$7:uint8}, {$8:uint8[5]}]
 2180  00:9755  BD 06 02          lda 0+__STACK__+6,x
 2181  00:9758  9D 12 02          sta 18+__STACK__,x
 2182  00:975B  A9 F8             lda #LOW(._D8)
 2183  00:975D  9D 13 02          sta 19+__STACK__,x
 2184  00:9760  A9 98             lda #HIGH(._D8)
 2185  00:9762  9D 14 02          sta 20+__STACK__,x
 2186                             __call assert_true, #18
       00:9765  8A                txa
       00:9766  48                pha
       00:9767  18                clc
       00:9768  69 12             adc #18
       00:976A  AA                tax
       00:976B  20 BD 85          jsr assert_true
       00:976E  68                pla
       00:976F  AA                tax
 2187                             ; 0020: [:load, {$9:uint8}, {F:uint8}]
 2188  00:9770  BD 01 02          lda 0+__STACK__+1,x
 2189  00:9773  9D 07 02          sta 0+__STACK__+7,x
 2190                             ; 0021: [:if, {$9:uint8}, ".end_4"]
 2191  00:9776  BD 07 02          lda 0+__STACK__+7,x
 2192  00:9779  D0 03             bne ._92
 2193  00:977B  4C 84 97          jmp .end_4
 2194  00:977E            ._92:
 2195                             ; 0022: [:load, {$9:uint8}, {F:uint8}]
 2196  00:977E  BD 01 02          lda 0+__STACK__+1,x
 2197  00:9781  9D 07 02          sta 0+__STACK__+7,x
 2198                             ; 0023: [:label, ".end_4"]
 2199  00:9784            .end_4:
 2200                             ; 0024: [:not, {$10:uint8}, {$9:uint8}]
 2201  00:9784  BD 07 02          lda 0+__STACK__+7,x
 2202  00:9787  F0 08             beq ._93
 2203  00:9789  A9 00             lda #0
 2204  00:978B  9D 08 02          sta 0+__STACK__+8,x
 2205  00:978E  4C 96 97          jmp ._94
 2206  00:9791            ._93:
 2207  00:9791  A9 01             lda #1
 2208  00:9793  9D 08 02          sta 0+__STACK__+8,x
 2209  00:9796            ._94:
 2210                             ; 0025: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$10:uint8}, {$11:uint8[5]}]
 2211  00:9796  BD 08 02          lda 0+__STACK__+8,x
 2212  00:9799  9D 12 02          sta 18+__STACK__,x
 2213  00:979C  A9 FD             lda #LOW(._D11)
 2214  00:979E  9D 13 02          sta 19+__STACK__,x
 2215  00:97A1  A9 98             lda #HIGH(._D11)
 2216  00:97A3  9D 14 02          sta 20+__STACK__,x
 2217                             __call assert_true, #18
       00:97A6  8A                txa
       00:97A7  48                pha
       00:97A8  18                clc
       00:97A9  69 12             adc #18
       00:97AB  AA                tax
       00:97AC  20 BD 85          jsr assert_true
       00:97AF  68                pla
       00:97B0  AA                tax
 2218                             ; 0026: [:load, {$12:uint8}, {T:uint8}]
 2219  00:97B1  BD 00 02          lda 0+__STACK__+0,x
 2220  00:97B4  9D 09 02          sta 0+__STACK__+9,x
 2221                             ; 0027: [:not, {$13:uint8}, {$12:uint8}]
 2222  00:97B7  BD 09 02          lda 0+__STACK__+9,x
 2223  00:97BA  F0 08             beq ._95
 2224  00:97BC  A9 00             lda #0
 2225  00:97BE  9D 0A 02          sta 0+__STACK__+10,x
 2226  00:97C1  4C C9 97          jmp ._96
 2227  00:97C4            ._95:
 2228  00:97C4  A9 01             lda #1
 2229  00:97C6  9D 0A 02          sta 0+__STACK__+10,x
 2230  00:97C9            ._96:
 2231                             ; 0028: [:if, {$13:uint8}, ".end_5"]
 2232  00:97C9  BD 0A 02          lda 0+__STACK__+10,x
 2233  00:97CC  D0 03             bne ._97
 2234  00:97CE  4C D7 97          jmp .end_5
 2235  00:97D1            ._97:
 2236                             ; 0029: [:load, {$12:uint8}, {F:uint8}]
 2237  00:97D1  BD 01 02          lda 0+__STACK__+1,x
 2238  00:97D4  9D 09 02          sta 0+__STACK__+9,x
 2239                             ; 0030: [:label, ".end_5"]
 2240  00:97D7            .end_5:
 2241                             ; 0031: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$12:uint8}, {$14:uint8[5]}]
 2242  00:97D7  BD 09 02          lda 0+__STACK__+9,x
 2243  00:97DA  9D 12 02          sta 18+__STACK__,x
 2244  00:97DD  A9 02             lda #LOW(._D14)
 2245  00:97DF  9D 13 02          sta 19+__STACK__,x
 2246  00:97E2  A9 99             lda #HIGH(._D14)
 2247  00:97E4  9D 14 02          sta 20+__STACK__,x
 2248                             __call assert_true, #18
       00:97E7  8A                txa
       00:97E8  48                pha
       00:97E9  18                clc
       00:97EA  69 12             adc #18
       00:97EC  AA                tax
       00:97ED  20 BD 85          jsr assert_true
       00:97F0  68                pla
       00:97F1  AA                tax
 2249                             ; 0032: [:load, {$15:uint8}, {T:uint8}]
 2250  00:97F2  BD 00 02          lda 0+__STACK__+0,x
 2251  00:97F5  9D 0B 02          sta 0+__STACK__+11,x
 2252                             ; 0033: [:not, {$16:uint8}, {$15:uint8}]
 2253  00:97F8  BD 0B 02          lda 0+__STACK__+11,x
 2254  00:97FB  F0 08             beq ._98
 2255  00:97FD  A9 00             lda #0
 2256  00:97FF  9D 0C 02          sta 0+__STACK__+12,x
 2257  00:9802  4C 0A 98          jmp ._99
 2258  00:9805            ._98:
 2259  00:9805  A9 01             lda #1
 2260  00:9807  9D 0C 02          sta 0+__STACK__+12,x
 2261  00:980A            ._99:
 2262                             ; 0034: [:if, {$16:uint8}, ".end_6"]
 2263  00:980A  BD 0C 02          lda 0+__STACK__+12,x
 2264  00:980D  D0 03             bne ._100
 2265  00:980F  4C 18 98          jmp .end_6
 2266  00:9812            ._100:
 2267                             ; 0035: [:load, {$15:uint8}, {F:uint8}]
 2268  00:9812  BD 01 02          lda 0+__STACK__+1,x
 2269  00:9815  9D 0B 02          sta 0+__STACK__+11,x
 2270                             ; 0036: [:label, ".end_6"]
 2271  00:9818            .end_6:
 2272                             ; 0037: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$15:uint8}, {$17:uint8[5]}]
 2273  00:9818  BD 0B 02          lda 0+__STACK__+11,x
 2274  00:981B  9D 12 02          sta 18+__STACK__,x
 2275  00:981E  A9 07             lda #LOW(._D17)
 2276  00:9820  9D 13 02          sta 19+__STACK__,x
 2277  00:9823  A9 99             lda #HIGH(._D17)
 2278  00:9825  9D 14 02          sta 20+__STACK__,x
 2279                             __call assert_true, #18
       00:9828  8A                txa
       00:9829  48                pha
       00:982A  18                clc
       00:982B  69 12             adc #18
       00:982D  AA                tax
       00:982E  20 BD 85          jsr assert_true
       00:9831  68                pla
       00:9832  AA                tax
 2280                             ; 0038: [:load, {$18:uint8}, {F:uint8}]
 2281  00:9833  BD 01 02          lda 0+__STACK__+1,x
 2282  00:9836  9D 0D 02          sta 0+__STACK__+13,x
 2283                             ; 0039: [:not, {$19:uint8}, {$18:uint8}]
 2284  00:9839  BD 0D 02          lda 0+__STACK__+13,x
 2285  00:983C  F0 08             beq ._101
 2286  00:983E  A9 00             lda #0
 2287  00:9840  9D 0E 02          sta 0+__STACK__+14,x
 2288  00:9843  4C 4B 98          jmp ._102
 2289  00:9846            ._101:
 2290  00:9846  A9 01             lda #1
 2291  00:9848  9D 0E 02          sta 0+__STACK__+14,x
 2292  00:984B            ._102:
 2293                             ; 0040: [:if, {$19:uint8}, ".end_7"]
 2294  00:984B  BD 0E 02          lda 0+__STACK__+14,x
 2295  00:984E  D0 03             bne ._103
 2296  00:9850  4C 59 98          jmp .end_7
 2297  00:9853            ._103:
 2298                             ; 0041: [:load, {$18:uint8}, {T:uint8}]
 2299  00:9853  BD 00 02          lda 0+__STACK__+0,x
 2300  00:9856  9D 0D 02          sta 0+__STACK__+13,x
 2301                             ; 0042: [:label, ".end_7"]
 2302  00:9859            .end_7:
 2303                             ; 0043: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$18:uint8}, {$20:uint8[5]}]
 2304  00:9859  BD 0D 02          lda 0+__STACK__+13,x
 2305  00:985C  9D 12 02          sta 18+__STACK__,x
 2306  00:985F  A9 0C             lda #LOW(._D20)
 2307  00:9861  9D 13 02          sta 19+__STACK__,x
 2308  00:9864  A9 99             lda #HIGH(._D20)
 2309  00:9866  9D 14 02          sta 20+__STACK__,x
 2310                             __call assert_true, #18
       00:9869  8A                txa
       00:986A  48                pha
       00:986B  18                clc
       00:986C  69 12             adc #18
       00:986E  AA                tax
       00:986F  20 BD 85          jsr assert_true
       00:9872  68                pla
       00:9873  AA                tax
 2311                             ; 0044: [:load, {$21:uint8}, {F:uint8}]
 2312  00:9874  BD 01 02          lda 0+__STACK__+1,x
 2313  00:9877  9D 0F 02          sta 0+__STACK__+15,x
 2314                             ; 0045: [:not, {$22:uint8}, {$21:uint8}]
 2315  00:987A  BD 0F 02          lda 0+__STACK__+15,x
 2316  00:987D  F0 08             beq ._104
 2317  00:987F  A9 00             lda #0
 2318  00:9881  9D 10 02          sta 0+__STACK__+16,x
 2319  00:9884  4C 8C 98          jmp ._105
 2320  00:9887            ._104:
 2321  00:9887  A9 01             lda #1
 2322  00:9889  9D 10 02          sta 0+__STACK__+16,x
 2323  00:988C            ._105:
 2324                             ; 0046: [:if, {$22:uint8}, ".end_8"]
 2325  00:988C  BD 10 02          lda 0+__STACK__+16,x
 2326  00:988F  D0 03             bne ._106
 2327  00:9891  4C 9A 98          jmp .end_8
 2328  00:9894            ._106:
 2329                             ; 0047: [:load, {$21:uint8}, {F:uint8}]
 2330  00:9894  BD 01 02          lda 0+__STACK__+1,x
 2331  00:9897  9D 0F 02          sta 0+__STACK__+15,x
 2332                             ; 0048: [:label, ".end_8"]
 2333  00:989A            .end_8:
 2334                             ; 0049: [:not, {$23:uint8}, {$21:uint8}]
 2335  00:989A  BD 0F 02          lda 0+__STACK__+15,x
 2336  00:989D  F0 08             beq ._107
 2337  00:989F  A9 00             lda #0
 2338  00:98A1  9D 11 02          sta 0+__STACK__+17,x
 2339  00:98A4  4C AC 98          jmp ._108
 2340  00:98A7            ._107:
 2341  00:98A7  A9 01             lda #1
 2342  00:98A9  9D 11 02          sta 0+__STACK__+17,x
 2343  00:98AC            ._108:
 2344                             ; 0050: [:call, nil, <Lambda:assert_true void(uint8,uint8*)>, {$23:uint8}, {$24:uint8[5]}]
 2345  00:98AC  BD 11 02          lda 0+__STACK__+17,x
 2346  00:98AF  9D 12 02          sta 18+__STACK__,x
 2347  00:98B2  A9 11             lda #LOW(._D24)
 2348  00:98B4  9D 13 02          sta 19+__STACK__,x
 2349  00:98B7  A9 99             lda #HIGH(._D24)
 2350  00:98B9  9D 14 02          sta 20+__STACK__,x
 2351                             __call assert_true, #18
       00:98BC  8A                txa
       00:98BD  48                pha
       00:98BE  18                clc
       00:98BF  69 12             adc #18
       00:98C1  AA                tax
       00:98C2  20 BD 85          jsr assert_true
       00:98C5  68                pla
       00:98C6  AA                tax
 2352                             ; 0051: [:call, nil, <Lambda:puts void(uint8*)>, {$25:uint8[1]}]
 2353  00:98C7  A9 16             lda #LOW(._D25)
 2354  00:98C9  9D 12 02          sta 18+__STACK__,x
 2355  00:98CC  A9 99             lda #HIGH(._D25)
 2356  00:98CE  9D 13 02          sta 19+__STACK__,x
 2357                             __call puts, #18
       00:98D1  8A                txa
       00:98D2  48                pha
       00:98D3  18                clc
       00:98D4  69 12             adc #18
       00:98D6  AA                tax
       00:98D7  20 87 85          jsr puts
       00:98DA  68                pla
       00:98DB  AA                tax
 2358                             ; 0052: [:return]
 2359  00:98DC  60                rts
 2360  00:98DD            ._D0:
 2361  00:98DD  74 65 73          .db 116,101,115,116,95,108,111,103,105,99,97,108,95,111,112,58
       00:98E0  74 5F 6C  
       00:98E3  6F 67 69  
       00:98E6  63 61 6C  
       00:98E9  5F 6F 70  
       00:98EC  3A        
 2362  00:98ED  00                .db 0
 2363  00:98EE            ._D2:
 2364  00:98EE  54 26 26          .db 84,38,38,84,0
       00:98F1  54 00     
 2365  00:98F3            ._D5:
 2366  00:98F3  54 26 26          .db 84,38,38,70,0
       00:98F6  46 00     
 2367  00:98F8            ._D8:
 2368  00:98F8  46 26 26          .db 70,38,38,84,0
       00:98FB  54 00     
 2369  00:98FD            ._D11:
 2370  00:98FD  46 26 26          .db 70,38,38,70,0
       00:9900  46 00     
 2371  00:9902            ._D14:
 2372  00:9902  54 7C 7C          .db 84,124,124,70,0
       00:9905  46 00     
 2373  00:9907            ._D17:
 2374  00:9907  54 7C 7C          .db 84,124,124,70,0
       00:990A  46 00     
 2375  00:990C            ._D20:
 2376  00:990C  46 7C 7C          .db 70,124,124,84,0
       00:990F  54 00     
 2377  00:9911            ._D24:
 2378  00:9911  46 7C 7C          .db 70,124,124,70,0
       00:9914  46 00     
 2379  00:9916            ._D25:
 2380  00:9916  00                .db 0
 2381                     
 2382                             ; function test_nesasm_limit
 2383  00:9917            test_nesasm_limit:
 2384                             ; 0000: [:load, {toooooooooooooooooooooooooooooooooooooooo_long_id:uint8}, {0}]
 2385  00:9917  A9 00             lda #0
 2386  00:9919  9D 00 02          sta 0+__STACK__+0,x
 2387                             ; 0001: [:add, {$0:uint8}, {toooooooooooooooooooooooooooooooooooooooo_long_id:uint8}, {1}]
 2388  00:991C  18                clc
 2389  00:991D  BD 00 02          lda 0+__STACK__+0,x
 2390  00:9920  69 01             adc #1
 2391  00:9922  9D 01 02          sta 0+__STACK__+1,x
 2392                             ; 0002: [:load, {toooooooooooooooooooooooooooooooooooooooo_long_id:uint8}, {$0:uint8}]
 2393  00:9925  BD 01 02          lda 0+__STACK__+1,x
 2394  00:9928  9D 00 02          sta 0+__STACK__+0,x
 2395                             ; 0003: [:load, {i:uint8*}, {$1:uint8[64]}]
 2396  00:992B  A9 36             lda #LOW(._D1)
 2397  00:992D  9D 02 02          sta 0+__STACK__+2,x
 2398  00:9930  A9 99             lda #HIGH(._D1)
 2399  00:9932  9D 03 02          sta 1+__STACK__+2,x
 2400                             ; 0004: [:return]
 2401  00:9935  60                rts
 2402  00:9936            ._D1:
 2403  00:9936  74 6F 6F          .db 116,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111
       00:9939  6F 6F 6F  
       00:993C  6F 6F 6F  
       00:993F  6F 6F 6F  
       00:9942  6F 6F 6F  
       00:9945  6F        
 2404  00:9946  6F 6F 6F          .db 111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111
       00:9949  6F 6F 6F  
       00:994C  6F 6F 6F  
       00:994F  6F 6F 6F  
       00:9952  6F 6F 6F  
       00:9955  6F        
 2405  00:9956  6F 6F 6F          .db 111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111
       00:9959  6F 6F 6F  
       00:995C  6F 6F 6F  
       00:995F  6F 6F 6F  
       00:9962  6F 6F 6F  
       00:9965  6F        
 2406  00:9966  6F 6F 6F          .db 111,111,111,95,108,111,110,103,95,115,116,114,105,110,103,0
       00:9969  5F 6C 6F  
       00:996C  6E 67 5F  
       00:996F  73 74 72  
       00:9972  69 6E 67  
       00:9975  00        
 2407                     
 2408                             ; function add
 2409  00:9976            add:
 2410                             ; 0000: [:add, {$0:uint8}, {a:uint8}, {b:uint8}]
 2411  00:9976  18                clc
 2412  00:9977  BD 01 02          lda 0+__STACK__+1,x
 2413  00:997A  7D 02 02          adc 0+__STACK__+2,x
 2414  00:997D  9D 03 02          sta 0+__STACK__+3,x
 2415                             ; 0001: [:return, {$0:uint8}]
 2416  00:9980  BD 03 02          lda 0+__STACK__+3,x
 2417  00:9983  9D 00 02          sta 0+__STACK__+0,x
 2418  00:9986  60                rts
 2419                     
 2420                             ; function fib
 2421  00:9987            fib:
 2422                             ; 0000: [:lt, {$0:uint8}, {1}, {n:uint8}]
 2423  00:9987  A9 01             lda #1
 2424  00:9989  DD 01 02          cmp 0+__STACK__+1,x
 2425  00:998C  90 08             bcc ._109
 2426  00:998E  A9 00             lda #0
 2427  00:9990  9D 02 02          sta 0+__STACK__+2,x
 2428  00:9993  4C 9B 99          jmp ._110
 2429  00:9996            ._109:
 2430  00:9996  A9 01             lda #1
 2431  00:9998  9D 02 02          sta 0+__STACK__+2,x
 2432  00:999B            ._110:
 2433                             ; 0001: [:not, {$1:uint8}, {$0:uint8}]
 2434  00:999B  BD 02 02          lda 0+__STACK__+2,x
 2435  00:999E  F0 08             beq ._111
 2436  00:99A0  A9 00             lda #0
 2437  00:99A2  9D 03 02          sta 0+__STACK__+3,x
 2438  00:99A5  4C AD 99          jmp ._112
 2439  00:99A8            ._111:
 2440  00:99A8  A9 01             lda #1
 2441  00:99AA  9D 03 02          sta 0+__STACK__+3,x
 2442  00:99AD            ._112:
 2443                             ; 0002: [:if, {$1:uint8}, ".else_1"]
 2444  00:99AD  BD 03 02          lda 0+__STACK__+3,x
 2445  00:99B0  D0 03             bne ._113
 2446  00:99B2  4C BE 99          jmp .else_1
 2447  00:99B5            ._113:
 2448                             ; 0003: [:label, ".then_1"]
 2449  00:99B5            .then_1:
 2450                             ; 0004: [:return, {1}]
 2451  00:99B5  A9 01             lda #1
 2452  00:99B7  9D 00 02          sta 0+__STACK__+0,x
 2453  00:99BA  60                rts
 2454                             ; 0005: [:jump, ".end_1"]
 2455  00:99BB  4C 0F 9A          jmp .end_1
 2456                             ; 0006: [:label, ".else_1"]
 2457  00:99BE            .else_1:
 2458                             ; 0007: [:sub, {$3:uint8}, {n:uint8}, {1}]
 2459  00:99BE  38                sec
 2460  00:99BF  BD 01 02          lda 0+__STACK__+1,x
 2461  00:99C2  E9 01             sbc #1
 2462  00:99C4  9D 05 02          sta 0+__STACK__+5,x
 2463                             ; 0008: [:call, {$2:uint8}, <Lambda:fib uint8(uint8)>, {$3:uint8}]
 2464  00:99C7  BD 05 02          lda 0+__STACK__+5,x
 2465  00:99CA  9D 0A 02          sta 10+__STACK__,x
 2466                             __call fib, #9
       00:99CD  8A                txa
       00:99CE  48                pha
       00:99CF  18                clc
       00:99D0  69 09             adc #9
       00:99D2  AA                tax
       00:99D3  20 87 99          jsr fib
       00:99D6  68                pla
       00:99D7  AA                tax
 2467  00:99D8  BD 09 02          lda __STACK__+9+0,x
 2468  00:99DB  9D 04 02          sta 0+__STACK__+4,x
 2469                             ; 0009: [:sub, {$5:uint8}, {n:uint8}, {2}]
 2470  00:99DE  38                sec
 2471  00:99DF  BD 01 02          lda 0+__STACK__+1,x
 2472  00:99E2  E9 02             sbc #2
 2473  00:99E4  9D 07 02          sta 0+__STACK__+7,x
 2474                             ; 0010: [:call, {$4:uint8}, <Lambda:fib uint8(uint8)>, {$5:uint8}]
 2475  00:99E7  BD 07 02          lda 0+__STACK__+7,x
 2476  00:99EA  9D 0A 02          sta 10+__STACK__,x
 2477                             __call fib, #9
       00:99ED  8A                txa
       00:99EE  48                pha
       00:99EF  18                clc
       00:99F0  69 09             adc #9
       00:99F2  AA                tax
       00:99F3  20 87 99          jsr fib
       00:99F6  68                pla
       00:99F7  AA                tax
 2478  00:99F8  BD 09 02          lda __STACK__+9+0,x
 2479  00:99FB  9D 06 02          sta 0+__STACK__+6,x
 2480                             ; 0011: [:add, {$6:uint8}, {$2:uint8}, {$4:uint8}]
 2481  00:99FE  18                clc
 2482  00:99FF  BD 04 02          lda 0+__STACK__+4,x
 2483  00:9A02  7D 06 02          adc 0+__STACK__+6,x
 2484  00:9A05  9D 08 02          sta 0+__STACK__+8,x
 2485                             ; 0012: [:return, {$6:uint8}]
 2486  00:9A08  BD 08 02          lda 0+__STACK__+8,x
 2487  00:9A0B  9D 00 02          sta 0+__STACK__+0,x
 2488  00:9A0E  60                rts
 2489                             ; 0013: [:label, ".end_1"]
 2490  00:9A0F            .end_1:
 2491                     
 2492                             ; function test_function
 2493  00:9A0F            test_function:
 2494                             ; 0000: [:call, nil, <Lambda:print void(uint8*)>, {$0:uint8[15]}]
 2495  00:9A0F  A9 3F             lda #LOW(._D0)
 2496  00:9A11  9D 04 02          sta 4+__STACK__,x
 2497  00:9A14  A9 9B             lda #HIGH(._D0)
 2498  00:9A16  9D 05 02          sta 5+__STACK__,x
 2499                             __call print, #4
       00:9A19  8A                txa
       00:9A1A  48                pha
       00:9A1B  18                clc
       00:9A1C  69 04             adc #4
       00:9A1E  AA                tax
       00:9A1F  20 75 85          jsr print
       00:9A22  68                pla
       00:9A23  AA                tax
 2500                             ; 0001: [:call, {$1:uint8}, <Lambda:add uint8(uint8,uint8)>, {3}, {5}]
 2501  00:9A24  A9 03             lda #3
 2502  00:9A26  9D 05 02          sta 5+__STACK__,x
 2503  00:9A29  A9 05             lda #5
 2504  00:9A2B  9D 06 02          sta 6+__STACK__,x
 2505                             __call add, #4
       00:9A2E  8A                txa
       00:9A2F  48                pha
       00:9A30  18                clc
       00:9A31  69 04             adc #4
       00:9A33  AA                tax
       00:9A34  20 76 99          jsr add
       00:9A37  68                pla
       00:9A38  AA                tax
 2506  00:9A39  BD 04 02          lda __STACK__+4+0,x
 2507  00:9A3C  9D 00 02          sta 0+__STACK__+0,x
 2508                             ; 0002: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$1:uint8}, {8}, {$2:uint8[6]}]
 2509  00:9A3F  BD 00 02          lda 0+__STACK__+0,x
 2510  00:9A42  9D 04 02          sta 4+__STACK__,x
 2511  00:9A45  A9 00             lda #0
 2512  00:9A47  9D 05 02          sta 5+__STACK__,x
 2513  00:9A4A  A9 08             lda #8
 2514  00:9A4C  9D 06 02          sta 6+__STACK__,x
 2515  00:9A4F  A9 00             lda #0
 2516  00:9A51  9D 07 02          sta 7+__STACK__,x
 2517  00:9A54  A9 4E             lda #LOW(._D2)
 2518  00:9A56  9D 08 02          sta 8+__STACK__,x
 2519  00:9A59  A9 9B             lda #HIGH(._D2)
 2520  00:9A5B  9D 09 02          sta 9+__STACK__,x
 2521                             __call assert_equal, #4
       00:9A5E  8A                txa
       00:9A5F  48                pha
       00:9A60  18                clc
       00:9A61  69 04             adc #4
       00:9A63  AA                tax
       00:9A64  20 66 86          jsr assert_equal
       00:9A67  68                pla
       00:9A68  AA                tax
 2522                             ; 0003: [:call, {$3:uint8}, <Lambda:fib uint8(uint8)>, {1}]
 2523  00:9A69  A9 01             lda #1
 2524  00:9A6B  9D 05 02          sta 5+__STACK__,x
 2525                             __call fib, #4
       00:9A6E  8A                txa
       00:9A6F  48                pha
       00:9A70  18                clc
       00:9A71  69 04             adc #4
       00:9A73  AA                tax
       00:9A74  20 87 99          jsr fib
       00:9A77  68                pla
       00:9A78  AA                tax
 2526  00:9A79  BD 04 02          lda __STACK__+4+0,x
 2527  00:9A7C  9D 01 02          sta 0+__STACK__+1,x
 2528                             ; 0004: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$3:uint8}, {1}, {$4:uint8[7]}]
 2529  00:9A7F  BD 01 02          lda 0+__STACK__+1,x
 2530  00:9A82  9D 04 02          sta 4+__STACK__,x
 2531  00:9A85  A9 00             lda #0
 2532  00:9A87  9D 05 02          sta 5+__STACK__,x
 2533  00:9A8A  A9 01             lda #1
 2534  00:9A8C  9D 06 02          sta 6+__STACK__,x
 2535  00:9A8F  A9 00             lda #0
 2536  00:9A91  9D 07 02          sta 7+__STACK__,x
 2537  00:9A94  A9 54             lda #LOW(._D4)
 2538  00:9A96  9D 08 02          sta 8+__STACK__,x
 2539  00:9A99  A9 9B             lda #HIGH(._D4)
 2540  00:9A9B  9D 09 02          sta 9+__STACK__,x
 2541                             __call assert_equal, #4
       00:9A9E  8A                txa
       00:9A9F  48                pha
       00:9AA0  18                clc
       00:9AA1  69 04             adc #4
       00:9AA3  AA                tax
       00:9AA4  20 66 86          jsr assert_equal
       00:9AA7  68                pla
       00:9AA8  AA                tax
 2542                             ; 0005: [:call, {$5:uint8}, <Lambda:fib uint8(uint8)>, {3}]
 2543  00:9AA9  A9 03             lda #3
 2544  00:9AAB  9D 05 02          sta 5+__STACK__,x
 2545                             __call fib, #4
       00:9AAE  8A                txa
       00:9AAF  48                pha
       00:9AB0  18                clc
       00:9AB1  69 04             adc #4
       00:9AB3  AA                tax
       00:9AB4  20 87 99          jsr fib
       00:9AB7  68                pla
       00:9AB8  AA                tax
 2546  00:9AB9  BD 04 02          lda __STACK__+4+0,x
 2547  00:9ABC  9D 02 02          sta 0+__STACK__+2,x
 2548                             ; 0006: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$5:uint8}, {3}, {$6:uint8[7]}]
 2549  00:9ABF  BD 02 02          lda 0+__STACK__+2,x
 2550  00:9AC2  9D 04 02          sta 4+__STACK__,x
 2551  00:9AC5  A9 00             lda #0
 2552  00:9AC7  9D 05 02          sta 5+__STACK__,x
 2553  00:9ACA  A9 03             lda #3
 2554  00:9ACC  9D 06 02          sta 6+__STACK__,x
 2555  00:9ACF  A9 00             lda #0
 2556  00:9AD1  9D 07 02          sta 7+__STACK__,x
 2557  00:9AD4  A9 5B             lda #LOW(._D6)
 2558  00:9AD6  9D 08 02          sta 8+__STACK__,x
 2559  00:9AD9  A9 9B             lda #HIGH(._D6)
 2560  00:9ADB  9D 09 02          sta 9+__STACK__,x
 2561                             __call assert_equal, #4
       00:9ADE  8A                txa
       00:9ADF  48                pha
       00:9AE0  18                clc
       00:9AE1  69 04             adc #4
       00:9AE3  AA                tax
       00:9AE4  20 66 86          jsr assert_equal
       00:9AE7  68                pla
       00:9AE8  AA                tax
 2562                             ; 0007: [:call, {$7:uint8}, <Lambda:fib uint8(uint8)>, {11}]
 2563  00:9AE9  A9 0B             lda #11
 2564  00:9AEB  9D 05 02          sta 5+__STACK__,x
 2565                             __call fib, #4
       00:9AEE  8A                txa
       00:9AEF  48                pha
       00:9AF0  18                clc
       00:9AF1  69 04             adc #4
       00:9AF3  AA                tax
       00:9AF4  20 87 99          jsr fib
       00:9AF7  68                pla
       00:9AF8  AA                tax
 2566  00:9AF9  BD 04 02          lda __STACK__+4+0,x
 2567  00:9AFC  9D 03 02          sta 0+__STACK__+3,x
 2568                             ; 0008: [:call, nil, <Lambda:assert_equal void(uint16,uint16,uint8*)>, {$7:uint8}, {144}, {$8:uint8[8]}]
 2569  00:9AFF  BD 03 02          lda 0+__STACK__+3,x
 2570  00:9B02  9D 04 02          sta 4+__STACK__,x
 2571  00:9B05  A9 00             lda #0
 2572  00:9B07  9D 05 02          sta 5+__STACK__,x
 2573  00:9B0A  A9 90             lda #144
 2574  00:9B0C  9D 06 02          sta 6+__STACK__,x
 2575  00:9B0F  A9 00             lda #0
 2576  00:9B11  9D 07 02          sta 7+__STACK__,x
 2577  00:9B14  A9 62             lda #LOW(._D8)
 2578  00:9B16  9D 08 02          sta 8+__STACK__,x
 2579  00:9B19  A9 9B             lda #HIGH(._D8)
 2580  00:9B1B  9D 09 02          sta 9+__STACK__,x
 2581                             __call assert_equal, #4
       00:9B1E  8A                txa
       00:9B1F  48                pha
       00:9B20  18                clc
       00:9B21  69 04             adc #4
       00:9B23  AA                tax
       00:9B24  20 66 86          jsr assert_equal
       00:9B27  68                pla
       00:9B28  AA                tax
 2582                             ; 0009: [:call, nil, <Lambda:puts void(uint8*)>, {$9:uint8[1]}]
 2583  00:9B29  A9 6A             lda #LOW(._D9)
 2584  00:9B2B  9D 04 02          sta 4+__STACK__,x
 2585  00:9B2E  A9 9B             lda #HIGH(._D9)
 2586  00:9B30  9D 05 02          sta 5+__STACK__,x
 2587                             __call puts, #4
       00:9B33  8A                txa
       00:9B34  48                pha
       00:9B35  18                clc
       00:9B36  69 04             adc #4
       00:9B38  AA                tax
       00:9B39  20 87 85          jsr puts
       00:9B3C  68                pla
       00:9B3D  AA                tax
 2588                             ; 0010: [:return]
 2589  00:9B3E  60                rts
 2590  00:9B3F            ._D0:
 2591  00:9B3F  74 65 73          .db 116,101,115,116,95,102,117,110,99,116,105,111,110,58,0
       00:9B42  74 5F 66  
       00:9B45  75 6E 63  
       00:9B48  74 69 6F  
       00:9B4B  6E 3A 00  
 2592  00:9B4E            ._D2:
 2593  00:9B4E  61 64 64          .db 97,100,100,40,41,0
       00:9B51  28 29 00  
 2594  00:9B54            ._D4:
 2595  00:9B54  66 69 62          .db 102,105,98,40,49,41,0
       00:9B57  28 31 29  
       00:9B5A  00        
 2596  00:9B5B            ._D6:
 2597  00:9B5B  66 69 62          .db 102,105,98,40,51,41,0
       00:9B5E  28 33 29  
       00:9B61  00        
 2598  00:9B62            ._D8:
 2599  00:9B62  66 69 62          .db 102,105,98,40,49,49,41,0
       00:9B65  28 31 31  
       00:9B68  29 00     
 2600  00:9B6A            ._D9:
 2601  00:9B6A  00                .db 0
 2602                     
 2603                             ; function main
 2604  00:9B6B            main:
 2605                             ; 0000: [:call, nil, <Lambda:init void()>]
 2606                             __call init, #0
       00:9B6B  8A                txa
       00:9B6C  48                pha
       00:9B6D  18                clc
       00:9B6E  69 00             adc #0
       00:9B70  AA                tax
       00:9B71  20 7E 87          jsr init
       00:9B74  68                pla
       00:9B75  AA                tax
 2607                             ; 0001: [:call, nil, <Lambda:test_const_op void()>]
 2608                             __call test_const_op, #0
       00:9B76  8A                txa
       00:9B77  48                pha
       00:9B78  18                clc
       00:9B79  69 00             adc #0
       00:9B7B  AA                tax
       00:9B7C  20 80 87          jsr test_const_op
       00:9B7F  68                pla
       00:9B80  AA                tax
 2609                             ; 0002: [:call, nil, <Lambda:test_int_op void()>]
 2610                             __call test_int_op, #0
       00:9B81  8A                txa
       00:9B82  48                pha
       00:9B83  18                clc
       00:9B84  69 00             adc #0
       00:9B86  AA                tax
       00:9B87  20 41 89          jsr test_int_op
       00:9B8A  68                pla
       00:9B8B  AA                tax
 2611                             ; 0003: [:call, nil, <Lambda:test_function void()>]
 2612                             __call test_function, #0
       00:9B8C  8A                txa
       00:9B8D  48                pha
       00:9B8E  18                clc
       00:9B8F  69 00             adc #0
       00:9B91  AA                tax
       00:9B92  20 0F 9A          jsr test_function
       00:9B95  68                pla
       00:9B96  AA                tax
 2613                             ; 0004: [:call, nil, <Lambda:test_int8_op void()>]
 2614                             __call test_int8_op, #0
       00:9B97  8A                txa
       00:9B98  48                pha
       00:9B99  18                clc
       00:9B9A  69 00             adc #0
       00:9B9C  AA                tax
       00:9B9D  20 CD 8F          jsr test_int8_op
       00:9BA0  68                pla
       00:9BA1  AA                tax
 2615                             ; 0005: [:call, nil, <Lambda:test_int16_op void()>]
 2616                             __call test_int16_op, #0
       00:9BA2  8A                txa
       00:9BA3  48                pha
       00:9BA4  18                clc
       00:9BA5  69 00             adc #0
       00:9BA7  AA                tax
       00:9BA8  20 6E 91          jsr test_int16_op
       00:9BAB  68                pla
       00:9BAC  AA                tax
 2617                             ; 0006: [:call, nil, <Lambda:test_int8x16_op void()>]
 2618                             __call test_int8x16_op, #0
       00:9BAD  8A                txa
       00:9BAE  48                pha
       00:9BAF  18                clc
       00:9BB0  69 00             adc #0
       00:9BB2  AA                tax
       00:9BB3  20 9F 96          jsr test_int8x16_op
       00:9BB6  68                pla
       00:9BB7  AA                tax
 2619                             ; 0007: [:call, nil, <Lambda:test_logical_op void()>]
 2620                             __call test_logical_op, #0
       00:9BB8  8A                txa
       00:9BB9  48                pha
       00:9BBA  18                clc
       00:9BBB  69 00             adc #0
       00:9BBD  AA                tax
       00:9BBE  20 A0 96          jsr test_logical_op
       00:9BC1  68                pla
       00:9BC2  AA                tax
 2621                             ; 0008: [:call, nil, <Lambda:test_nesasm_limit void()>]
 2622                             __call test_nesasm_limit, #0
       00:9BC3  8A                txa
       00:9BC4  48                pha
       00:9BC5  18                clc
       00:9BC6  69 00             adc #0
       00:9BC8  AA                tax
       00:9BC9  20 17 99          jsr test_nesasm_limit
       00:9BCC  68                pla
       00:9BCD  AA                tax
 2623                             ; 0009: [:call, nil, <Lambda:exit void(uint8)>, {0}]
 2624  00:9BCE  A9 00             lda #0
 2625  00:9BD0  9D 00 02          sta 0+__STACK__,x
 2626                             __call exit, #0
       00:9BD3  8A                txa
       00:9BD4  48                pha
       00:9BD5  18                clc
       00:9BD6  69 00             adc #0
       00:9BD8  AA                tax
       00:9BD9  20 B6 85          jsr exit
       00:9BDC  68                pla
       00:9BDD  AA                tax
 2627                             ; 0010: [:return]
 2628  00:9BDE  60                rts
 2629                     
 2630                     
