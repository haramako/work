options ( inesprg: 1, // プログラムにいくつのバンクを使うか。今は１つ。
          ineschr: 1, // グラフィックデータにいくつのバンクを使うか。今は１つ。
          inesmir: 0, // 水平ミラーリング
          inesmap: 0  // マッパー。０番にする。
          );

include( "nes.fc" );
include( "math.fc" );
include( "util.fc" );

include( "miku.asm" );

const BG:int[1] options ( file:'miku.chr', char_bank: 0 );

function wait(n:int):void
{
  while( n ){
    var i:int = 55;
    while( i ){
      var j:int = 255;
      while( j ){
        j -= 1;
      }
      i -= i;
    }
    n -= 1;
  }
}

var anim:int = 0;
var anim_count:int = 0;
var giff:int8;
var giff16:int8;

var my_stat:int = 0;
var my_muteki:int = 0;
var my_muteki_count:int = 0;
var my_bang:int = 0;
var my_x:int = 100;
var my_y:int = 100;
var my_bang_count:int = 0;
var my_wait:int = 0;

const MY_BUL_MAX = 8;
var my_bul_type:int[MY_BUL_MAX];
var my_bul_x:int[MY_BUL_MAX];
var my_bul_y:int[MY_BUL_MAX];
var my_bul_vx:int8[MY_BUL_MAX];
var my_bul_vy:int8[MY_BUL_MAX];
var my_bul_idx:int = 0;

const EN_MAX = 16;
var en_type:int[EN_MAX];
var en_x:int[EN_MAX];
var en_y:int[EN_MAX];
var en_p1:int[EN_MAX];
var en_p2:int[EN_MAX];
var en_p3:int[EN_MAX];
var en_p4:int[EN_MAX];
var en_wait:int = 0;
var en_now = 0;

const EN_BUL_MAX = 48;
var en_bul_type:int[EN_BUL_MAX];
var en_bul_x:int[EN_BUL_MAX];
var en_bul_y:int[EN_BUL_MAX];
var en_bul_vx:int8[EN_BUL_MAX];
var en_bul_vy:int8[EN_BUL_MAX];
var en_bul_idx = 0;

const PALLET:int[32] = [0x0f,0x19,0x29,0x30, 0x0f,0x11,0x12,0x13, 0x0f,0x11,0x12,0x13, 0x0f,0x11,0x12,0x13,
                        0x0f,0x1B,0x2B,0x30, 0x0f,0x04,0x26,0x36, 0x0f,0x11,0x12,0x13, 0x0f,0x11,0x12,0x13];

const SPR_MIKU = 0x80;
const SPR_MIKU_BANG = 0x88;
const SPR_NEGI = 0xa0;
const SPR_ENEMY = 0xc0;
const SPR_EN_BUL = 0xe0;

function my_process():void
{
  var i:int;
  // 自機の移動
  if( my_stat == 0 ){
    pad_update();
    if( pad_up ){ my_y += (-24+giff16)/16; }
    if( pad_down ){ my_y += (24+giff16)/16; }
    if( pad_left ){ my_x += (-24+giff16)/16; }
    if( pad_right ){ my_x += (24+giff16)/16; }

    if( my_x < 16 ){ my_x = 16; }
    if( my_x > 240 ){ my_x = 240; }
    if( my_y < 16 ){ my_y = 16; }
    if( my_y > 216 ){ my_y = 216; }

    // 死亡!
    if( my_bang ){
      wait(80);
      my_stat = 1;
      my_muteki = 1;
      my_wait = 64;
      my_bang = 0;
      for( i, 0, MY_BUL_MAX ){
        my_bul_type[i] = 3;
        my_bul_vx[i] =  cos(i*32+my_wait)/8;
        my_bul_vy[i] = -sin(i*32+my_wait)/8;
        my_bul_x[i] = my_x;
        my_bul_y[i] = my_y;
      }
    }

    // 弾を打つ
    if( my_wait == 0 ){
      if( pad_a ){
        my_bul_type[my_bul_idx] = 1;
        my_bul_x[my_bul_idx] = my_x;
        my_bul_y[my_bul_idx] = my_y-8;
        my_bul_idx = ( my_bul_idx + 1 ) % MY_BUL_MAX;
        my_wait = 4;
      }
    }else{
      my_wait -= 1;
    }

    if( my_muteki_count ){
      my_muteki_count -= 1;
      if( my_muteki_count == 0 ) my_muteki = 0;
    }

    gr_sprite2x2( my_x-8, my_y-8, SPR_MIKU+anim*2, my_muteki_count % 2 );

  }else{
    if( my_wait ){
      my_wait -= 1;
    }else{
      for( i, 0, MY_BUL_MAX ){
        my_bul_type[i] = 0;
      }
      my_stat = 0;
      my_wait = 0;
      my_muteki_count = 60;
    }
  }
}

// 自機の弾の処理
function my_bul_process():void
{
  var i = 0;
  for( i, 0, MY_BUL_MAX ){
    if( my_bul_type[i] == 1 ){
      // 通常時
      if( my_bul_y[i] > 8 ){
        my_bul_y[i] -= 6;
        gr_sprite( my_bul_x[i]-4, my_bul_y[i]-4, SPR_NEGI+anim, 0 );
        gr_sprite( my_bul_x[i]-4, my_bul_y[i]+4, SPR_NEGI+anim+16, 0 );
      }else{
        my_bul_y[i] = 0;
      }
    }else if( my_bul_type[i] == 2 ){
      // 弾の消滅エフェクト
      my_bul_y[i] += 0;
      if( my_bul_vx[i] >= 8 ){
        my_bul_type[i] = 0;
      }else{
        gr_sprite( my_bul_x[i]-4, my_bul_y[i]-4, SPR_MIKU_BANG+(my_bul_vx[i]/2), 0 );
      }
      my_bul_vx[i] += 1;
    }else if( my_bul_type[i] == 3 ){
      // 死亡時の爆発
      my_bul_x[i] += (my_bul_vx[i]+giff16)/16;
      my_bul_y[i] += (my_bul_vy[i]+giff16)/16;
      gr_sprite( my_bul_x[i]-4, my_bul_y[i]-4, SPR_MIKU_BANG+(anim_count/2)%4, 0 );
    }
  }
}

function en_process():void
{
  // 敵の出現
  if( en_wait == 0 ){
    en_type[en_now] = 1;
    en_x[en_now] = rand()/2 + 64;
    en_y[en_now] = 0;
    en_p1[en_now] = 0;
    en_p2[en_now] = 0;
    en_p4[en_now] = 4;
    en_now = (en_now+1)%EN_MAX;
    en_wait = 20;
  }else{
    en_wait -= 1;
  }

  var i = 0;
  while( i<EN_MAX ){
    if( en_type[i] ){
      en_process_1(i);
    }
    i += 1;
  }
}

function outside(x:int,y:int):int
{
  return ( x < 8 || x > 240 || y < 8 || y > 240 );
}

function en_process_1(i:int):void
{
  var j:int;
  var pal:int = 1;
  
  // 自機の弾との当たり判定
  if( my_stat == 0 ){
    for( j, 0, MY_BUL_MAX ){
      if( my_bul_type[j] == 1 && en_x[i] + 12 - my_bul_x[j] < 24 && en_y[i] + 12 - my_bul_y[j] < 24 ){
        //en_type[i] = 0;
        my_bul_type[j] = 2;
        my_bul_vx[j] = 0;
        pal = 0;
        en_p4[i] -= 1;
        if( en_p4[i] == 0 ){
          en_type[i] = 0;
          return;
        }
      }
    }
  }

  if( en_p1[i] == 0 ){
    en_y[i] += (20+giff)/16;
    en_p2[i] += 1;
    if( en_p2[i] == 60 ){
      en_p1[i] = 1;
      en_p2[i] = 0;
      en_p3[i] = atan( -(my_y/16 - en_y[i]/16), my_x/16 - en_x[i]/16 );
    }
  }else if( en_p1[i] == 1 ){
    en_p2[i] += 1;
    // 弾を打つ
    if( en_p2[i] % 16 == 0 ){
      var n = en_bul_new();
      en_bul_type[n] = 1;
      en_bul_x[n] = en_x[i];
      en_bul_y[n] = en_y[i];
      var angle = atan( -(my_y/16 - en_y[i]/16), my_x/16 - en_x[i]/16 ) + rand()%32 - 16;
      en_bul_vx[n] = cos(angle)/8;
      en_bul_vy[n] = -sin(angle)/8;
    }
    if( en_p2[i] == 60 ){
      en_p1[i] = 2;
    }
  }else if( en_p1[i] == 2 ){
    en_x[i] -= (cos(en_p3[i])/4+giff16)/16;
    en_y[i] += (sin(en_p3[i])/4+giff16)/16;
    if( outside( en_x[i], en_y[i] ) ){
      en_type[i] = 0;
      return;
    }
  }

  // 表示
  gr_sprite2x2( en_x[i]-8, en_y[i]-8, SPR_ENEMY, pal );

}

// 敵の弾の処理
function en_bul_process():void options (extern:true) {}
/*
function en_bul_process():void
{
  var i = 0;
  while( i<EN_BUL_MAX ){
    if( en_bul_type[i] ){
      en_bul_y[i] += (en_bul_vy[i]+giff) / 4;
      en_bul_x[i] += (en_bul_vx[i]+giff) / 4;
      gr_sprite( en_bul_x[i]-4, en_bul_y[i]-4, SPR_EN_BUL+anim, 1 );
      // 自機との当たり判定
      if( my_muteki == 0 && my_x + 4 - en_bul_x[i] < 8 && my_y + 4 - en_bul_y[i] < 8 ){
        my_bang = 1;
        en_bul_type[i] = 0;
      }
      // 死亡判定
      if( en_bul_y[i] < 8 || en_bul_y[i] > 248 || en_bul_x[i] < 8 || en_bul_x[i] > 248 ){
          en_bul_type[i] = 0;
      }
    }
    i += 1;
  }
}
*/


function en_bul_new():int
{
  var n = en_bul_idx;
  en_bul_idx += 1;
  if( en_bul_idx >= EN_BUL_MAX ){ en_bul_idx = 0; }
  return n;
}

const GIFF_TABLE = [0,8,4,12, 2,10,6,14, 1,9,5,13, 3,11,7,15];

function main(): void
{
  ppu_lock();

  ppu_put( 0x3f00, PALLET, 32 );

  memzero( my_bul_y, MY_BUL_MAX );
  memzero( en_type, EN_MAX );
  memzero( en_bul_type, EN_BUL_MAX );
  
  ppu_unlock();

  while( 1 ){
    anim_count += 1;
    anim = anim_count / 8 % 4;
    giff16 = GIFF_TABLE[anim_count%16];
    giff = giff16/4;
    
    en_bul_process();
    my_process();
    en_process();
    my_bul_process();
    
    wait_vsync();
  }
  
}

main();
