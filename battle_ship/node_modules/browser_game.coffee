# nodeとブラウザの両対応用, nodeの場合はそのままで,ブラウザの場合はwindowをexportsとする
if typeof(module) == 'undefined' and typeof(exports) == 'undefined'
    eval('var exports, global; exports = {}; window["browser_game"] = exports; global = window;')

_ = require 'underscore'
utils = require 'battle_ship/utils'
game = require 'battle_ship/game'

DEFAULT_PORT = 30001

CELL_SIZE = 30

FIELD_SIZE = game.FIELD_SIZE

###
# ゲームの初期配置を行う
###
class InitGame
    constructor: (callback)->
        @callback = callback

        @canvas = $('#canvas')
        @initPanelDiv = $('#init_panel')

        @down = false
        @target = undefined
        @ships = [
            {type: 'BattleShip', x: 0, y: 0, w:4, h:1 },
            {type: 'BattleShip', x: 0, y: 1, w:3, h:1 },
            {type: 'BattleShip', x: 0, y: 2, w:3, h:1 },
            {type: 'BattleShip', x: 0, y: 3, w:2, h:1 },
            {type: 'BattleShip', x: 0, y: 4, w:2, h:1 },
            {type: 'BattleShip', x: 0, y: 5, w:2, h:1 },
            {type: 'BattleShip', x: 0, y: 6, w:2, h:1 },
            {type: 'BattleShip', x: 0, y: 7, w:1, h:1 },
            {type: 'BattleShip', x: 0, y: 8, w:1, h:1 },
        ]

        $('#finish',@initPanel).click (ev)=>
            @callback( 'finish' )

        @canvas.mousedown (ev)=>
            x = Math.floor( ev.offsetX / CELL_SIZE )
            y = Math.floor( ev.offsetY / CELL_SIZE )
            if ev.button == 0
                @down = true
                @target = undefined
                for ship in @ships
                    if game.inner( ship, x, y )
                        @target = ship
                        @target_x = ship.x - x
                        @target_y = ship.y - y
                        break
                return true
            else if ev.button == 1
                if not @down
                    for ship in @ships
                        if game.inner( ship, x, y )
                            tmp = ship.w
                            ship.w = ship.h
                            ship.h = tmp
                            if game.infield( ship )
                                @draw()
                            else
                                ship.h = ship.w
                                ship.w = tmp
                            break
                return false

        .mouseup (ev)=>
            @down = false
            @target = undefined
        .mousemove (ev)=>
            if @down and @target
                x = Math.floor( ev.offsetX / CELL_SIZE )
                y = Math.floor( ev.offsetY / CELL_SIZE )
                old_x = @target.x
                old_y = @target.y
                @target.x = x + @target_x
                @target.y = y + @target_y
                if game.infield( @target )
                    @draw()
                else
                    @target.x = old_x
                    @target.y = old_y

    finalize: ->
        @initPanelDiv.remove()
        @canvas.unbind 'mousedown'
        @canvas.unbind 'moseup'
        @canvas.unbind 'mousemove'

    draw: ->
        c = @canvas[0].getContext('2d')
        SIZE = CELL_SIZE
        c.save()
        c.translate(0,0)
        # 塗りつぶす
        c.fillStyle = '#88f'
        c.fillRect(0,0,SIZE*FIELD_SIZE,SIZE*FIELD_SIZE)
        # 罫線を描画
        c.fillStyle = '#66f'
        for i in [0...FIELD_SIZE]
            c.fillRect( 0, SIZE*i, SIZE*FIELD_SIZE, 1 )
            c.fillRect( SIZE*i, 0, 1, SIZE*FIELD_SIZE )
        # 船を描画
        for ship in @ships
            c.fillStyle = '#444'
            c.fillRect( ship.x*SIZE+10, ship.y*SIZE+10, ship.w*SIZE-20, ship.h*SIZE-20 )
        c.restore()

###
# ゲームのメイン処理
###
class Game
    constructor: (player)->
        @canvas = $('#canvas')
        $(@canvas).mousedown (ev)=>
            if @player == 0
                ev.offsetX -= 320
            x = Math.floor( ev.offsetX / CELL_SIZE )
            y = Math.floor( ev.offsetY / CELL_SIZE )
            if x >= 0 and x < FIELD_SIZE and y >= 0 and y < FIELD_SIZE
                cli.send {t:'ATTACK', pl:@player, x:x, y:y }

        @player = player
        @game = new game.Game

    draw: ->
        c = @canvas[0].getContext('2d')
        c.clearRect(0,0,@canvas[0].width, @canvas[0].height )
        @showField(c,i) for i in [0...2]

    showField: (c,pl)->
        SIZE = CELL_SIZE
        field = @game.fields[pl]
        c.save()
        c.translate(pl*320,0)
        # 塗りつぶす
        c.fillStyle = '#88f'
        c.fillRect(0,0,SIZE*FIELD_SIZE,SIZE*FIELD_SIZE)
        # 罫線を描画
        c.fillStyle = '#66f'
        for i in [0...FIELD_SIZE]
            c.fillRect( 0, SIZE*i, SIZE*FIELD_SIZE, 1 )
            c.fillRect( SIZE*i, 0, 1, SIZE*FIELD_SIZE )
        # 船を描画
        if pl == @player
            pp field.ships
            for ship in field.ships
                c.fillStyle = '#444'
                c.fillRect( ship.x*SIZE+10, ship.y*SIZE+10, ship.w*SIZE-20, ship.h*SIZE-20 )
        # 爆撃跡を描画
        for y in [0...FIELD_SIZE]
            for x in [0...FIELD_SIZE]
                cell = field.data[y][x]
                if cell > 0
                    c.fillStyle = [undefined,'#b88','#f00','#0f0'][cell]
                    c.fillRect( x*SIZE+8, y*SIZE+8, SIZE-16, SIZE-16 )

        c.restore()

class AdminClient
    constructor: (host,port,callback)->
        @host = host
        @port = port or DEFAULT_PORT
        @messageId = 0
        @callbackById = {}
        @ws = new WebSocket("ws://#{@host}:#{@port}/admin",'janyuhai-game-admin')
        @ws.onmessage = (ev)=>
            msg = JSON.parse( ev.data )
            if msg.id?
                callback = @callbackById[msg.id]
                callback(msg) if callback
                delete @callbackById[msg.id]
            else
                puts "unknown message, msg=#{JSON.stringify(msg)}"
        @ws.onopen = (ev)=>
            puts 'admin-client connected'
            callback(this)
        @ws.onclose = (ev)=>
            puts 'admin-client closed'

    send: (msg,callback)->
        msg.id = @messageId
        @callbackById[msg.id] = callback
        @messageId++
        @ws.send JSON.stringify(msg)

    close: ->
        @ws.close()

class Client
    constructor: (host,port,pid)->
        @game = undefined
        @messageId = 0
        @pid = pid
        @ws = new WebSocket("ws://#{host}:#{port}/#{@pid}", 'janyuhai-game')

        @ws.onopen = (ev)=>
            puts 'client connect'
            @game = new game.Game

        @ws.onmessage = (ev)=>
            msg = JSON.parse( ev.data )
            @oncommand msg

        @ws.onclose = (ev)->
            puts 'client close'

    send: (msg)->
        puts msg
        msg.id = @messageId
        @messageId++
        @ws.send JSON.stringify(msg)

    oncommend: (msg)->0

uuid = ->
    ''+Math.floor(Math.random()*10000)

parseParams = ->
    param = {}
    for s in document.location.search.substring(1).split('&')
        kv = s.split('=')
        param[kv[0]] = kv[1]
    param

# game.htmlの処理
startGameHtml = ->
    $(document).ready ->
        # GETパラメータの解析
        param = parseParams()

        g = undefined
        createClient = (pid)->
            window.cli = cli = new Client(param.host, param.port, pid)
            cli.oncommand = (msg)->
                pp msg.t
                switch msg.t
                 when 'LOGIN'
                    cli.pl = msg.idx
                 when 'INIT_GAME'
                    window.g = g = new InitGame ->
                        puts 'finish InitGame'
                        g.finalize()
                        ships = g.ships
                        cli.send( {t:'INIT_GAME_R', pl:cli.pl, ships:ships} )
                    g.draw()
                 when 'START_GAME'
                    window.g = g = new Game(cli.pl)
                    g.game.deserialize( msg.game )
                    g.draw()
                 when 'UPDATE'
                    g.game.deserialize( msg.game )
                    g.draw()
                 else
                    throw "invalid msg.t=#{msg.t}"

        # パラメータごとに状況を分解
        if param.pid
            createClient(param.pid)
        else
            param.host ||= window.location.host
            param.port ||= DEFAULT_PORT
            window.admin = new AdminClient param.host, param.port, (conn)->
                sid = uuid()
                pids = (uuid() for i in [0...2] )
                conn.send {t:'CREATE_SESSION', sid:sid, pids:pids }, ->
                    puts "create session ok, sid=#{sid}"
                createClient(pids[0])
        puts 'ready'

# index.htmlの処理
startIndexHtml = ->
    # GETパラメータの解析
    param = parseParams()

    host = param.host or location.host
    port = param.port or DEFAULT_PORT

    $(document).ready ->
        window.admin = new AdminClient host, port, (conn)->
            reloadSession()
        $('#create_session').click (ev)->
            pids = (uuid() for i in [0...2])
            window.admin.send {t:'CREATE_SESSION', sid:uuid(), pids:pids}, (msg)->
                reloadSession()

    reloadSession = ->
        window.admin.send {t:'SESSION_LIST'}, (msg)->
            table = $('#sessions')
            table.html( '<tr><th>session</th><th>players</th></tr>' )
            for s in msg.sessions
                html = "<tr><td>#{s.sid}</td><td>"
                html += '<a href="game.html?host='+host+'&port='+port+'&pid='+pid+'">プレイヤー'+i+'</a>　' for pid,i in s.players
                html += '</td></tr>'
                table.append( $(html) )


exports.Game = Game
exports.AdminClient = AdminClient
exports.Client = Client
exports.startGameHtml = startGameHtml
exports.startIndexHtml = startIndexHtml
