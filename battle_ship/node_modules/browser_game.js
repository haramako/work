(function() {
  var AdminClient, CELL_SIZE, Client, DEFAULT_PORT, FIELD_SIZE, Game, InitGame, game, parseParams, startGameHtml, startIndexHtml, utils, uuid, _;

  if (typeof module === 'undefined' && typeof exports === 'undefined') {
    eval('var exports, global; exports = {}; window["browser_game"] = exports; global = window;');
  }

  _ = require('underscore');

  utils = require('battle_ship/utils');

  game = require('battle_ship/game');

  DEFAULT_PORT = 30001;

  CELL_SIZE = 30;

  FIELD_SIZE = game.FIELD_SIZE;

  /*
  # ゲームの初期配置を行う
  */

  InitGame = (function() {

    function InitGame(callback) {
      var _this = this;
      this.callback = callback;
      this.canvas = $('#canvas');
      this.initPanelDiv = $('#init_panel');
      this.down = false;
      this.target = void 0;
      this.ships = [
        {
          type: 'BattleShip',
          x: 0,
          y: 0,
          w: 4,
          h: 1
        }, {
          type: 'BattleShip',
          x: 0,
          y: 1,
          w: 3,
          h: 1
        }, {
          type: 'BattleShip',
          x: 0,
          y: 2,
          w: 3,
          h: 1
        }, {
          type: 'BattleShip',
          x: 0,
          y: 3,
          w: 2,
          h: 1
        }, {
          type: 'BattleShip',
          x: 0,
          y: 4,
          w: 2,
          h: 1
        }, {
          type: 'BattleShip',
          x: 0,
          y: 5,
          w: 2,
          h: 1
        }, {
          type: 'BattleShip',
          x: 0,
          y: 6,
          w: 2,
          h: 1
        }, {
          type: 'BattleShip',
          x: 0,
          y: 7,
          w: 1,
          h: 1
        }, {
          type: 'BattleShip',
          x: 0,
          y: 8,
          w: 1,
          h: 1
        }
      ];
      $('#finish', this.initPanel).click(function(ev) {
        return _this.callback('finish');
      });
      this.canvas.mousedown(function(ev) {
        var ship, tmp, x, y, _i, _j, _len, _len2, _ref, _ref2;
        x = Math.floor(ev.offsetX / CELL_SIZE);
        y = Math.floor(ev.offsetY / CELL_SIZE);
        if (ev.button === 0) {
          _this.down = true;
          _this.target = void 0;
          _ref = _this.ships;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            ship = _ref[_i];
            if (game.inner(ship, x, y)) {
              _this.target = ship;
              _this.target_x = ship.x - x;
              _this.target_y = ship.y - y;
              break;
            }
          }
          return true;
        } else if (ev.button === 1) {
          if (!_this.down) {
            _ref2 = _this.ships;
            for (_j = 0, _len2 = _ref2.length; _j < _len2; _j++) {
              ship = _ref2[_j];
              if (game.inner(ship, x, y)) {
                tmp = ship.w;
                ship.w = ship.h;
                ship.h = tmp;
                if (game.infield(ship)) {
                  _this.draw();
                } else {
                  ship.h = ship.w;
                  ship.w = tmp;
                }
                break;
              }
            }
          }
          return false;
        }
      }).mouseup(function(ev) {
        _this.down = false;
        return _this.target = void 0;
      }).mousemove(function(ev) {
        var old_x, old_y, x, y;
        if (_this.down && _this.target) {
          x = Math.floor(ev.offsetX / CELL_SIZE);
          y = Math.floor(ev.offsetY / CELL_SIZE);
          old_x = _this.target.x;
          old_y = _this.target.y;
          _this.target.x = x + _this.target_x;
          _this.target.y = y + _this.target_y;
          if (game.infield(_this.target)) {
            return _this.draw();
          } else {
            _this.target.x = old_x;
            return _this.target.y = old_y;
          }
        }
      });
    }

    InitGame.prototype.finalize = function() {
      this.initPanelDiv.remove();
      this.canvas.unbind('mousedown');
      this.canvas.unbind('moseup');
      return this.canvas.unbind('mousemove');
    };

    InitGame.prototype.draw = function() {
      var SIZE, c, i, ship, _i, _len, _ref;
      c = this.canvas[0].getContext('2d');
      SIZE = CELL_SIZE;
      c.save();
      c.translate(0, 0);
      c.fillStyle = '#88f';
      c.fillRect(0, 0, SIZE * FIELD_SIZE, SIZE * FIELD_SIZE);
      c.fillStyle = '#66f';
      for (i = 0; 0 <= FIELD_SIZE ? i < FIELD_SIZE : i > FIELD_SIZE; 0 <= FIELD_SIZE ? i++ : i--) {
        c.fillRect(0, SIZE * i, SIZE * FIELD_SIZE, 1);
        c.fillRect(SIZE * i, 0, 1, SIZE * FIELD_SIZE);
      }
      _ref = this.ships;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ship = _ref[_i];
        c.fillStyle = '#444';
        c.fillRect(ship.x * SIZE + 10, ship.y * SIZE + 10, ship.w * SIZE - 20, ship.h * SIZE - 20);
      }
      return c.restore();
    };

    return InitGame;

  })();

  /*
  # ゲームのメイン処理
  */

  Game = (function() {

    function Game(player) {
      var _this = this;
      this.canvas = $('#canvas');
      $(this.canvas).mousedown(function(ev) {
        var x, y;
        if (_this.player === 0) ev.offsetX -= 320;
        x = Math.floor(ev.offsetX / CELL_SIZE);
        y = Math.floor(ev.offsetY / CELL_SIZE);
        if (x >= 0 && x < FIELD_SIZE && y >= 0 && y < FIELD_SIZE) {
          return cli.send({
            t: 'ATTACK',
            pl: _this.player,
            x: x,
            y: y
          });
        }
      });
      this.player = player;
      this.game = new game.Game;
    }

    Game.prototype.draw = function() {
      var c, i, _results;
      c = this.canvas[0].getContext('2d');
      c.clearRect(0, 0, this.canvas[0].width, this.canvas[0].height);
      _results = [];
      for (i = 0; i < 2; i++) {
        _results.push(this.showField(c, i));
      }
      return _results;
    };

    Game.prototype.showField = function(c, pl) {
      var SIZE, cell, field, i, ship, x, y, _i, _len, _ref;
      SIZE = CELL_SIZE;
      field = this.game.fields[pl];
      c.save();
      c.translate(pl * 320, 0);
      c.fillStyle = '#88f';
      c.fillRect(0, 0, SIZE * FIELD_SIZE, SIZE * FIELD_SIZE);
      c.fillStyle = '#66f';
      for (i = 0; 0 <= FIELD_SIZE ? i < FIELD_SIZE : i > FIELD_SIZE; 0 <= FIELD_SIZE ? i++ : i--) {
        c.fillRect(0, SIZE * i, SIZE * FIELD_SIZE, 1);
        c.fillRect(SIZE * i, 0, 1, SIZE * FIELD_SIZE);
      }
      if (pl === this.player) {
        pp(field.ships);
        _ref = field.ships;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ship = _ref[_i];
          c.fillStyle = '#444';
          c.fillRect(ship.x * SIZE + 10, ship.y * SIZE + 10, ship.w * SIZE - 20, ship.h * SIZE - 20);
        }
      }
      for (y = 0; 0 <= FIELD_SIZE ? y < FIELD_SIZE : y > FIELD_SIZE; 0 <= FIELD_SIZE ? y++ : y--) {
        for (x = 0; 0 <= FIELD_SIZE ? x < FIELD_SIZE : x > FIELD_SIZE; 0 <= FIELD_SIZE ? x++ : x--) {
          cell = field.data[y][x];
          if (cell > 0) {
            c.fillStyle = [void 0, '#b88', '#f00', '#0f0'][cell];
            c.fillRect(x * SIZE + 8, y * SIZE + 8, SIZE - 16, SIZE - 16);
          }
        }
      }
      return c.restore();
    };

    return Game;

  })();

  AdminClient = (function() {

    function AdminClient(host, port, callback) {
      var _this = this;
      this.host = host;
      this.port = port || DEFAULT_PORT;
      this.messageId = 0;
      this.callbackById = {};
      this.ws = new WebSocket("ws://" + this.host + ":" + this.port + "/admin", 'janyuhai-game-admin');
      this.ws.onmessage = function(ev) {
        var msg;
        msg = JSON.parse(ev.data);
        if (msg.id != null) {
          callback = _this.callbackById[msg.id];
          if (callback) callback(msg);
          return delete _this.callbackById[msg.id];
        } else {
          return puts("unknown message, msg=" + (JSON.stringify(msg)));
        }
      };
      this.ws.onopen = function(ev) {
        puts('admin-client connected');
        return callback(_this);
      };
      this.ws.onclose = function(ev) {
        return puts('admin-client closed');
      };
    }

    AdminClient.prototype.send = function(msg, callback) {
      msg.id = this.messageId;
      this.callbackById[msg.id] = callback;
      this.messageId++;
      return this.ws.send(JSON.stringify(msg));
    };

    AdminClient.prototype.close = function() {
      return this.ws.close();
    };

    return AdminClient;

  })();

  Client = (function() {

    function Client(host, port, pid) {
      var _this = this;
      this.game = void 0;
      this.messageId = 0;
      this.pid = pid;
      this.ws = new WebSocket("ws://" + host + ":" + port + "/" + this.pid, 'janyuhai-game');
      this.ws.onopen = function(ev) {
        puts('client connect');
        return _this.game = new game.Game;
      };
      this.ws.onmessage = function(ev) {
        var msg;
        msg = JSON.parse(ev.data);
        return _this.oncommand(msg);
      };
      this.ws.onclose = function(ev) {
        return puts('client close');
      };
    }

    Client.prototype.send = function(msg) {
      puts(msg);
      msg.id = this.messageId;
      this.messageId++;
      return this.ws.send(JSON.stringify(msg));
    };

    Client.prototype.oncommend = function(msg) {
      return 0;
    };

    return Client;

  })();

  uuid = function() {
    return '' + Math.floor(Math.random() * 10000);
  };

  parseParams = function() {
    var kv, param, s, _i, _len, _ref;
    param = {};
    _ref = document.location.search.substring(1).split('&');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      kv = s.split('=');
      param[kv[0]] = kv[1];
    }
    return param;
  };

  startGameHtml = function() {
    return $(document).ready(function() {
      var createClient, g, param;
      param = parseParams();
      g = void 0;
      createClient = function(pid) {
        var cli;
        window.cli = cli = new Client(param.host, param.port, pid);
        return cli.oncommand = function(msg) {
          pp(msg.t);
          switch (msg.t) {
            case 'LOGIN':
              return cli.pl = msg.idx;
            case 'INIT_GAME':
              window.g = g = new InitGame(function() {
                var ships;
                puts('finish InitGame');
                g.finalize();
                ships = g.ships;
                return cli.send({
                  t: 'INIT_GAME_R',
                  pl: cli.pl,
                  ships: ships
                });
              });
              return g.draw();
            case 'START_GAME':
              window.g = g = new Game(cli.pl);
              g.game.deserialize(msg.game);
              return g.draw();
            case 'UPDATE':
              g.game.deserialize(msg.game);
              return g.draw();
            default:
              throw "invalid msg.t=" + msg.t;
          }
        };
      };
      if (param.pid) {
        createClient(param.pid);
      } else {
        param.host || (param.host = window.location.host);
        param.port || (param.port = DEFAULT_PORT);
        window.admin = new AdminClient(param.host, param.port, function(conn) {
          var i, pids, sid;
          sid = uuid();
          pids = (function() {
            var _results;
            _results = [];
            for (i = 0; i < 2; i++) {
              _results.push(uuid());
            }
            return _results;
          })();
          conn.send({
            t: 'CREATE_SESSION',
            sid: sid,
            pids: pids
          }, function() {
            return puts("create session ok, sid=" + sid);
          });
          return createClient(pids[0]);
        });
      }
      return puts('ready');
    });
  };

  startIndexHtml = function() {
    var host, param, port, reloadSession;
    param = parseParams();
    host = param.host || location.host;
    port = param.port || DEFAULT_PORT;
    $(document).ready(function() {
      window.admin = new AdminClient(host, port, function(conn) {
        return reloadSession();
      });
      return $('#create_session').click(function(ev) {
        var i, pids;
        pids = (function() {
          var _results;
          _results = [];
          for (i = 0; i < 2; i++) {
            _results.push(uuid());
          }
          return _results;
        })();
        return window.admin.send({
          t: 'CREATE_SESSION',
          sid: uuid(),
          pids: pids
        }, function(msg) {
          return reloadSession();
        });
      });
    });
    return reloadSession = function() {
      return window.admin.send({
        t: 'SESSION_LIST'
      }, function(msg) {
        var html, i, pid, s, table, _i, _len, _len2, _ref, _ref2, _results;
        table = $('#sessions');
        table.html('<tr><th>session</th><th>players</th></tr>');
        _ref = msg.sessions;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          s = _ref[_i];
          html = "<tr><td>" + s.sid + "</td><td>";
          _ref2 = s.players;
          for (i = 0, _len2 = _ref2.length; i < _len2; i++) {
            pid = _ref2[i];
            html += '<a href="game.html?host=' + host + '&port=' + port + '&pid=' + pid + '">プレイヤー' + i + '</a>　';
          }
          html += '</td></tr>';
          _results.push(table.append($(html)));
        }
        return _results;
      });
    };
  };

  exports.Game = Game;

  exports.AdminClient = AdminClient;

  exports.Client = Client;

  exports.startGameHtml = startGameHtml;

  exports.startIndexHtml = startIndexHtml;

}).call(this);
