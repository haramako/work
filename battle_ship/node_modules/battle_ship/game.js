(function() {
  var FIELD_SIZE, FIELD_TYPE, Field, GAME_STATE, Game, infield, inner, utils;

  if (typeof module === 'undefined' && typeof exports === 'undefined') {
    eval('var exports, global; exports = {}; window["battle_ship/game"] = exports; global = window;');
  }

  utils = require('battle_ship/utils');

  FIELD_SIZE = 10;

  FIELD_TYPE = new utils.Enum(['NONE', 'FAIL', 'HIT', 'UNKNOWN']);

  GAME_STATE = new utils.Enum(['INIT', 'MAIN', 'FINISHED']);

  Game = (function() {

    function Game() {
      this.state = GAME_STATE.INIT;
      this.fields = [new Field(), new Field()];
    }

    Game.prototype.serialize = function() {
      var field, result, _i, _len, _ref;
      result = {
        fields: []
      };
      _ref = this.fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        result.fields.push({
          data: field.data,
          ships: field.ships
        });
      }
      return result;
    };

    Game.prototype.deserialize = function(json) {
      var field, i, _len, _ref, _results;
      _ref = json.fields;
      _results = [];
      for (i = 0, _len = _ref.length; i < _len; i++) {
        field = _ref[i];
        this.fields[i].data = field.data;
        _results.push(this.fields[i].ships = field.ships);
      }
      return _results;
    };

    return Game;

  })();

  Field = (function() {

    function Field() {
      var _i, _results;
      this.data = (function() {
        _results = [];
        for (var _i = 0; 0 <= FIELD_SIZE ? _i < FIELD_SIZE : _i > FIELD_SIZE; 0 <= FIELD_SIZE ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).map(function() {
        var x, _results;
        _results = [];
        for (x = 0; 0 <= FIELD_SIZE ? x < FIELD_SIZE : x > FIELD_SIZE; 0 <= FIELD_SIZE ? x++ : x--) {
          _results.push(0);
        }
        return _results;
      });
      this.ships = [];
    }

    Field.prototype.attackMulti = function(posList) {
      var pos, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = posList.length; _i < _len; _i++) {
        pos = posList[_i];
        this.singleShot(pos[1], pos[0]);
        _results.push(this.data[pos[1]][pos[0]] = FIELD_TYPE.UNKNOWN);
      }
      return _results;
    };

    Field.prototype.attack = function(x, y) {
      if (this.singleShot(x, y)) {
        return this.data[y][x] = FIELD_TYPE.HIT;
      } else {
        return this.data[y][x] = FIELD_TYPE.FAIL;
      }
    };

    Field.prototype.singleShot = function(x, y) {
      var ship, _i, _len, _ref;
      _ref = this.ships;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ship = _ref[_i];
        if (inner(ship, x, y)) return true;
      }
      return false;
    };

    return Field;

  })();

  inner = function(ship, x, y) {
    return x >= ship.x && x < ship.x + ship.w && y >= ship.y && y < ship.y + ship.h;
  };

  infield = function(ship) {
    return ship.x >= 0 && (ship.x + ship.w) <= FIELD_SIZE && ship.y >= 0 && (ship.y + ship.h) <= FIELD_SIZE;
  };

  exports.Game = Game;

  exports.GAME_STATE = GAME_STATE;

  exports.FIELD_SIZE = FIELD_SIZE;

  exports.FIELD_TYPE = FIELD_TYPE;

  exports.inner = inner;

  exports.infield = infield;

}).call(this);
