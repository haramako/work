(function() {
  var Enum, pp, prettyPrint, puts;

  if (typeof module === 'undefined' && typeof exports === 'undefined') {
    eval('var exports, global; exports = {}; window["battle_ship/utils"] = exports; global = window;');
  }

  Enum = (function() {

    function Enum(names) {
      var cur, name, pos, _i, _len;
      cur = 0;
      this._numberToName = [];
      for (_i = 0, _len = names.length; _i < _len; _i++) {
        name = names[_i];
        pos = name.indexOf('=');
        if (pos >= 0) {
          cur = parseInt(name.substring(pos + 1));
          name = name.substring(0, pos);
        }
        this[name] = cur;
        this._numberToName[cur] = name;
        cur++;
      }
      this.MAX = cur;
    }

    Enum.prototype.toString = function(num) {
      var _this = this;
      if (typeof num === 'number') {
        return this._numberToName[num];
      } else if (num.map) {
        return num.map(function(i) {
          return _this.toString(i);
        });
      } else {
        return num;
      }
    };

    Enum.prototype.exportTo = function(module, prefix) {
      var i, _ref;
      if (prefix == null) prefix = '';
      for (i = 0, _ref = this._numberToName.length; 0 <= _ref ? i < _ref : i > _ref; 0 <= _ref ? i++ : i--) {
        module[prefix + this._numberToName[i]] = i;
      }
      return this;
    };

    return Enum;

  })();

  prettyPrint = function(val, indent) {
    var k, result, str, v;
    if (indent == null) indent = '  ';
    str = JSON.stringify(val);
    if (str === void 0 || str.length < 80) {
      return str;
    } else {
      if (val.length && val.map) {
        return '[\n' + val.map(function(x) {
          return indent + prettyPrint(x, indent + '  ');
        }).join(',\n') + '\n' + indent.slice(0, -2) + ']';
      } else if (typeof val === 'object') {
        result = [];
        for (k in val) {
          v = val[k];
          result.push(indent + '"' + k + '":' + prettyPrint(v, indent + '  '));
        }
        return '{\n' + result.join(',\n') + '\n' + indent.slice(0, -2) + '}';
      } else {
        return str;
      }
    }
  };

  pp = function(val) {
    return puts(prettyPrint(val));
  };

  puts = function() {
    return console.log.apply(console, arguments);
  };

  exports.Enum = Enum;

  exports.puts = puts;

  exports.prettyPrint = prettyPrint;

  exports.pp = pp;

  global.puts = puts;

  global.pp = pp;

}).call(this);
