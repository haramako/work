# nodeとブラウザの両対応用, nodeの場合はそのままで,ブラウザの場合はwindowをexportsとする
if typeof(module) == 'undefined' and typeof(exports) == 'undefined'
    eval('var exports, global; exports = {}; window["battle_ship/game"] = exports; global = window;')

utils = require 'battle_ship/utils'

FIELD_SIZE = 10

FIELD_TYPE = new utils.Enum( ['NONE', 'FAIL', 'HIT', 'UNKNOWN'] );

GAME_STATE = new utils.Enum( ['INIT', 'MAIN', 'FINISHED'] );

class Game
    constructor: ->
        @state = GAME_STATE.INIT
        @fields = [new Field(), new Field()]

    serialize: ->
        result = {fields:[]}
        for field in @fields
            result.fields.push { data: field.data, ships: field.ships }
        result

    deserialize: (json)->
        for field,i in json.fields
            @fields[i].data = field.data
            @fields[i].ships = field.ships

class Field
    constructor: ->
        @data = [0...FIELD_SIZE].map -> (0 for x in [0...FIELD_SIZE])
        @ships = []

    attackMulti: (posList)->
        for pos in posList
            @singleShot(pos[1],pos[0])
            @data[pos[1]][pos[0]] = FIELD_TYPE.UNKNOWN

    attack: (x,y)->
        if @singleShot(x,y)
            @data[y][x] = FIELD_TYPE.HIT
        else
            @data[y][x] = FIELD_TYPE.FAIL

    singleShot: (x,y)->
        for ship in @ships
            if inner(ship,x,y)
                return true
        return false


inner = (ship,x,y)->
    return x >= ship.x and x < ship.x + ship.w and y >= ship.y and y < ship.y + ship.h

infield = (ship)->
    return ship.x >= 0 and (ship.x+ship.w)<=FIELD_SIZE and ship.y >= 0 and (ship.y+ship.h)<=FIELD_SIZE

exports.Game = Game
exports.GAME_STATE = GAME_STATE
exports.FIELD_SIZE = FIELD_SIZE
exports.FIELD_TYPE = FIELD_TYPE
exports.inner = inner
exports.infield = infield