// Generated by CoffeeScript 1.3.3
(function() {
  var Easing, Firework, GameScene, Info, game, rand,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  enchant();

  Easing = enchant.Easing;

  game = null;

  Sprite.prototype.centered = function() {
    this._element.style['margin-left'] = -this.width / 2;
    this._element.style['margin-top'] = -this.height / 2;
    return this;
  };

  EventTarget.prototype.on = EventTarget.prototype.addEventListener;

  rand = function(n) {
    return Math.random() * n;
  };

  GameScene = (function(_super) {

    __extends(GameScene, _super);

    function GameScene() {
      GameScene.__super__.constructor.apply(this, arguments);
      this.backgroundColor = '#000';
      this.count = 0;
      this.fireworks = new Group;
      this.addChild(this.fireworks);
      this.chain = 0;
    }

    GameScene.prototype.onenterframe = function() {
      var firework, info;
      this.chainCount -= 1;
      if (this.chainCount <= 0 && this.chain > 0) {
        if (this.chain > 3) {
          info = new Info();
          info.moveTo(game.width / 2, game.height / 2);
          this.addChild(info);
        }
        this.chain = 0;
      }
      this.count -= 1;
      if (this.count <= 0) {
        firework = new Firework(1.5 + rand(3));
        firework.x = rand(game.width);
        firework.y = game.height;
        this.fireworks.addChild(firework);
        return this.count = 10 + rand(10);
      }
    };

    GameScene.prototype.ontouchstart = function(e) {
      return this.ontouch(e);
    };

    GameScene.prototype.ontouchmove = function(e) {
      return this.ontouch(e);
    };

    GameScene.prototype.ontouch = function(e) {
      var obj, _i, _len, _ref, _results;
      _ref = this.fireworks.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        obj = _ref[_i];
        if (Math.abs(e.localX - obj.x) < 20 && Math.abs(e.localY - obj.y) < 20) {
          _results.push(obj.explode(0));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    GameScene.prototype.fireworkExploded = function(chain) {
      this.chainCount = 30;
      if (chain > this.chain) {
        return this.chain = chain;
      }
    };

    return GameScene;

  })(Scene);

  Firework = (function(_super) {

    __extends(Firework, _super);

    function Firework(speed) {
      Firework.__super__.constructor.call(this, 20, 30);
      this.image = game.assets['bear.gif'];
      this.centered();
      this.size = 0;
      this.speed = speed;
      this.exploded = false;
      this.touchEnabled = false;
      this.chain = 0;
    }

    Firework.prototype.onenterframe = function() {
      var obj, _i, _len, _ref;
      this.y -= this.speed;
      _ref = this.scene.fireworks.childNodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        obj = _ref[_i];
        if (obj !== this && !obj.exploded && this.within(obj, this.size)) {
          obj.explode(this.chain);
        }
      }
      if (this.y < 0) {
        return this.parentNode.removeChild(this);
      }
    };

    Firework.prototype.explode = function(chain) {
      var fire, i, _i,
        _this = this;
      if (this.exploded) {
        return;
      }
      this.chain = chain + 1;
      for (i = _i = 0; _i < 16; i = ++_i) {
        fire = new Sprite(20, 30);
        fire.image = game.assets['bear.gif'];
        fire.centered();
        fire.x = this.x;
        fire.y = this.y;
        fire.tl.tween({
          x: this.x + Math.cos(i / 16 * Math.PI * 2) * 100,
          y: this.y - Math.sin(i / 16 * Math.PI * 2) * 100,
          easing: Easing.QUAD_EASEOUT,
          opacity: 0,
          time: 30
        }).removeFromScene();
        this.scene.addChild(fire);
      }
      this.exploded = true;
      this.speed = 0;
      this.visible = false;
      this.tl.tween({
        size: 100,
        easing: Easing.QUAD_EASEOUT,
        time: 20
      }).then(function() {
        return _this.parentNode.removeChild(_this);
      });
      return this.scene.fireworkExploded(this.chain);
    };

    return Firework;

  })(Sprite);

  Info = (function(_super) {

    __extends(Info, _super);

    function Info() {
      Info.__super__.constructor.apply(this, arguments);
      this.color = '#f00';
      this.text = 'た〜まや〜!';
      this.tl.tween({
        time: 30
      }).removeFromScene();
    }

    return Info;

  })(Label);

  window.onload = function() {
    game = new Game(320, 480);
    game.preload('bear.gif');
    game.onload = function() {
      var scene;
      scene = new GameScene();
      return game.pushScene(scene);
    };
    return game.start();
  };

}).call(this);
