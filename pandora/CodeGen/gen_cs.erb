// DON'T TOUCH. THIS FILE IS AUTO GENERATED BY codegen.rb
using System;
using System.Collections.Generic;
using System.Linq;

using ToydeaCabinet;
using ToydeaCabinet.Indexer;

<%- if prog.namespace %>
namespace <%=prog.namespace%> {
<%- end -%>

public static class Keys
{
    <%- keys.each do |idx,name| -%>
    public const byte <%=name%> = <%=idx%>;
    <%- end -%>
}

<%- prog.tables.each do |t| -%>
public partial class <%=t.name%>
{
    CabinetKeyBuilder kb = new CabinetKeyBuilder();
    Cabinet c;

    public <%=t.name%>(Cabinet _c)
    {
        c = _c;
    }

    public <%=t.cls%> Find(<%=t.key_func_args%>)
    {
        var key = kb.Cleared().Store(Keys.<%=t.name%>).Store(<%=t.key[0][1]%>).Build();
        var data = c.Get(key);
        if (data.IsEmpty)
        {
            return null;
        }
        else
        {
            return <%=t.cls%>.Deserialize(data);
        }
    }

    public void Save(<%=t.cls%> v)
    {
        c.Put(<%=t.make_key_save%>, v.Serialize());
        <%- t.indices.each do |index| -%>
        c.Put(<%=index.make_key_save(t, prefix: 'v.')%>, new ByteSpan());
        <%- end -%>
    }

    <%- t.indices.each do |index| -%>
    <%- (1..index.params.size).each do |len| -%>
    public IEnumerable<<%=t.cls%>> SearchBy<%=index.funcname%>(<%= index.func_args(len)%>)
    {
        var start = <%=index.make_key(t, len, 'Start')%>;
        var end = <%=index.make_key(t, len, 'End')%>;
        var found = c.GetRange(start, end);
        byte[] buf = new byte[4];
        return found.Select(kv =>
        {
            kv.Key.WriteTo(buf, 0, <%=index.index_size%>);
            var id = MyBitConverter.Reverse(BitConverter.ToInt32(buf));
            return Find(id);
        });
    }

    <%- end -%>
    <%- end -%>
}
<%- end -%>

<%- if prog.namespace %>
}
<%- end -%>
