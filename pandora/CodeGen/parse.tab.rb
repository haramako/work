#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.0
# from Racc grammar file "".
#

require 'racc/parser.rb'
module Pandora
  module CodeGen
    class Parser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
     9,    10,    25,    26,    25,    26,     3,     4,     7,    11,
     7,    13,    14,    15,    16,    18,    19,    22,    27,    28,
    29,    30,    32,    33,    22,    18,    18,    37,    38 ]

racc_action_check = [
     3,     3,    19,    19,    24,    24,     0,     1,     2,     4,
     6,     7,     8,    13,    15,    16,    17,    18,    20,    21,
    22,    23,    25,    26,    28,    32,    33,    35,    36 ]

racc_action_pointer = [
     4,     7,     2,    -4,     9,   nil,     4,     4,     9,   nil,
   nil,   nil,   nil,     9,   nil,    10,     3,     8,    13,    -8,
     5,     5,    16,    12,    -6,    15,    16,   nil,    20,   nil,
   nil,   nil,    13,    14,   nil,    24,    25,   nil,   nil ]

racc_action_default = [
    -2,   -18,    -6,   -18,   -18,    -1,    -6,   -18,   -18,    -4,
    -5,    39,    -7,   -18,    -3,   -18,   -18,   -18,   -14,    -9,
   -18,   -15,   -18,   -18,    -9,   -18,   -18,   -13,   -14,   -17,
    -8,   -10,   -18,   -18,   -16,   -18,   -18,   -11,   -12 ]

racc_goto_table = [
    17,    20,    23,     1,     5,     2,     8,    31,    12,   nil,
   nil,    34,   nil,   nil,   nil,   nil,    35,    36 ]

racc_goto_check = [
     6,     9,     7,     1,     3,     2,     4,     7,     3,   nil,
   nil,     9,   nil,   nil,   nil,   nil,     6,     6 ]

racc_goto_pointer = [
   nil,     3,     5,     2,     3,   nil,   -16,   -17,   nil,   -17,
   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,    24,   nil,
    21 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 16, :_reduce_1,
  0, 17, :_reduce_none,
  3, 17, :_reduce_3,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  0, 18, :_reduce_6,
  2, 18, :_reduce_7,
  8, 20, :_reduce_8,
  0, 22, :_reduce_9,
  2, 22, :_reduce_10,
  4, 23, :_reduce_11,
  4, 23, :_reduce_12,
  3, 21, :_reduce_13,
  0, 24, :_reduce_14,
  1, 24, :_reduce_15,
  3, 24, :_reduce_16,
  2, 25, :_reduce_17 ]

racc_reduce_n = 18

racc_shift_n = 39

racc_token_table = {
  false => 0,
  :error => 1,
  "namespace" => 2,
  ";" => 3,
  :IDENT => 4,
  :NAMESPACE => 5,
  "table" => 6,
  :NUMBER => 7,
  "{" => 8,
  "}" => 9,
  "index" => 10,
  :KEY => 11,
  "(" => 12,
  ")" => 13,
  "," => 14 }

racc_nt_base = 15

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"namespace\"",
  "\";\"",
  "IDENT",
  "NAMESPACE",
  "\"table\"",
  "NUMBER",
  "\"{\"",
  "\"}\"",
  "\"index\"",
  "KEY",
  "\"(\"",
  "\")\"",
  "\",\"",
  "$start",
  "prog",
  "namespace_decl",
  "table_decls",
  "namespace_name",
  "table_decl",
  "params",
  "index_decls",
  "index_decl",
  "param_list",
  "param_element" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parse.y', 3)
  def _reduce_1(val, _values, result)
     result = Prog.new(val[0], val[1])
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'parse.y', 5)
  def _reduce_3(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parse.y', 9)
  def _reduce_6(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 10)
  def _reduce_7(val, _values, result)
     result = [val[0]].concat(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 12)
  def _reduce_8(val, _values, result)
     result = Table.new(val[1], val[2], val[3], val[4], val[6])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 14)
  def _reduce_9(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 15)
  def _reduce_10(val, _values, result)
     result = [val[0]].concat(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 17)
  def _reduce_11(val, _values, result)
     result = Index.new(val[1], val[2], [])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 18)
  def _reduce_12(val, _values, result)
     result = Index.new(val[1], val[2], ['unique'])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 20)
  def _reduce_13(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 22)
  def _reduce_14(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 23)
  def _reduce_15(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 24)
  def _reduce_16(val, _values, result)
     result = [val[0]].concat(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 26)
  def _reduce_17(val, _values, result)
     result = Param.new(Type.new(val[0]), val[1])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
  end   # module CodeGen
end   # module Pandora
