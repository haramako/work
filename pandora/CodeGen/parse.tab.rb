#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.0
# from Racc grammar file "".
#

require 'racc/parser.rb'
module Pandora
  module CodeGen
    class Parser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
     7,     7,    10,    11,     8,     8,     3,     4,    12,    14,
    15,    16,    17,    18,    20,    22,    24,    27,    22,    29,
    30,    33,    34,    35,    36,    37,    33,    39,    27,    20,
    42 ]

racc_action_check = [
     2,     6,     3,     3,     2,     6,     0,     1,     4,     7,
     8,     9,    14,    15,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    29,    31,    32,    33,    35,    39,
    41 ]

racc_action_pointer = [
     4,     7,    -6,    -2,     8,   nil,    -5,     2,     6,     8,
   nil,   nil,   nil,   nil,     8,     5,   nil,     2,    11,     8,
    13,    14,    15,    11,    10,     9,     9,   nil,   nil,    21,
   nil,    16,    15,    20,   nil,    24,   nil,   nil,   nil,    17,
   nil,    27,   nil ]

racc_action_default = [
    -2,   -21,    -9,   -21,   -21,    -1,    -9,   -21,   -21,   -21,
    -4,    -5,    43,   -10,   -21,   -21,    -3,   -21,    -6,   -21,
   -17,    -6,   -21,   -21,   -13,   -21,   -18,   -20,    -7,   -21,
   -12,   -21,   -13,   -21,   -16,   -17,    -8,   -11,   -14,   -21,
   -19,   -21,   -15 ]

racc_goto_table = [
    19,    25,    31,     5,     1,    23,     2,    13,    28,     9,
    38,   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,
   nil,   nil,    41 ]

racc_goto_check = [
     8,    11,     9,     3,     1,     5,     2,     3,     5,     4,
     9,   nil,   nil,   nil,   nil,   nil,    11,   nil,   nil,   nil,
   nil,   nil,     8 ]

racc_goto_pointer = [
   nil,     4,     6,     1,     6,   -13,   nil,   nil,   -17,   -22,
   nil,   -19,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,    21,     6,   nil,   nil,
    32,   nil,    26 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 16, :_reduce_1,
  0, 17, :_reduce_none,
  3, 17, :_reduce_3,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  0, 20, :_reduce_6,
  2, 20, :_reduce_7,
  3, 21, :_reduce_8,
  0, 18, :_reduce_9,
  2, 18, :_reduce_10,
  7, 22, :_reduce_11,
  5, 22, :_reduce_12,
  0, 24, :_reduce_13,
  2, 24, :_reduce_14,
  4, 25, :_reduce_15,
  3, 23, :_reduce_16,
  0, 26, :_reduce_17,
  1, 26, :_reduce_18,
  3, 26, :_reduce_19,
  1, 27, :_reduce_none ]

racc_reduce_n = 21

racc_shift_n = 43

racc_token_table = {
  false => 0,
  :error => 1,
  "namespace" => 2,
  ";" => 3,
  :IDENT => 4,
  :NAMESPACE => 5,
  "table" => 6,
  :NUMBER => 7,
  "{" => 8,
  "}" => 9,
  "object" => 10,
  "index" => 11,
  "(" => 12,
  ")" => 13,
  "," => 14 }

racc_nt_base = 15

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"namespace\"",
  "\";\"",
  "IDENT",
  "NAMESPACE",
  "\"table\"",
  "NUMBER",
  "\"{\"",
  "\"}\"",
  "\"object\"",
  "\"index\"",
  "\"(\"",
  "\")\"",
  "\",\"",
  "$start",
  "default",
  "namespace_decl",
  "table_decls",
  "namespace_name",
  "field_decls",
  "field_decl",
  "table_decl",
  "key_list",
  "index_decls",
  "index_decl",
  "keys",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parse.y', 3)
  def _reduce_1(val, _values, result)
     result = AST.new(val[0], val[1])
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'parse.y', 5)
  def _reduce_3(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parse.y', 10)
  def _reduce_6(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 11)
  def _reduce_7(val, _values, result)
     result = list(val)
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 13)
  def _reduce_8(val, _values, result)
     result = Field.new(Type.new(val[0]), val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 16)
  def _reduce_9(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 17)
  def _reduce_10(val, _values, result)
     result = list(val)
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 20)
  def _reduce_11(val, _values, result)
     result = Table.new(val[1], val[2], val[3], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 21)
  def _reduce_12(val, _values, result)
     result = ObjectDecl.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 23)
  def _reduce_13(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 24)
  def _reduce_14(val, _values, result)
     result = list(val)
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 26)
  def _reduce_15(val, _values, result)
     result = Index.new(val[1], val[2], [])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 28)
  def _reduce_16(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 30)
  def _reduce_17(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 31)
  def _reduce_18(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 32)
  def _reduce_19(val, _values, result)
     result = list2(val)
    result
  end
.,.,

# reduce 20 omitted

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
  end   # module CodeGen
end   # module Pandora
