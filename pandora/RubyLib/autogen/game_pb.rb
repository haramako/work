# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: game.proto

require 'google/protobuf'

require 'master_pb'
require 'game_base_pb'
require 'game_dr2_pb'
Google::Protobuf::DescriptorPool.generated_pool.build do
  add_message "Game.RuntimeError" do
    optional :reason, :string, 1
  end
  add_message "Game.TerminateRequest" do
    optional :reason, :string, 1
  end
  add_message "Game.Wait" do
    optional :wait_type, :int32, 1
  end
  add_message "Game.WaitFinishRequest" do
    optional :wait_type, :int32, 2
  end
  add_message "Game.WaitForAck" do
  end
  add_message "Game.WaitForAckRequest" do
  end
  add_message "Game.LoadConfig" do
    optional :commit_id, :string, 1
  end
  add_message "Game.FileLoadAsync" do
    optional :func_name, :string, 1
    optional :filename, :string, 2
    optional :type, :int32, 3
    optional :if_asset_bundle, :int32, 4
    optional :f_no, :int32, 5
    optional :address, :int64, 6
  end
  add_message "Game.FileLoadAsyncResult" do
  end
  add_message "Game.FileLoadCheck" do
    optional :f_no, :int32, 1
  end
  add_message "Game.FileLoadCheckResult" do
    optional :loaded, :bool, 1
  end
  add_message "Game.FileLoadEnd" do
    optional :f_no, :int32, 6
  end
  add_message "Game.FileLoadEndResult" do
  end
  add_message "Game.FileLoadAddress" do
    optional :f_no, :int32, 1
    optional :address, :int64, 2
  end
  add_message "Game.FileLoadAddressResult" do
  end
  add_message "Game.MemPacAddrGet" do
    optional :parent_address, :int64, 1
    optional :address, :int64, 2
    optional :pack_index, :int32, 3
  end
  add_message "Game.MemPacAddrGetResult" do
    optional :error, :bool, 1
  end
  add_message "Game.GimAddrLoad" do
    optional :address, :int64, 1
    optional :tex_no, :int32, 2
  end
  add_message "Game.GimAddrLoadResult" do
    optional :error, :bool, 3
    optional :width, :int32, 1
    optional :height, :int32, 2
  end
  add_message "Game.LoadModel" do
    optional :address, :int64, 1
    optional :model_no, :int32, 2
  end
  add_message "Game.LoadModelResult" do
  end
  add_message "Game.GmoLoad" do
    optional :no, :int32, 1
    optional :file_no, :int32, 2
    optional :is_offscreen, :bool, 3
  end
  add_message "Game.GmoLoadResult" do
    optional :error, :bool, 1
  end
  add_message "Game.GmoUnload" do
    optional :no, :int32, 1
  end
  add_message "Game.GmoUnloadResult" do
    optional :error, :bool, 1
  end
  add_message "Game.LoadConfigResponse" do
    optional :is_dr1, :bool, 6
    optional :touch_enabled, :bool, 7
    repeated :file_mappings, :message, 1, "Game.LoadConfigResponse.FileMapping"
    optional :hide_pad_ui, :bool, 2
    optional :kotodama_speed_font, :float, 3
    optional :kotodama_speed_bullet, :float, 4
    optional :screen_width, :int32, 8
    optional :screen_height, :int32, 9
    optional :device_screen_width, :int32, 10
    optional :device_screen_height, :int32, 11
    optional :lang, :enum, 12, "Master.LangType"
    repeated :i18n_message, :message, 13, "Master.I18nMessage"
    repeated :glyph_infos, :message, 14, "Game.LoadConfigResponse.FontGlyphInfo"
    optional :debug_start_enabled, :bool, 15
    optional :debug_start_chapter, :int32, 16
    optional :debug_start_scene, :int32, 17
    optional :debug_start_subscene, :int32, 18
    optional :voice_lang, :enum, 19, "Master.LangType"
    optional :notch_size, :int32, 20
  end
  add_message "Game.LoadConfigResponse.FileMapping" do
    optional :filename, :string, 1
    optional :local_path, :string, 2
  end
  add_message "Game.LoadConfigResponse.FontGlyphInfo" do
    repeated :glyphs, :message, 1, "Game.LoadConfigResponse.GlyphInfo"
  end
  add_message "Game.LoadConfigResponse.GlyphInfo" do
    optional :codepoint, :int32, 1
    optional :width, :int32, 2
    optional :height, :int32, 3
    optional :left_pad, :int32, 4
    optional :right_pad, :int32, 5
  end
  add_message "Game.DeviceInfo" do
    optional :ScreenWidth, :int32, 1
    optional :ScreenHeight, :int32, 2
  end
  add_message "Game.InputData" do
    optional :type, :enum, 1, "Game.InputData.Type"
    optional :val_list, :bytes, 2
  end
  add_enum "Game.InputData.Type" do
    value :Unknown, 0
    value :MouseButtonDown, 3
    value :MouseButtonUp, 4
    value :MouseWheel, 5
  end
  add_message "Game.InputPadData" do
    optional :left_pad_axis_x, :float, 1
    optional :left_pad_axis_y, :float, 2
    optional :right_pad_axis_x, :float, 3
    optional :right_pad_axis_y, :float, 4
    optional :pad_up, :bool, 5
    optional :pad_down, :bool, 6
    optional :pad_left, :bool, 7
    optional :pad_right, :bool, 8
  end
  add_message "Game.InputMouseData" do
    optional :x, :float, 1
    optional :y, :float, 2
  end
  add_message "Game.UpdatePlayEndAudio" do
    optional :type, :enum, 1, "Game.UpdatePlayEndAudio.FileType"
    optional :idx_no, :int32, 2
    optional :play_no, :int32, 3
  end
  add_enum "Game.UpdatePlayEndAudio.FileType" do
    value :Bgm, 0
    value :Voice, 1
    value :Se, 2
  end
  add_message "Game.CameraRequest" do
    optional :need_update, :bool, 1
    optional :x, :float, 2
    optional :y, :float, 3
  end
  add_message "Game.FreeMessage" do
    optional :name, :string, 1
    optional :message, :string, 2
  end
  add_message "Game.FrameInfo" do
    optional :name, :string, 1
    optional :type, :enum, 2, "Game.FrameInfo.Type"
    optional :frameNo, :int32, 3
  end
  add_enum "Game.FrameInfo.Type" do
    value :Unknown, 0
    value :FrameStart, 1
    value :FrameEnd, 2
  end
  add_message "Game.ScriptInfo" do
    optional :SelectMax, :int32, 1
    optional :SelectModeChk, :int32, 2
    optional :SelectTime, :int32, 3
    optional :SelectMode, :int32, 4
    optional :SelectPos, :int32, 5
    optional :SelectXPos, :int32, 6
    optional :SelectYPos, :int32, 7
    optional :Select_No, :int32, 8
    repeated :select_text_list, :message, 9, "Game.ScriptInfo.SelectText"
  end
  add_message "Game.ScriptInfo.SelectText" do
    repeated :name_list, :int32, 1
    optional :selected, :bool, 2
  end
  add_message "Game.SpriteList" do
    optional :kind, :int32, 1
    repeated :sprites, :message, 2, "Game.SpriteList.SpriteInfo"
    optional :sprite_count, :int32, 3
  end
  add_message "Game.SpriteList.SpriteInfo" do
    repeated :pos, :float, 1
    repeated :color, :int32, 2
    optional :alpha_mode, :enum, 3, "Game.PspBlendMode"
    optional :spriteType, :enum, 4, "Game.SpriteList.SpriteType"
    optional :rotation, :float, 5
    optional :no, :int32, 6
    optional :tex_file_no, :int32, 7
    optional :alpha, :int32, 8
    optional :opacity_mode, :int32, 9
    optional :pri, :int32, 10
    optional :disp, :bool, 11
    optional :filter_x, :bool, 12
    optional :filter_y, :bool, 13
    optional :triangle, :bool, 14
    optional :code, :int32, 15
    optional :fontType, :int32, 16
    optional :fontWaku, :enum, 17, "Game.SpriteList.FontTypeWaku"
    optional :fontOutlineThickness, :int32, 18
    repeated :fontOutlineColor, :int32, 19
    optional :palType, :int32, 20
    optional :is_flash_sprite, :bool, 21
    optional :is_right, :bool, 22
    optional :is_center, :bool, 23
    optional :is_break_poly, :bool, 24
    optional :is_poly, :bool, 25
    optional :is_screen_shot, :bool, 26
    optional :is_fullscreen, :bool, 27
    optional :is_right_patch, :bool, 28
  end
  add_enum "Game.SpriteList.SpriteType" do
    value :SpriteNormal, 0
    value :SpriteFont, 1
    value :SpriteCapture, 2
  end
  add_enum "Game.SpriteList.FontTypeWaku" do
    value :WAKU_NON, 0
    value :WAKU_B4, 1
    value :WAKU_B8, 2
    value :WAKU_ZOOM, 3
    value :WAKU_SHADOW, 4
    value :WAKU_WAKU, 9
  end
  add_message "Game.AudioInfo" do
    optional :type, :enum, 1, "Game.AudioInfo.FileType"
    optional :idx_no, :int32, 2
    optional :mode, :enum, 3, "Game.AudioInfo.Mode"
    optional :play_no, :int32, 4
    optional :play_no2, :int32, 5
    optional :volume, :float, 6
    optional :loop, :bool, 7
  end
  add_enum "Game.AudioInfo.FileType" do
    value :Bgm, 0
    value :Voice, 1
    value :Se, 2
  end
  add_enum "Game.AudioInfo.Mode" do
    value :ModeNon, 0
    value :ModeExecLoad, 1
    value :ModeExecPlay, 2
    value :ModeExecReplay, 3
    value :ModeExecStop, 4
    value :ModeExecFadeOut, 5
    value :ModeExecCrossFade, 6
    value :ModeExecVolume, 7
    value :ModeExecMasterVolume, 8
    value :ModeExecPause, 9
    value :ModeExecPauseEnd, 10
    value :ModeLoad, 11
    value :ModePlay, 12
    value :ModePause, 13
  end
  add_message "Game.AudioSeBankInfo" do
    optional :play_no1, :int32, 1
    optional :play_no2, :int32, 2
  end
  add_message "Game.AudioMixerInfo" do
    optional :pitch, :float, 1
    repeated :volume, :float, 2
  end
  add_message "Game.UpdateAudioBgmPlayInfo" do
    optional :isPlaying, :bool, 1
  end
  add_message "Game.UpdateAudioBgmVisualizerInfo" do
    optional :isBass, :bool, 1
    optional :level0, :int32, 2
    optional :level1, :int32, 3
    optional :level2, :int32, 4
    optional :level3, :int32, 5
    optional :level4, :int32, 6
    optional :level5, :int32, 7
    optional :level6, :int32, 8
  end
  add_message "Game.VideoInfo" do
    optional :no, :int32, 1
    optional :file_path, :string, 2
    optional :volume, :float, 3
    optional :capture_flag, :bool, 4
  end
  add_message "Game.UnloadModel" do
    optional :file_no, :int32, 1
  end
  add_message "Game.UnloadTexture" do
    optional :tex_no, :int32, 1
  end
  add_message "Game.UnloadTextureResult" do
    optional :error, :bool, 1
  end
  add_message "Game.CameraInfo" do
    optional :name, :string, 1
    optional :mode, :enum, 2, "Game.CameraInfo.Mode"
    repeated :camera_list, :float, 3
    optional :index, :int32, 4
  end
  add_enum "Game.CameraInfo.Mode" do
    value :CameraModeRoll, 0
    value :CameraModePos, 1
    value :CameraModePosRot, 2
  end
  add_enum "Game.CameraInfo.CameraList" do
    value :Fovy, 0
    value :PosX, 1
    value :PosY, 2
    value :PosZ, 3
    value :RotX, 4
    value :RotY, 5
    value :RotZ, 6
    value :Len, 7
    value :Pos2X, 8
    value :Pos2Y, 9
    value :Pos2Z, 10
    value :UpposX, 11
    value :UpposY, 12
    value :UpposZ, 13
  end
  add_message "Game.CameraModeInfo" do
    optional :camera_type, :enum, 1, "Game.CameraModeInfo.CameraType"
    optional :camera_clear_flags, :enum, 2, "Game.CameraModeInfo.CameraClearFlags"
    repeated :back_ground_color, :int32, 3
  end
  add_enum "Game.CameraModeInfo.CameraType" do
    value :CameraType2D, 0
  end
  add_enum "Game.CameraModeInfo.CameraClearFlags" do
    value :CameraClearFlagsNothing, 0
    value :CameraClearFlagsSolidColor, 1
  end
  add_message "Game.SendCommand" do
    repeated :command, :message, 1, "Game.Command"
  end
  add_message "Game.Command" do
    optional :id, :int32, 1
    optional :enabled, :bool, 2
  end
  add_message "Game.SelectMenuRequest" do
    optional :mode, :enum, 9, "Game.SelectMenuRequest.Mode"
    optional :selected, :int32, 1
    optional :chapter, :int32, 2
    optional :scene, :int32, 3
    optional :subscene, :int32, 4
    optional :menu_num, :int32, 5
    optional :minigame_game_mode, :int32, 6
    optional :minigame_game_type, :int32, 7
    optional :minigame_game_stage, :int32, 8
  end
  add_enum "Game.SelectMenuRequest.Mode" do
    value :SelectedDeprecated, 0
    value :Scene, 1
    value :MenuNum, 2
  end
  add_message "Game.MapRequest" do
    optional :IsOpen, :bool, 1
  end
  add_message "Game.PbRequest" do
    optional :Mode, :enum, 2, "Game.PbRequest.PbMode"
  end
  add_enum "Game.PbRequest.PbMode" do
    value :Top, 0
    value :Map, 1
    value :Kotodama, 2
    value :Item, 3
    value :Report, 4
    value :Regulation, 5
    value :System, 6
    value :Save, 7
    value :Load, 8
    value :Backlog, 9
    value :Option, 10
    value :TitleBack, 11
    value :Size, 12
    value :SelectKotodama, 13
    value :SelectItem, 14
    value :Loading, 15
    value :Close, 16
  end
  add_message "Game.SelectedModelRequest" do
    optional :id, :int32, 1
    optional :color, :int32, 2
  end
  add_message "Game.DrawFrame" do
    repeated :gmos, :message, 1, "Game.DrawFrame.GmoInfo"
    repeated :fonts, :message, 2, "Game.DrawFrame.FontInfo"
    repeated :font_controls, :message, 3, "Game.DrawFrame.FontControlInfo"
    optional :font_control_count, :int32, 6
    repeated :billboards, :message, 4, "Game.DrawFrame.BillboardInfo"
    repeated :poly_infos, :message, 7, "Game.DrawFrame.PolyInfo"
    optional :camera_display_split, :bool, 8
    optional :camera_game_scissor_line_pos_x, :int32, 9
  end
  add_message "Game.DrawFrame.GmoInfo" do
    optional :gmo_no, :int32, 48
    optional :disp, :bool, 1
    optional :copy, :bool, 2
    optional :sort_mode, :int32, 3
    optional :fog, :bool, 4
    optional :calling, :bool, 5
    optional :pth, :bool, 6
    optional :tex, :bool, 7
    optional :light, :bool, 8
    optional :no_light, :bool, 9
    optional :antialias, :int32, 10
    optional :edge, :int32, 11
    optional :zsort, :int32, 12
    optional :offscr_type, :int32, 13
    optional :off_color, :message, 14, "Game.DrsColor"
    optional :eazy_shadow, :int32, 15
    optional :eazy_shadow_f, :int32, 16
    optional :hdr_type, :int32, 17
    optional :alpha_mode, :int32, 18
    optional :alpha_mode_set, :int32, 19
    optional :alpha, :int32, 20
    optional :rot_type, :enum, 21, "Game.DrawFrame.RotType"
    optional :edram, :int32, 22
    optional :projector, :int32, 23
    optional :col_disp, :int32, 24
    optional :back_shadow, :int32, 25
    optional :anime_sync, :int32, 26
    optional :col, :message, 27, "Game.DrsColor"
    optional :edge_col, :message, 28, "Game.DrsColor"
    optional :anime, :bool, 29
    optional :anime_subframe, :int32, 30
    optional :disp_group, :int32, 31
    optional :disp_group_check, :int32, 32
    optional :file_no, :int32, 33
    optional :tex_no, :int32, 34
    optional :free_frame, :int32, 35
    optional :ani_sc, :int32, 36
    optional :ani_sc_max, :int32, 37
    optional :pri, :int32, 38
    optional :group_pri, :int32, 39
    optional :pos, :message, 40, "Game.DrsVector3"
    optional :rot, :message, 41, "Game.DrsVector3"
    optional :scale, :message, 42, "Game.DrsVector3"
    optional :matrix, :message, 43, "Game.DrsMatrix4"
    optional :ani_spd, :float, 44
    optional :sissor_off, :int32, 45
    optional :enum_sort, :int32, 46
    optional :data_no, :int32, 47
  end
  add_message "Game.DrawFrame.FontInfo" do
    optional :no, :int32, 1
    optional :disp, :enum, 2, "Game.DrawFrame.FontDisp"
    optional :c_no, :int32, 3
    optional :type, :int32, 4
    optional :w, :int32, 5
    optional :h, :int32, 6
    optional :size_x, :float, 28
    optional :size_y, :float, 29
    optional :u_ofset, :int32, 7
    optional :v_ofset, :int32, 8
    optional :w_ofset, :int32, 9
    optional :h_ofset, :int32, 10
    optional :pri, :int32, 11
    optional :alpha, :int32, 12
    optional :alpha2, :int32, 13
    optional :fade, :int32, 14
    optional :fade_sp, :int32, 15
    optional :col_rot_type, :int32, 16
    optional :sccisor_flg, :int32, 17
    optional :u, :int32, 18
    optional :v, :int32, 19
    repeated :xy, :float, 20
    optional :pos, :message, 21, "Game.DrsVector2"
    optional :rot, :float, 22
    optional :scale, :message, 23, "Game.DrsVector2"
    optional :sccisor_b, :message, 24, "Game.DrsVector2"
    optional :sccisor_e, :message, 25, "Game.DrsVector2"
    optional :code, :int32, 26
    optional :bmp_no, :int32, 27
  end
  add_message "Game.DrawFrame.FontControlInfo" do
    optional :no, :int32, 15
    optional :fade_speed, :int32, 1
    optional :alpha, :int32, 2
    optional :disp_flag, :int32, 3
    optional :sprite_flag, :bool, 4
    optional :hit_flag, :int32, 5
    optional :interface_flag, :bool, 12
    optional :sprite_pri_mode, :int32, 14
    optional :sccisor_flg, :int32, 13
    optional :offset_pos, :message, 6, "Game.DrsVector2"
    optional :sprite_pri, :int32, 7
    optional :pos, :message, 8, "Game.DrsVector3"
    optional :rot, :message, 9, "Game.DrsVector3"
    optional :sccisor_b, :message, 10, "Game.DrsVector2"
    optional :sccisor_e, :message, 11, "Game.DrsVector2"
  end
  add_message "Game.DrawFrame.BillboardInfo" do
    repeated :pos4, :float, 1
    optional :pos, :message, 2, "Game.DrsVector3"
    optional :vrot, :message, 3, "Game.DrsVector3"
    optional :scale, :message, 4, "Game.DrsVector3"
    optional :matrix, :message, 5, "Game.DrsMatrix4"
    optional :alpha_mode, :enum, 6, "Game.PspBlendMode"
    optional :no, :int32, 7
    optional :spr_no, :int32, 8
    optional :tex_file_no, :int32, 9
    optional :disp, :int32, 10
    optional :alpha, :int32, 11
    optional :attr, :int32, 12
    optional :shad_type, :int32, 13
    optional :bill_enable, :int32, 14
    optional :pri, :int32, 15
    optional :offscr, :int32, 33
    optional :col, :message, 16, "Game.DrsColor"
    optional :u, :float, 17
    optional :v, :float, 18
    optional :w, :float, 19
    optional :h, :float, 20
    optional :zoomx, :float, 21
    optional :zoomy, :float, 22
    optional :cx, :float, 23
    optional :cy, :float, 24
    optional :rot, :float, 25
    optional :pos4_flag, :bool, 26
    optional :cull, :bool, 27
    optional :pos_flag, :bool, 28
    optional :rot_flag, :bool, 29
    optional :is_sprite, :bool, 30
    optional :is_3d_sprite, :bool, 31
    optional :is_3d_interface, :bool, 32
  end
  add_message "Game.DrawFrame.VtxDat" do
    optional :ib, :bytes, 1
    optional :vb, :bytes, 2
    optional :ib_num, :int32, 3
    optional :vb_num, :int32, 4
  end
  add_message "Game.DrawFrame.PolyInfo" do
    optional :no, :int32, 1
    optional :type, :enum, 16, "Game.DrawFrame.PolyType"
    optional :disp, :bool, 2
    optional :fog, :bool, 3
    optional :calling, :bool, 4
    optional :depth, :bool, 5
    optional :light, :bool, 6
    optional :zsort, :bool, 7
    optional :offscr_type, :int32, 8
    optional :offscr_color, :message, 9, "Game.DrsColor"
    optional :alpha_mode, :enum, 22, "Game.PspBlendMode"
    optional :alpha, :int32, 21
    optional :color, :message, 10, "Game.DrsColor"
    optional :tex_no, :int32, 18
    optional :pri, :int32, 11
    optional :pos, :message, 12, "Game.DrsVector3"
    optional :rot, :message, 13, "Game.DrsVector3"
    optional :scale, :message, 14, "Game.DrsVector3"
    optional :disp_tex_alpha, :bool, 19
    repeated :points, :message, 15, "Game.DrsVector3"
    optional :vtx_poly, :message, 17, "Game.DrawFrame.VtxDat"
  end
  add_enum "Game.DrawFrame.RotType" do
    value :Yxz, 0
    value :Xyz, 1
    value :Zyx, 2
    value :Billboard, 3
    value :Billboard2, 4
    value :Matrix, 5
  end
  add_enum "Game.DrawFrame.FontTypeWaku" do
    value :WAKU_NON, 0
    value :WAKU_B4, 1
    value :WAKU_B8, 2
    value :WAKU_ZOOM, 3
    value :WAKU_SHADOW, 4
    value :WAKU_WAKU, 9
  end
  add_enum "Game.DrawFrame.FontDisp" do
    value :Off, 0
    value :On, 1
    value :FontClear, 2
  end
  add_enum "Game.DrawFrame.PolyType" do
    value :Vec, 0
    value :Line, 1
    value :LineSp, 2
    value :Tex, 3
    value :TexCol, 4
  end
  add_message "Game.FontTypeInfos" do
    repeated :font_types, :message, 1, "Game.FontTypeInfos.FontTypeInfo"
  end
  add_message "Game.FontTypeInfos.FontTypeInfo" do
    optional :no, :int32, 1
    optional :size, :int32, 2
    optional :waku, :int32, 3
    optional :waku_s, :int32, 4
    optional :zoom, :int32, 5
    optional :f_col1, :int32, 6
    optional :f_col2, :int32, 7
    optional :b_col, :int32, 8
  end
  add_message "Game.OverlayInfo" do
    optional :disp, :bool, 1
    optional :alpha_mode, :int32, 2
    repeated :color_list, :int32, 3
  end
  add_message "Game.FadeInfo" do
    optional :disp, :bool, 1
    optional :sync, :bool, 2
    optional :capture, :bool, 3
    optional :mode, :enum, 4, "Game.FadeInfo.FadeMode"
    optional :type, :enum, 5, "Game.FadeInfo.FadeType"
    optional :tex_no, :int32, 6
    optional :packet_no, :int32, 7
    optional :color, :int32, 8
    optional :cnt_max, :float, 9
    optional :final_disp, :bool, 10
    optional :final_color, :int32, 11
  end
  add_enum "Game.FadeInfo.FadeMode" do
    value :FADE_MODE_IN, 0
    value :FADE_MODE_OUT, 1
  end
  add_enum "Game.FadeInfo.FadeType" do
    value :FADE_TYPE_NON, 0
    value :FADE_TYPE_NORMAL, 1
    value :FADE_TYPE_NORMAL_WHITE, 2
    value :FADE_TYPE_NORMAL_RED, 3
    value :FADE_TYPE_CROSS_IN, 4
    value :FADE_TYPE_CAPTURE, 5
  end
  add_message "Game.CreateScreenCapture" do
    optional :texNo, :int32, 1
  end
  add_message "Game.CreateScreenCaptureResult" do
    optional :width, :int32, 1
    optional :height, :int32, 2
  end
  add_message "Game.ScreenCapture" do
    optional :texNo, :int32, 1
  end
  add_message "Game.HsScriptData" do
    optional :menu_mode_no, :int32, 1
    optional :saiban_mode, :int32, 2
    optional :is_re_action_talk, :bool, 3
    optional :re_action_mode, :int32, 4
    repeated :reaction_talk_values, :message, 5, "Game.ReactionTalkValues"
    repeated :re_action_selected, :bool, 6
    optional :result_mode, :int32, 7
    repeated :spf_flg, :int32, 8
    repeated :prof_level, :int32, 9
    optional :status, :int32, 15
    optional :main_filname0, :int32, 16
    optional :main_filname1, :int32, 17
    optional :main_filname2, :int32, 18
    optional :reAction_nowMax, :int32, 19
    repeated :wak_data, :int32, 20
    repeated :flg_data, :int32, 21
    repeated :map_flg_data, :int32, 22
    optional :map_floor_jump_flg, :int32, 23
    optional :kotodama_num_get, :int32, 24
    repeated :flash_anim_ctr, :int32, 25
    optional :dead_flag, :int32, 26
    repeated :friendship_gallery_flag, :int32, 27
    repeated :super_art_gallery_flag, :int32, 28
  end
  add_message "Game.Dr2HsScriptData" do
    repeated :spf_flg, :int32, 8
    optional :status, :int32, 15
    optional :main_filname0, :int32, 16
    optional :main_filname1, :int32, 17
    optional :main_filname2, :int32, 18
    repeated :wak_data, :int32, 20
    repeated :flg_data, :int32, 21
    repeated :map_flg_data, :int32, 22
    optional :map_floor_jump_flg, :int32, 23
    optional :kotodama_num_get, :int32, 24
    repeated :flash_anim_ctr, :int32, 25
    optional :dead_flag, :int32, 26
    repeated :friendship_gallery_flag, :int32, 27
    repeated :super_art_gallery_flag, :int32, 28
    repeated :rule_page_open_flg, :int32, 29
    repeated :flash_event_no, :int32, 30
  end
  add_message "Game.HsBgModel" do
    optional :mode, :enum, 1, "Game.HsBgModel.Mode"
    optional :step, :int32, 2
    optional :cnt, :int32, 3
  end
  add_enum "Game.HsBgModel.Mode" do
    value :Non, 0
    value :Start, 1
    value :Disp, 2
    value :Start2, 3
    value :StartBg, 4
    value :StartShadow, 5
    value :StartFade, 6
    value :StartMotion, 7
  end
  add_message "Game.ResultInfo" do
    optional :navigation_positon_left_x, :float, 1
    optional :navigation_positon_right_x, :float, 2
    optional :is_hiscore, :bool, 3
  end
  add_message "Game.ReactionTalkValues" do
    repeated :name, :int32, 1
  end
  add_message "Game.HsScriptCtr" do
    optional :menu_state, :int32, 1
    optional :start_menu_no, :int32, 2
    optional :briefing_mode, :int32, 3
    optional :briefing_state, :int32, 4
    optional :select_mode, :int32, 5
    optional :choice, :message, 6, "Game.Choice"
    optional :show_curtain, :bool, 7
    optional :survival_mode, :int32, 8
    optional :nico_silencer_flg, :bool, 9
    optional :game_mode, :int32, 11
    repeated :flash_anim_ctr, :int32, 12
    optional :nico_memory_flg, :bool, 13
    optional :dr2_menu_state, :int32, 14
    repeated :flash_event_no, :int32, 15
    repeated :flash_event_label_bak, :int32, 16
  end
  add_message "Game.HsTansaku" do
    optional :initialized, :bool, 1
    optional :mode, :int32, 2
    optional :sync, :int32, 3
  end
  add_message "Game.Choice" do
    optional :mode, :int32, 1
    repeated :values, :message, 2, "Game.Choice.Value"
  end
  add_message "Game.Choice.Value" do
    repeated :name, :int32, 1
    optional :selected, :bool, 2
  end
  add_message "Game.HsTrial" do
    optional :mode, :enum, 1, "Game.HsTrial.Mode"
    optional :proc, :int32, 2
    optional :blt_mode, :int32, 3
    optional :blt_prog, :int32, 4
    optional :blt_select_no, :int32, 6
    repeated :blt_memory_text, :int32, 7
    optional :pause_flag, :bool, 10
    optional :is_kokoronpa, :bool, 11
  end
  add_message "Game.HsTrial.TrialEffectTimeAdd" do
    optional :sec, :int32, 1
    optional :vecter, :message, 2, "Game.DrsVector2"
  end
  add_enum "Game.HsTrial.Mode" do
    value :ModeNon, 0
    value :ModeDataLoad, 1
    value :ModeNormalIn, 2
    value :ModeNormalScript, 3
    value :ModeNormalOut, 4
    value :ModeNormalSimpleWindowIn, 5
    value :ModeNormalSimpleWindowOut, 6
    value :ModeNormalFaceClose, 7
    value :ModeNormalFaceCloseSimple, 8
    value :ModeNormalLoad, 9
    value :ModeGironIn, 10
    value :ModeGironScript, 11
    value :ModeGironOut, 12
    value :ModeGironBreak, 13
    value :ModeGironKotodamaHit, 14
    value :ModeGironKotodamaMiss, 15
    value :ModeGironVibHit, 16
    value :ModeGironVibMiss, 17
    value :ModeGironTimeout, 18
    value :ModeGironDead, 19
    value :ModeGironTalkIn, 20
    value :ModeGironTalkScript, 21
    value :ModeAnagramIn, 22
    value :ModeAnagramInTansaku, 23
    value :ModeAnagramGame, 24
    value :ModeAnagramTimeout, 25
    value :ModeAnagramDead, 26
    value :ModeAnagramClear, 27
    value :ModeCriminalSelectIn, 28
    value :ModeCriminalSelectGame, 29
    value :ModeCriminalSelectTimeout, 30
    value :ModeCriminalSelectOk, 31
    value :ModeMtbIn, 32
    value :ModeMtbInTansaku, 33
    value :ModeMtbGame, 34
    value :ModeMtbLast, 35
    value :ModeMtbTimeout, 36
    value :ModeMtbWin, 37
    value :ModeMtbLose, 38
    value :ModeKokoronpaDataLoad, 39
    value :ModeMax, 40
  end
  add_message "Game.ClimaxInfer" do
    optional :mode, :int32, 1
    optional :playing_flash, :bool, 2
    optional :start_answer, :bool, 3
    optional :holding, :bool, 4
    optional :list_state, :enum, 5, "Game.ClimaxInfer.ListState"
  end
  add_enum "Game.ClimaxInfer.ListState" do
    value :Center, 0
    value :Left, 1
    value :Right, 2
  end
  add_message "Game.PbKotodamaList" do
    repeated :pb_kotodama, :message, 1, "Game.PbKotodamaList.PbKotodama"
  end
  add_message "Game.PbKotodamaList.PbKotodama" do
    optional :list_no, :int32, 1
    repeated :name, :int32, 2
  end
  add_message "Game.ExtraModeInitialState" do
    optional :target, :enum, 1, "Game.ExtraModeInitialState.Gallery"
    repeated :items, :message, 2, "Game.ExtraModeInitialState.Item"
  end
  add_message "Game.ExtraModeInitialState.Item" do
    optional :id, :int32, 1
    optional :name, :string, 2
    optional :flag, :int32, 3
  end
  add_enum "Game.ExtraModeInitialState.Gallery" do
    value :None, 0
    value :Event, 13
    value :Movie, 14
    value :ArtWorks, 15
    value :Bgm, 16
  end
  add_message "Game.UpdateExtraModeItem" do
    optional :target, :enum, 1, "Game.ExtraModeInitialState.Gallery"
    optional :item, :message, 2, "Game.ExtraModeInitialState.Item"
  end
  add_message "Game.SequenceMenuInfo" do
    optional :target, :enum, 1, "Game.SequenceMenuInfo.SequenceMode"
    repeated :items, :message, 2, "Game.SequenceMenuInfo.Item"
  end
  add_message "Game.SequenceMenuInfo.Item" do
    optional :id, :int32, 1
    optional :name, :string, 2
    optional :flag, :int32, 3
  end
  add_enum "Game.SequenceMenuInfo.SequenceMode" do
    value :OpeningMovie, 0
    value :TitleWaitIn, 1
    value :TitleWait, 2
    value :TitleMenuIn, 3
    value :TitleMenu, 4
    value :NewGame, 5
    value :LoadGame, 6
    value :Option, 7
    value :DataInstall, 8
    value :MainMenu, 9
    value :Continue, 10
    value :ChapterSelect, 11
    value :Extra, 12
    value :EventGallery, 13
    value :MovieGallery, 14
    value :ArtWorksGallery, 15
    value :BgmGallery, 16
    value :SchoolStore, 17
    value :DiffChapterSelect, 18
    value :ChapterMenu, 19
    value :ChapterStartAdv, 20
    value :ChapterStartTrial, 21
    value :ChapterResult, 22
    value :GameTrialMain, 23
    value :GameTrialVita, 24
    value :LangSelectNewGame, 25
    value :LangSelectTrialMode, 26
    value :ResetGame, 27
    value :ResetGameEnd, 28
    value :Island, 29
  end
  add_message "Game.SequenceViewRequest" do
    optional :select, :bool, 1
    optional :enter, :bool, 2
    optional :select_id, :int32, 3
  end
  add_message "Game.PbState" do
    optional :can_open_pb, :bool, 1
    optional :can_open_log, :bool, 2
    optional :current, :int32, 3
    optional :next, :int32, 4
    optional :is_select_mode, :bool, 5
  end
  add_message "Game.MtbState" do
    optional :enabled_fever, :bool, 1
  end
  add_message "Game.HsTitle" do
    optional :mode_id, :int32, 1
  end
  add_message "Game.UpdateFrame" do
    optional :loopend_mode, :enum, 6, "Game.UpdateFrame.LoopEndMode"
    optional :func_name, :string, 7
    optional :script_data, :message, 1, "Game.HsScriptData"
    optional :trial_data, :message, 2, "Game.HsTrial"
    optional :script_ctr, :message, 3, "Game.HsScriptCtr"
    optional :pb_state, :message, 4, "Game.PbState"
    optional :title, :message, 5, "Game.HsTitle"
    optional :climax_infer, :message, 8, "Game.ClimaxInfer"
    optional :mtb_stage, :message, 9, "Game.MtbState"
    repeated :skill_info, :message, 10, "Game.Skill"
    optional :update_result, :message, 11, "Game.UpdateResult"
    optional :update_gallery, :message, 12, "Game.UpdateGallery"
    optional :system_dialog_mode, :int32, 13
    optional :tansaku, :message, 14, "Game.Tansaku"
    optional :update_sequence, :message, 15, "Game.UpdateSequence"
    optional :update_shinmitsu_event_gallery, :message, 16, "Game.ShinmitsuEventGallery"
    optional :monomono, :message, 17, "Game.Monomono"
    optional :Criminal, :message, 18, "Game.HsTrialCriminal"
    optional :survival_title, :message, 19, "Game.SurvivalTitle"
    optional :show_message_window, :bool, 21
    optional :update_survival, :message, 22, "Game.UpdateSurvival"
    optional :is_game_main, :bool, 23
    optional :is_display_now_loading, :bool, 24
    optional :savedata_game, :message, 25, "Game.HsSaveDataGame"
    optional :bgmodel, :message, 26, "Game.HsBgModel"
    optional :dr2_script_data, :message, 27, "Game.Dr2HsScriptData"
    optional :dr2_hs_trial, :message, 28, "GameDr2.Dr2HsTrial"
    optional :dr2_hs_trial_bullet, :message, 29, "GameDr2.Dr2HsTrialBullet"
    optional :is_menu_opend, :bool, 30
    optional :is_display_message_window, :bool, 31
    optional :dr2_hs_sequence, :message, 32, "GameDr2.Dr2HsSequence"
    optional :dr2_hs_title, :message, 33, "GameDr2.Dr2HsTitle"
    optional :dr2_hs_main_menu, :message, 34, "GameDr2.Dr2HsMainMenu"
    optional :dr2_check_window, :message, 35, "GameDr2.Dr2CheckWindow"
    optional :dr2_hs_hanron, :message, 36, "GameDr2.Dr2HsHanron"
    optional :dr2_adv_briefing, :message, 37, "GameDr2.Dr2AdvBriefing"
    optional :dr2_twilight, :message, 38, "GameDr2.Dr2Twilight"
    optional :dr2_tansaku, :message, 39, "GameDr2.Dr2Tansaku"
    optional :dr2_select_language, :message, 40, "GameDr2.Dr2SelectLanguage"
    optional :dr2_diff_Window, :message, 41, "GameDr2.Dr2DiffWindow"
    optional :dr2_progress, :message, 42, "GameDr2.Dr2Progress"
    optional :dr2_event_gallery, :message, 43, "GameDr2.Dr2EventGallery"
    optional :dr2_movie_gallery, :message, 44, "GameDr2.Dr2MovieGallery"
    optional :dr2_artwork_gallery, :message, 45, "GameDr2.Dr2ArtworkGallery"
    optional :dr2_sound_gallery, :message, 46, "GameDr2.Dr2SoundGallery"
    optional :dr2_system_data, :message, 47, "GameDr2.Dr2SystemData"
    optional :dr2_save_dialog, :message, 48, "GameDr2.Dr2SaveDialog"
    optional :dr2_savedata, :message, 49, "GameDr2.Dr2Savedata"
    optional :dr2_survival_title, :message, 50, "GameDr2.Dr2SurvivalTitle"
    optional :dr2_survival_action_select, :message, 51, "GameDr2.Dr2SurvivalActionSelect"
    optional :dr2_climax_infer, :message, 52, "GameDr2.Dr2ClimaxInfer"
    optional :dr2_survival_action_setting, :message, 53, "GameDr2.Dr2SurvivalActionSetting"
    optional :dr2_escape, :message, 54, "GameDr2.Dr2Escape"
    optional :dr2_survival_item_create, :message, 55, "GameDr2.Dr2SurvivalItemCreate"
    optional :dr2_usami_game, :message, 56, "GameDr2.Dr2UsamiGame"
    optional :dr2_character_gallery, :message, 57, "GameDr2.Dr2CharacterGallery"
    optional :dr2_friendship_gallery, :message, 58, "GameDr2.Dr2FriendshipGallery"
    optional :dr2_ultimate_gallery, :message, 59, "GameDr2.Dr2UltimateGallery"
    optional :dr2_pb_option, :message, 60, "GameDr2.Dr2PbOption"
    optional :dr2_survival_collect, :message, 61, "GameDr2.Dr2SurvivalCollect"
    optional :dr2_survival_item_list, :message, 62, "GameDr2.Dr2SurvivalItemList"
    optional :dr2_adv_result, :message, 63, "GameDr2.Dr2AdvResult"
    optional :dr2_help, :message, 64, "GameDr2.Dr2Help"
    optional :dr2_monomono, :message, 65, "GameDr2.Dr2Monomono"
    optional :dr2_adv_vending, :message, 66, "GameDr2.Dr2AdvVending"
    optional :dr2_pb_pet, :message, 67, "GameDr2.Dr2PbPet"
    optional :dr2_novel_title, :message, 68, "GameDr2.Dr2NovelTitle"
    optional :dr2_novel, :message, 69, "GameDr2.Dr2Novel"
    optional :dr2_novel_menu, :message, 70, "GameDr2.Dr2NovelMenu"
    optional :dr2_novel_chara, :message, 71, "GameDr2.Dr2NovelChara"
    optional :dr2_hs_bgmodel, :message, 72, "GameDr2.Dr2HsBgmodel"
    optional :dr1_hs_trial_bullet, :message, 73, "Game.Dr1HsTrialBullet"
    optional :dr2_hs_trial_window, :message, 74, "GameDr2.Dr2HsTrialWindow"
    optional :dr1_hs_trial_window, :message, 75, "Game.Dr1HsTrialWindow"
    optional :dr_fade, :message, 76, "Game.DrFade"
    optional :is_font_drawing, :bool, 77
    optional :dr2_pocket_book, :message, 78, "GameDr2.Dr2PocketBook"
    optional :can_save, :bool, 79
  end
  add_enum "Game.UpdateFrame.LoopEndMode" do
    value :None, 0
    value :Title, 1
    value :ScriptCtr, 2
    value :ScriptTest, 3
    value :PocketBook, 4
  end
  add_message "Game.HsSaveDataGame" do
    optional :chapter_select_flag, :int32, 1
  end
  add_message "Game.SurvivalTitle" do
    optional :mode, :int32, 1
  end
  add_message "Game.UpdateSurvival" do
    optional :IsActive, :bool, 1
    optional :target, :int32, 2
    repeated :mode, :int32, 3
    repeated :characters, :message, 4, "Game.Survival.Character"
    repeated :items, :message, 5, "Game.Survival.Item"
    repeated :collect_items, :message, 6, "Game.Survival.CollectItem"
    optional :item_diff, :int32, 7
    optional :character_diff, :int32, 8
    optional :clean_liness, :int32, 9
    optional :tutorial_status, :enum, 10, "Game.Survival.TutorialStatus"
    optional :is_help_mode, :bool, 11
  end
  add_message "Game.SurvivalTitleRequest" do
    optional :select, :int32, 1
  end
  add_message "Game.SurVivalActionSelectRequest" do
    optional :select, :int32, 1
    optional :help_request, :bool, 2
  end
  add_message "Game.SurvivalActionSettingRequest" do
    optional :character_id, :int32, 1
    optional :spot, :enum, 2, "Game.Survival.Spot"
    optional :help_page, :int32, 3
  end
  add_message "Game.SurvivalItemCreateRequest" do
    optional :tab_no, :int32, 1
    optional :item_id, :int32, 2
  end
  add_message "Game.SurvivalItemListRequest" do
    optional :tab_no, :int32, 1
    optional :item_id, :int32, 2
    optional :target_character, :int32, 3
  end
  add_message "Game.SurvivalShortcutRequest" do
    optional :id, :int32, 1
  end
  add_message "Game.SurvivalSpotSelectRequest" do
    optional :id, :int32, 1
  end
  add_message "Game.HsTrialCriminal" do
    optional :mode, :int32, 1
  end
  add_message "Game.Monomono" do
    optional :mode, :int32, 1
  end
  add_message "Game.ShinmitsuEventGallery" do
    optional :mode, :int32, 1
  end
  add_message "Game.Tansaku" do
    optional :is_corridor, :bool, 1
    optional :tansaku_state, :message, 2, "Game.HsTansaku"
  end
  add_message "Game.UpdateSequence" do
    optional :mode, :int32, 1
  end
  add_message "Game.UpdateGallery" do
    optional :mode, :int32, 1
  end
  add_message "Game.UpdateResult" do
    optional :mode, :int32, 1
    optional :phase, :int32, 2
  end
  add_message "Game.Skill" do
    optional :name, :string, 1
    optional :desc, :string, 2
    optional :equiped, :bool, 3
  end
  add_message "Game.ReplaceModelTexture" do
    optional :model_no, :int32, 1
    optional :model_no_src, :int32, 2
  end
  add_message "Game.UpdateFrameRequest" do
    repeated :ctrl_list, :bool, 1
    optional :position, :message, 2, "Game.DrsVector2"
    optional :lstick_x, :float, 3
    optional :lstick_y, :float, 4
    optional :rstick_x, :float, 5
    optional :rstick_y, :float, 6
    optional :show_curtain, :bool, 7
    optional :need_update_position, :bool, 8
    optional :trial_time_out, :bool, 9
    optional :trial_dead, :bool, 10
    optional :trial_clear, :bool, 11
    optional :trial_immortal, :bool, 12
  end
  add_enum "Game.UpdateFrameRequest.DrCtrl" do
    value :CtrlMoveUp, 0
    value :CtrlMoveDown, 1
    value :CtrlMoveLeft, 2
    value :CtrlMoveRight, 3
    value :CtrlCircle, 4
    value :CtrlCross, 5
    value :CtrlSquare, 6
    value :CtrlTriangle, 7
    value :CtrlL, 8
    value :CtrlR, 9
    value :CtrlStart, 10
    value :CtrlSelect, 11
    value :CtrlAnalogLeftHorizontal, 12
    value :CtrlAnalogLeftVertical, 13
    value :CtrlAnalogRightHorizontal, 14
    value :CtrlAnalogRightVertical, 15
    value :CtrlStrafeLeft, 16
    value :CtrlStrafeRight, 17
    value :CtrlMenuUp, 18
    value :CtrlMenuDown, 19
    value :CtrlMenuLeft, 20
    value :CtrlMenuRight, 21
    value :CtrlMenuEnter, 22
    value :CtrlMenuBack, 23
    value :CtrlMenuGalleryPlayMode, 24
    value :CtrlPause, 25
    value :CtrlGuideLeft, 26
    value :CtrlGuideRight, 27
    value :CtrlMessNext, 28
    value :CtrlMessSkip, 29
    value :CtrlMessAuto, 30
    value :CtrlReact, 31
    value :CtrlHideWindow, 32
    value :CtrlCamUp, 33
    value :CtrlCamDown, 34
    value :CtrlCamLeft, 35
    value :CtrlCamRight, 36
    value :CtrlLeaveArea, 37
    value :CtrlShoot, 38
    value :CtrlObservingEye, 39
    value :CtrlRun, 40
    value :CtrlShowHandbook, 41
    value :CtrlReload, 42
    value :CtrlShowEvidence, 43
    value :CtrlShowMap, 44
    value :CtrlSurvivalHelp, 45
    value :CtrlItemInfo, 46
    value :CtrlTrialShoot, 47
    value :CtrlTrialShootSilent, 48
    value :CtrlTrialSpeedUp, 49
    value :CtrlTrialConcentrate, 50
    value :CtrlTrialChangeBullet, 51
    value :CtrlTrialNextBullet, 52
    value :CtrlTrialPrevBullet, 53
    value :CtrlClimaxPageLeft, 54
    value :CtrlClimaxPageRight, 55
    value :CtrlClimaxBarLeft, 56
    value :CtrlClimaxBarRight, 57
    value :CtrlDigitalLeft, 58
    value :CtrlDigitalRight, 59
    value :CtrlDigitalUp, 60
    value :CtrlDigitalDown, 61
    value :CtrlUsamiStart, 62
    value :CtrlUsamiSwitchVoices, 63
    value :CtrlUsamiJump, 64
    value :CtrlUsamiMagicalCircle, 65
    value :CtrlUsamiTransform, 66
    value :CtrlLogicJump, 67
    value :CtrlLogicAccel, 68
    value :CtrlLogicBrake, 69
    value :CtrlTwilightStart, 70
    value :CtrlTwilightUp, 71
    value :CtrlTwilightDown, 72
    value :CtrlTwilightLeft, 73
    value :CtrlTwilightRight, 74
    value :CtrlEscapeCheck, 75
    value :CtrlEscapeSet, 76
    value :CtrlPtaUp, 77
    value :CtrlPtaDown, 78
    value :CtrlPtaLeft, 79
    value :CtrlPtaRight, 80
    value :CtrlCount, 81
  end
  add_message "Game.UpdateSaibanRequest" do
    optional :speak_zero, :bool, 1
    optional :time_over, :bool, 2
    optional :shoot_memory, :bool, 3
    optional :shoot_silencer, :bool, 4
  end
  add_message "Game.UpdateAnagramRequest" do
    optional :position, :message, 1, "Game.DrsVector2"
    optional :character_shoot, :bool, 2
    optional :speed_up, :bool, 3
    optional :concentrate, :bool, 4
  end
  add_message "Game.UpdateMtbRequest" do
    optional :beat, :bool, 1
    optional :shoot, :bool, 2
    optional :fever, :bool, 3
    optional :one_punch, :bool, 4
    optional :immortal, :bool, 5
    optional :time_over, :bool, 6
    optional :skip_game, :bool, 7
  end
  add_message "Game.UpdateClimaxInferRequest" do
    optional :view_scroll_speed, :float, 1
    optional :touch, :bool, 2
    optional :release, :bool, 3
    optional :dragging, :bool, 4
    optional :bar_left, :bool, 5
    optional :bar_left_bt, :bool, 6
    optional :bar_right, :bool, 7
    optional :bar_right_bt, :bool, 8
    optional :show_evidence, :bool, 9
    optional :position, :message, 10, "Game.DrsVector2"
    optional :skip_infer, :bool, 11
    optional :no_failure, :bool, 13
    optional :long_touch, :bool, 12
  end
  add_message "Game.UpdateMessageRequest" do
    optional :selected, :int32, 1
    optional :re_aciton, :bool, 2
    optional :message_next, :bool, 3
  end
  add_message "Game.UpdateBriefingRequest" do
    optional :selected, :int32, 1
    optional :selected_skill, :int32, 2
    optional :move_cursor, :bool, 3
    optional :equip_request, :bool, 4
    optional :cancel_request, :bool, 5
  end
  add_message "Game.MessageAutoRequest" do
  end
  add_message "Game.SaveData" do
    optional :title, :string, 1
    optional :subtitle, :string, 2
    optional :datetime, :string, 3
    optional :compressed, :bool, 17
    optional :data, :bytes, 4
    optional :image_png, :bytes, 5
    optional :saved_at, :int64, 6
    optional :is_smartphone, :bool, 12
    optional :game_mode, :int32, 7
    optional :chapter, :int32, 8
    optional :scene, :int32, 14
    optional :subscene, :int32, 15
    optional :map_model_no, :int32, 16
    optional :part, :int32, 9
    optional :phase, :int32, 10
    optional :game_time, :int32, 11
    optional :survival_day, :int32, 13
  end
  add_message "Game.BrowserGoto" do
    optional :url, :string, 1
  end
  add_message "Game.SaveDataSelectRequest" do
    optional :selected, :bool, 1
    optional :data, :bytes, 2
    optional :slot_number, :int32, 3
  end
  add_message "Game.WriteSaveData" do
    optional :slot_number, :int32, 1
    optional :data, :message, 2, "Game.SaveData"
    optional :capture_tex_no, :int32, 3
  end
  add_message "Game.WriteAutoSaveData" do
    optional :data, :message, 1, "Game.SaveData"
  end
  add_message "Game.MapInfo" do
    optional :id, :int32, 1
    optional :map, :int32, 2
    optional :omit, :bool, 3
    optional :x, :int32, 4
    optional :y, :int32, 5
    optional :name, :string, 6
    optional :chara, :int32, 7
    optional :mapflag, :int32, 8
  end
  add_message "Game.UpdateMapRequest" do
    optional :select, :bool, 1
    optional :enter, :bool, 2
    optional :select_id, :int32, 3
    optional :select_map, :int32, 4
    optional :left_floor, :bool, 5
    optional :right_floor, :bool, 6
    optional :set_floor, :bool, 7
    optional :back, :bool, 8
    optional :tansaku, :bool, 9
    optional :select_obj, :int32, 10
    optional :select_start, :int32, 11
  end
  add_message "Game.TitleViewRequest" do
    optional :background_clicked, :bool, 1
    optional :clicked_button, :int32, 2
    optional :fisnish_title_animation, :bool, 3
  end
  add_message "Game.SystemRequest" do
    optional :save_button_clicked, :bool, 1
    optional :load_button_clicked, :bool, 2
    optional :option_button_clicked, :bool, 3
    optional :titleback_button_clicked, :bool, 4
  end
  add_message "Game.PresentInfoList" do
    repeated :present_list, :message, 1, "Game.PresentInfoList.PresentInfo"
    optional :is_select_mode, :bool, 2
  end
  add_message "Game.PresentInfoList.PresentInfo" do
    optional :id, :int32, 1
    optional :name, :string, 2
    optional :get, :bool, 3
    optional :count, :int32, 4
  end
  add_message "Game.PresentDetail" do
    optional :id, :int32, 1
    optional :no, :int32, 2
    optional :name, :string, 3
    optional :desc, :string, 4
  end
  add_message "Game.PresentViewRequest" do
    optional :select, :bool, 1
    optional :enter, :bool, 2
    optional :select_id, :int32, 3
    optional :left_item, :bool, 4
    optional :right_item, :bool, 5
    optional :back, :bool, 6
    optional :post, :bool, 7
  end
  add_message "Game.ReportInfoList" do
    repeated :report_list, :message, 1, "Game.ReportInfoList.ReportInfo"
  end
  add_message "Game.ReportInfoList.ReportInfo" do
    optional :id, :int32, 1
    optional :dead, :bool, 2
    optional :page, :int32, 3
  end
  add_message "Game.ReportViewRequest" do
    optional :select, :bool, 1
    optional :enter, :bool, 2
    optional :select_id, :int32, 3
    optional :left_chara, :bool, 4
    optional :right_chara, :bool, 5
    optional :left_page, :bool, 6
    optional :right_page, :bool, 7
    optional :back, :bool, 8
  end
  add_message "Game.ReportChangeInfo" do
    optional :select_id, :int32, 1
  end
  add_message "Game.RegurationRequest" do
    optional :left_page, :bool, 1
    optional :right_page, :bool, 2
    optional :back, :bool, 3
  end
  add_message "Game.KotodamaInfoList" do
    repeated :kotodama_list, :message, 1, "Game.KotodamaInfoList.KotodamaInfo"
    optional :is_select_mode, :bool, 2
  end
  add_message "Game.KotodamaInfoList.KotodamaInfo" do
    optional :id, :int32, 1
    optional :name, :string, 2
  end
  add_message "Game.KotodamaDetail" do
    optional :id, :int32, 1
    optional :no, :int32, 2
    optional :name, :string, 3
    optional :desc, :string, 4
    optional :is_select_mode, :bool, 5
  end
  add_message "Game.KotodamaViewRequest" do
    optional :select, :bool, 1
    optional :enter, :bool, 2
    optional :select_id, :int32, 3
    optional :left_item, :bool, 4
    optional :right_item, :bool, 5
    optional :back, :bool, 6
    optional :post, :bool, 7
  end
  add_message "Game.HelpInfo" do
    optional :message, :string, 1
  end
  add_message "Game.BacklogInfoList" do
    repeated :backlog_list, :message, 1, "Game.BacklogInfoList.BacklogInfo"
  end
  add_message "Game.BacklogInfoList.Font" do
    optional :code, :int32, 1
    optional :type, :int32, 2
    optional :width, :int32, 3
  end
  add_message "Game.BacklogInfoList.BacklogInfo" do
    optional :id, :int32, 1
    optional :kind, :int32, 2
    repeated :fonts, :message, 3, "Game.BacklogInfoList.Font"
    optional :color, :int32, 4
    optional :chara, :int32, 5
  end
  add_message "Game.SystemDialogInfo" do
    optional :message, :string, 1
    optional :yes_text, :string, 2
    optional :no_text, :string, 3
  end
  add_message "Game.ChapterMenuDialogInfo" do
    optional :open, :bool, 1
    optional :chapter_no, :int32, 2
  end
  add_message "Game.DiffChapterMenuDialogInfo" do
    optional :open, :bool, 1
  end
  add_message "Game.PlayScriptRequest" do
    optional :episode, :int32, 1
    optional :progress, :int32, 2
    optional :move, :int32, 3
  end
  add_message "Game.LanguageMenuDialogInfo" do
    optional :open, :bool, 1
  end
  add_message "Game.DebugPresentMaxRequest" do
  end
  add_message "Game.DebugProfLevelMaxRequest" do
  end
  add_message "Game.OptionInfo" do
    optional :bgm_vol, :int32, 1
    optional :se_vol, :int32, 2
    optional :voice_vol, :int32, 3
    optional :action_diff, :int32, 4
    optional :inference_diff, :int32, 5
    optional :fps_camera_anime, :int32, 6
    optional :target_speed, :int32, 7
    optional :camera_speed, :int32, 8
  end
  add_message "Game.OptionRequest" do
    optional :bgm_vol, :int32, 1
    optional :se_vol, :int32, 2
    optional :voice_vol, :int32, 3
    optional :action_diff, :int32, 4
    optional :inference_diff, :int32, 5
    optional :fps_camera_anime, :int32, 6
    optional :target_speed, :int32, 7
    optional :camera_speed, :int32, 8
    optional :enter_default, :bool, 9
  end
  add_message "Game.SuperObservationRequest" do
    optional :enter, :bool, 1
    optional :cancel, :bool, 2
  end
  add_message "Game.SuperObservationInfoList" do
    repeated :observation_list, :message, 1, "Game.SuperObservationInfoList.SuperObservationInfo"
  end
  add_message "Game.SuperObservationInfoList.SuperObservationInfo" do
    optional :id, :int32, 1
    optional :type, :int32, 2
    optional :no, :int32, 3
    optional :x, :float, 4
    optional :y, :float, 5
  end
  add_message "Game.MovieRequest" do
    optional :skip, :bool, 1
  end
  add_message "Game.HelpRequest" do
    optional :open, :bool, 1
  end
  add_message "Game.HideWindowRequest" do
    optional :hide, :bool, 1
  end
  add_message "Game.GmoAnimeEndGet" do
    optional :model_no, :int32, 1
    optional :src_no, :int32, 2
  end
  add_message "Game.GmoAnimeEndGetResult" do
    optional :frame, :int32, 1
  end
  add_message "Game.Survival" do
  end
  add_message "Game.Survival.Character" do
    optional :status, :enum, 1, "Game.Survival.Status"
    optional :collect_level, :int32, 2
    optional :clean_level, :int32, 3
    optional :target, :enum, 4, "Game.Survival.Spot"
    optional :hp, :int32, 5
    optional :id, :int32, 6
    optional :can_receive_current_selected_item, :bool, 7
  end
  add_message "Game.Survival.Item" do
    optional :id, :int32, 1
    optional :name, :string, 2
    optional :type, :enum, 3, "Game.Survival.ItemType"
    optional :count, :int32, 4
    optional :isClassTarget, :bool, 5
    optional :icon_type, :enum, 6, "Game.Survival.IconType"
    optional :target, :enum, 7, "Game.Survival.TargetCharacter"
    optional :desc, :string, 8
    optional :amenity_type, :enum, 9, "Game.Survival.AmenityType"
    optional :material_type, :enum, 10, "Game.Survival.MaterialType"
    optional :can_create, :bool, 11
  end
  add_message "Game.Survival.CollectItem" do
    optional :id, :int32, 1
    optional :Count, :int32, 2
  end
  add_enum "Game.Survival.TutorialStatus" do
    value :NotSvTutorial, 0
    value :ItemCreateOnly, 1
    value :ActionSelectExplain, 2
  end
  add_enum "Game.Survival.Spot" do
    value :Camp, 0
    value :Cleaning, 1
    value :Class, 2
    value :Kitchen, 3
    value :Library, 4
    value :Physics, 5
    value :Art, 6
    value :Health, 7
    value :Garden, 8
    value :It, 9
    value :Music, 10
    value :Gym, 11
    value :Max, 12
  end
  add_enum "Game.Survival.ItemType" do
    value :Target, 0
    value :Tool, 1
    value :Amenity, 2
    value :Goods, 3
    value :Material, 4
  end
  add_enum "Game.Survival.AmenityType" do
    value :NotAmenity, 0
    value :HpRecovery, 1
    value :ActionRecovery, 2
    value :CleaningRecovery, 3
    value :CollectLevelUp, 4
    value :CleaningLevelUp, 5
    value :HyperMode, 6
  end
  add_enum "Game.Survival.Status" do
    value :None, 0
    value :NotAction, 1
    value :Hyper, 2
    value :Fine, 3
    value :Normal, 4
    value :Caution, 5
  end
  add_enum "Game.Survival.IconType" do
    value :NoIcon, 0
    value :Hp, 1
    value :Collect, 2
    value :Clean, 3
    value :ToHyper, 4
  end
  add_enum "Game.Survival.TargetCharacter" do
    value :Place, 0
    value :One, 1
    value :All, 2
  end
  add_enum "Game.Survival.MaterialType" do
    value :NotMaterial, 0
    value :Book, 1
    value :Beaker, 2
    value :Pen, 3
    value :Ball, 4
    value :Spanner, 5
  end
  add_message "Game.DebugSurvivalItemMaxRequest" do
  end
  add_message "Game.DebugAllSkillRequest" do
  end
  add_message "Game.FriendshipGalleryRequest" do
    optional :id, :int32, 1
    optional :value, :int32, 2
  end
  add_message "Game.SuperArtGalleryRequest" do
    optional :id, :int32, 1
    optional :value, :int32, 2
  end
  add_enum "Game.SuperArtGalleryRequest.BuyType" do
    value :NotBuy, 0
    value :Buy, 1
  end
  add_message "Game.PayMedalRequest" do
    optional :value, :int32, 1
  end
  add_message "Game.MaxMedalRequest" do
  end
  add_message "Game.GmoAnimeStartDelay" do
    optional :model_no, :int32, 1
    optional :src_no, :int32, 2
    optional :speed, :float, 3
    optional :loop, :bool, 4
    optional :delay, :float, 5
  end
  add_message "Game.Dr1UpdateHsTrialBulletRequest" do
    optional :change_bullet, :bool, 1
    optional :open_bullet_list, :bool, 2
    optional :select_large_bullet_no, :int32, 3
    optional :close_bullet_list, :bool, 4
    optional :shoot_memory, :bool, 5
    optional :shoot_silencer, :bool, 6
    repeated :silencer_trajectory, :message, 7, "Game.DrsVector2"
  end
  add_message "Game.Dr1HsTrialBullet" do
    optional :mode, :enum, 1, "Game.Dr1HsTrialBullet.Mode"
    optional :prog, :int32, 2
    repeated :bullets, :message, 3, "Game.Dr1HsTrialBullet.Bullet"
    optional :current_bullet, :message, 4, "Game.Dr1HsTrialBullet.Bullet"
    optional :select_no, :int32, 5
    optional :bMode, :enum, 6, "Game.Dr1HsTrialBullet.BMode"
  end
  add_message "Game.Dr1HsTrialBullet.Bullet" do
    optional :id, :int32, 1
    optional :width, :float, 2
    optional :position, :int32, 3
    optional :disp_position, :message, 4, "Game.DrsVector2"
    optional :disp_position2, :message, 5, "Game.DrsVector2"
  end
  add_enum "Game.Dr1HsTrialBullet.Mode" do
    value :Non, 0
    value :In, 1
    value :Disp, 2
    value :SelectChange, 3
    value :Shoot, 4
    value :Vib, 5
    value :Memory, 6
    value :Close, 7
    value :LargeChange, 8
    value :LDisp, 9
    value :LSelectNext, 10
    value :LSelectBack, 11
    value :LSmallChange, 12
    value :LSetupIn, 13
    value :LSetupDisp, 14
    value :LSetupOut, 15
    value :LSelectDirect, 16
    value :Max, 17
  end
  add_enum "Game.Dr1HsTrialBullet.BMode" do
    value :BModeNon, 0
    value :BModeIn, 1
    value :BModeDisp, 2
    value :BModeSelectChange, 3
    value :BModeShoot, 4
    value :BModeClose, 5
    value :BModeMemory, 6
    value :BModeLIn, 7
    value :BModeLDisp, 8
    value :BModeLSelectNext, 9
    value :BModeLSelectBack, 10
    value :BModeLClose, 11
    value :BModeLSetupIn, 12
    value :BModeLSetupDisp, 13
    value :BModeMax, 14
  end
  add_message "Game.Dr1HsTrialWindow" do
    optional :mode, :enum, 1, "Game.Dr1HsTrialWindow.Mode"
  end
  add_enum "Game.Dr1HsTrialWindow.Mode" do
    value :ModeNon, 0
    value :ModeIn, 1
    value :ModeIn2, 2
    value :ModeDisp, 3
    value :ModeSideChange, 4
    value :ModeOut, 5
    value :ModeOut2, 6
    value :ModeLoad, 7
    value :ModeInNormal, 8
    value :ModeInSimple, 9
    value :ModeChangeNormalFaceIn, 10
    value :ModeChangeSimpleFaceIn, 11
    value :ModeChangeNormalFace2SimpleName, 12
    value :ModeChangeSimpleName2NormalFace, 13
    value :ModeChangeNormalFaceOut, 14
    value :ModeChangeSimpleFaceOut, 15
    value :ModeChangeSimpleNameIn, 16
    value :ModeChangeSimpleName, 17
    value :ModeChangeSimpleNameOut, 18
    value :ModeChangeLrSwap, 19
    value :ModeChangeFaceName, 20
    value :ModeChangeNormal2Simple, 21
    value :ModeChangeSimple2Normal, 22
    value :ModeOutNormal, 23
    value :ModeOutSimple, 24
    value :ModeMax, 25
  end
  add_enum "Game.PspBlendMode" do
    value :BlendNon, 0
    value :BlendAlpha, 1
    value :BlendAdd, 2
    value :BlendAdd2, 3
    value :BlendAddDirect, 4
    value :BlendMinus, 5
    value :BlendAbs, 6
    value :BlendTest, 7
    value :BlendDefault, 8
    value :BlendAlpha2, 9
  end
end

module Game
  RuntimeError = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.RuntimeError").msgclass
  TerminateRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.TerminateRequest").msgclass
  Wait = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Wait").msgclass
  WaitFinishRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.WaitFinishRequest").msgclass
  WaitForAck = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.WaitForAck").msgclass
  WaitForAckRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.WaitForAckRequest").msgclass
  LoadConfig = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.LoadConfig").msgclass
  FileLoadAsync = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.FileLoadAsync").msgclass
  FileLoadAsyncResult = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.FileLoadAsyncResult").msgclass
  FileLoadCheck = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.FileLoadCheck").msgclass
  FileLoadCheckResult = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.FileLoadCheckResult").msgclass
  FileLoadEnd = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.FileLoadEnd").msgclass
  FileLoadEndResult = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.FileLoadEndResult").msgclass
  FileLoadAddress = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.FileLoadAddress").msgclass
  FileLoadAddressResult = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.FileLoadAddressResult").msgclass
  MemPacAddrGet = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.MemPacAddrGet").msgclass
  MemPacAddrGetResult = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.MemPacAddrGetResult").msgclass
  GimAddrLoad = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.GimAddrLoad").msgclass
  GimAddrLoadResult = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.GimAddrLoadResult").msgclass
  LoadModel = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.LoadModel").msgclass
  LoadModelResult = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.LoadModelResult").msgclass
  GmoLoad = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.GmoLoad").msgclass
  GmoLoadResult = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.GmoLoadResult").msgclass
  GmoUnload = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.GmoUnload").msgclass
  GmoUnloadResult = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.GmoUnloadResult").msgclass
  LoadConfigResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.LoadConfigResponse").msgclass
  LoadConfigResponse::FileMapping = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.LoadConfigResponse.FileMapping").msgclass
  LoadConfigResponse::FontGlyphInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.LoadConfigResponse.FontGlyphInfo").msgclass
  LoadConfigResponse::GlyphInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.LoadConfigResponse.GlyphInfo").msgclass
  DeviceInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.DeviceInfo").msgclass
  InputData = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.InputData").msgclass
  InputData::Type = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.InputData.Type").enummodule
  InputPadData = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.InputPadData").msgclass
  InputMouseData = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.InputMouseData").msgclass
  UpdatePlayEndAudio = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UpdatePlayEndAudio").msgclass
  UpdatePlayEndAudio::FileType = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UpdatePlayEndAudio.FileType").enummodule
  CameraRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.CameraRequest").msgclass
  FreeMessage = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.FreeMessage").msgclass
  FrameInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.FrameInfo").msgclass
  FrameInfo::Type = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.FrameInfo.Type").enummodule
  ScriptInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.ScriptInfo").msgclass
  ScriptInfo::SelectText = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.ScriptInfo.SelectText").msgclass
  SpriteList = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SpriteList").msgclass
  SpriteList::SpriteInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SpriteList.SpriteInfo").msgclass
  SpriteList::SpriteType = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SpriteList.SpriteType").enummodule
  SpriteList::FontTypeWaku = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SpriteList.FontTypeWaku").enummodule
  AudioInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.AudioInfo").msgclass
  AudioInfo::FileType = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.AudioInfo.FileType").enummodule
  AudioInfo::Mode = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.AudioInfo.Mode").enummodule
  AudioSeBankInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.AudioSeBankInfo").msgclass
  AudioMixerInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.AudioMixerInfo").msgclass
  UpdateAudioBgmPlayInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UpdateAudioBgmPlayInfo").msgclass
  UpdateAudioBgmVisualizerInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UpdateAudioBgmVisualizerInfo").msgclass
  VideoInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.VideoInfo").msgclass
  UnloadModel = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UnloadModel").msgclass
  UnloadTexture = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UnloadTexture").msgclass
  UnloadTextureResult = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UnloadTextureResult").msgclass
  CameraInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.CameraInfo").msgclass
  CameraInfo::Mode = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.CameraInfo.Mode").enummodule
  CameraInfo::CameraList = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.CameraInfo.CameraList").enummodule
  CameraModeInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.CameraModeInfo").msgclass
  CameraModeInfo::CameraType = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.CameraModeInfo.CameraType").enummodule
  CameraModeInfo::CameraClearFlags = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.CameraModeInfo.CameraClearFlags").enummodule
  SendCommand = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SendCommand").msgclass
  Command = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Command").msgclass
  SelectMenuRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SelectMenuRequest").msgclass
  SelectMenuRequest::Mode = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SelectMenuRequest.Mode").enummodule
  MapRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.MapRequest").msgclass
  PbRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.PbRequest").msgclass
  PbRequest::PbMode = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.PbRequest.PbMode").enummodule
  SelectedModelRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SelectedModelRequest").msgclass
  DrawFrame = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.DrawFrame").msgclass
  DrawFrame::GmoInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.DrawFrame.GmoInfo").msgclass
  DrawFrame::FontInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.DrawFrame.FontInfo").msgclass
  DrawFrame::FontControlInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.DrawFrame.FontControlInfo").msgclass
  DrawFrame::BillboardInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.DrawFrame.BillboardInfo").msgclass
  DrawFrame::VtxDat = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.DrawFrame.VtxDat").msgclass
  DrawFrame::PolyInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.DrawFrame.PolyInfo").msgclass
  DrawFrame::RotType = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.DrawFrame.RotType").enummodule
  DrawFrame::FontTypeWaku = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.DrawFrame.FontTypeWaku").enummodule
  DrawFrame::FontDisp = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.DrawFrame.FontDisp").enummodule
  DrawFrame::PolyType = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.DrawFrame.PolyType").enummodule
  FontTypeInfos = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.FontTypeInfos").msgclass
  FontTypeInfos::FontTypeInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.FontTypeInfos.FontTypeInfo").msgclass
  OverlayInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.OverlayInfo").msgclass
  FadeInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.FadeInfo").msgclass
  FadeInfo::FadeMode = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.FadeInfo.FadeMode").enummodule
  FadeInfo::FadeType = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.FadeInfo.FadeType").enummodule
  CreateScreenCapture = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.CreateScreenCapture").msgclass
  CreateScreenCaptureResult = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.CreateScreenCaptureResult").msgclass
  ScreenCapture = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.ScreenCapture").msgclass
  HsScriptData = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.HsScriptData").msgclass
  Dr2HsScriptData = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Dr2HsScriptData").msgclass
  HsBgModel = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.HsBgModel").msgclass
  HsBgModel::Mode = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.HsBgModel.Mode").enummodule
  ResultInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.ResultInfo").msgclass
  ReactionTalkValues = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.ReactionTalkValues").msgclass
  HsScriptCtr = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.HsScriptCtr").msgclass
  HsTansaku = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.HsTansaku").msgclass
  Choice = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Choice").msgclass
  Choice::Value = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Choice.Value").msgclass
  HsTrial = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.HsTrial").msgclass
  HsTrial::TrialEffectTimeAdd = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.HsTrial.TrialEffectTimeAdd").msgclass
  HsTrial::Mode = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.HsTrial.Mode").enummodule
  ClimaxInfer = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.ClimaxInfer").msgclass
  ClimaxInfer::ListState = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.ClimaxInfer.ListState").enummodule
  PbKotodamaList = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.PbKotodamaList").msgclass
  PbKotodamaList::PbKotodama = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.PbKotodamaList.PbKotodama").msgclass
  ExtraModeInitialState = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.ExtraModeInitialState").msgclass
  ExtraModeInitialState::Item = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.ExtraModeInitialState.Item").msgclass
  ExtraModeInitialState::Gallery = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.ExtraModeInitialState.Gallery").enummodule
  UpdateExtraModeItem = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UpdateExtraModeItem").msgclass
  SequenceMenuInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SequenceMenuInfo").msgclass
  SequenceMenuInfo::Item = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SequenceMenuInfo.Item").msgclass
  SequenceMenuInfo::SequenceMode = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SequenceMenuInfo.SequenceMode").enummodule
  SequenceViewRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SequenceViewRequest").msgclass
  PbState = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.PbState").msgclass
  MtbState = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.MtbState").msgclass
  HsTitle = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.HsTitle").msgclass
  UpdateFrame = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UpdateFrame").msgclass
  UpdateFrame::LoopEndMode = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UpdateFrame.LoopEndMode").enummodule
  HsSaveDataGame = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.HsSaveDataGame").msgclass
  SurvivalTitle = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SurvivalTitle").msgclass
  UpdateSurvival = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UpdateSurvival").msgclass
  SurvivalTitleRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SurvivalTitleRequest").msgclass
  SurVivalActionSelectRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SurVivalActionSelectRequest").msgclass
  SurvivalActionSettingRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SurvivalActionSettingRequest").msgclass
  SurvivalItemCreateRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SurvivalItemCreateRequest").msgclass
  SurvivalItemListRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SurvivalItemListRequest").msgclass
  SurvivalShortcutRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SurvivalShortcutRequest").msgclass
  SurvivalSpotSelectRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SurvivalSpotSelectRequest").msgclass
  HsTrialCriminal = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.HsTrialCriminal").msgclass
  Monomono = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Monomono").msgclass
  ShinmitsuEventGallery = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.ShinmitsuEventGallery").msgclass
  Tansaku = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Tansaku").msgclass
  UpdateSequence = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UpdateSequence").msgclass
  UpdateGallery = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UpdateGallery").msgclass
  UpdateResult = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UpdateResult").msgclass
  Skill = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Skill").msgclass
  ReplaceModelTexture = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.ReplaceModelTexture").msgclass
  UpdateFrameRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UpdateFrameRequest").msgclass
  UpdateFrameRequest::DrCtrl = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UpdateFrameRequest.DrCtrl").enummodule
  UpdateSaibanRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UpdateSaibanRequest").msgclass
  UpdateAnagramRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UpdateAnagramRequest").msgclass
  UpdateMtbRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UpdateMtbRequest").msgclass
  UpdateClimaxInferRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UpdateClimaxInferRequest").msgclass
  UpdateMessageRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UpdateMessageRequest").msgclass
  UpdateBriefingRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UpdateBriefingRequest").msgclass
  MessageAutoRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.MessageAutoRequest").msgclass
  SaveData = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SaveData").msgclass
  BrowserGoto = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.BrowserGoto").msgclass
  SaveDataSelectRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SaveDataSelectRequest").msgclass
  WriteSaveData = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.WriteSaveData").msgclass
  WriteAutoSaveData = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.WriteAutoSaveData").msgclass
  MapInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.MapInfo").msgclass
  UpdateMapRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.UpdateMapRequest").msgclass
  TitleViewRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.TitleViewRequest").msgclass
  SystemRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SystemRequest").msgclass
  PresentInfoList = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.PresentInfoList").msgclass
  PresentInfoList::PresentInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.PresentInfoList.PresentInfo").msgclass
  PresentDetail = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.PresentDetail").msgclass
  PresentViewRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.PresentViewRequest").msgclass
  ReportInfoList = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.ReportInfoList").msgclass
  ReportInfoList::ReportInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.ReportInfoList.ReportInfo").msgclass
  ReportViewRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.ReportViewRequest").msgclass
  ReportChangeInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.ReportChangeInfo").msgclass
  RegurationRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.RegurationRequest").msgclass
  KotodamaInfoList = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.KotodamaInfoList").msgclass
  KotodamaInfoList::KotodamaInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.KotodamaInfoList.KotodamaInfo").msgclass
  KotodamaDetail = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.KotodamaDetail").msgclass
  KotodamaViewRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.KotodamaViewRequest").msgclass
  HelpInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.HelpInfo").msgclass
  BacklogInfoList = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.BacklogInfoList").msgclass
  BacklogInfoList::Font = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.BacklogInfoList.Font").msgclass
  BacklogInfoList::BacklogInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.BacklogInfoList.BacklogInfo").msgclass
  SystemDialogInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SystemDialogInfo").msgclass
  ChapterMenuDialogInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.ChapterMenuDialogInfo").msgclass
  DiffChapterMenuDialogInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.DiffChapterMenuDialogInfo").msgclass
  PlayScriptRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.PlayScriptRequest").msgclass
  LanguageMenuDialogInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.LanguageMenuDialogInfo").msgclass
  DebugPresentMaxRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.DebugPresentMaxRequest").msgclass
  DebugProfLevelMaxRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.DebugProfLevelMaxRequest").msgclass
  OptionInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.OptionInfo").msgclass
  OptionRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.OptionRequest").msgclass
  SuperObservationRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SuperObservationRequest").msgclass
  SuperObservationInfoList = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SuperObservationInfoList").msgclass
  SuperObservationInfoList::SuperObservationInfo = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SuperObservationInfoList.SuperObservationInfo").msgclass
  MovieRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.MovieRequest").msgclass
  HelpRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.HelpRequest").msgclass
  HideWindowRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.HideWindowRequest").msgclass
  GmoAnimeEndGet = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.GmoAnimeEndGet").msgclass
  GmoAnimeEndGetResult = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.GmoAnimeEndGetResult").msgclass
  Survival = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Survival").msgclass
  Survival::Character = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Survival.Character").msgclass
  Survival::Item = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Survival.Item").msgclass
  Survival::CollectItem = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Survival.CollectItem").msgclass
  Survival::TutorialStatus = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Survival.TutorialStatus").enummodule
  Survival::Spot = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Survival.Spot").enummodule
  Survival::ItemType = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Survival.ItemType").enummodule
  Survival::AmenityType = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Survival.AmenityType").enummodule
  Survival::Status = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Survival.Status").enummodule
  Survival::IconType = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Survival.IconType").enummodule
  Survival::TargetCharacter = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Survival.TargetCharacter").enummodule
  Survival::MaterialType = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Survival.MaterialType").enummodule
  DebugSurvivalItemMaxRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.DebugSurvivalItemMaxRequest").msgclass
  DebugAllSkillRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.DebugAllSkillRequest").msgclass
  FriendshipGalleryRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.FriendshipGalleryRequest").msgclass
  SuperArtGalleryRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SuperArtGalleryRequest").msgclass
  SuperArtGalleryRequest::BuyType = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.SuperArtGalleryRequest.BuyType").enummodule
  PayMedalRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.PayMedalRequest").msgclass
  MaxMedalRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.MaxMedalRequest").msgclass
  GmoAnimeStartDelay = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.GmoAnimeStartDelay").msgclass
  Dr1UpdateHsTrialBulletRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Dr1UpdateHsTrialBulletRequest").msgclass
  Dr1HsTrialBullet = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Dr1HsTrialBullet").msgclass
  Dr1HsTrialBullet::Bullet = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Dr1HsTrialBullet.Bullet").msgclass
  Dr1HsTrialBullet::Mode = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Dr1HsTrialBullet.Mode").enummodule
  Dr1HsTrialBullet::BMode = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Dr1HsTrialBullet.BMode").enummodule
  Dr1HsTrialWindow = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Dr1HsTrialWindow").msgclass
  Dr1HsTrialWindow::Mode = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.Dr1HsTrialWindow.Mode").enummodule
  PspBlendMode = Google::Protobuf::DescriptorPool.generated_pool.lookup("Game.PspBlendMode").enummodule
end
