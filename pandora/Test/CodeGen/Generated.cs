// DON'T TOUCH. THIS FILE IS AUTO GENERATED BY codegen.rb
using System;
using System.Collections.Generic;
using System.Linq;

using ToydeaCabinet;
using ToydeaCabinet.Indexer;


namespace ToydeaCabinet.CodeGenTest {

public static class Keys
{
    public const byte Character_Id = 1;
    public const byte Character_Name = 2;
    public const byte Character_AgeWeight = 3;
}

public partial class Characters
{
    CabinetKeyBuilder kb = new CabinetKeyBuilder();
    Cabinet c;

    public Characters(Cabinet _c)
    {
        c = _c;
    }

    public Character Find(int Id)
    {
        var key = kb.Cleared().Store(Keys.Character_Id).Store(Id).Build();
        var data = c.Get(key);
        if (data.IsEmpty)
        {
            return null;
        }
        else
        {
            return Character.Deserialize(data);
        }
    }

    public void Save(Character v)
    {
        c.Put(kb.Cleared().Store(Keys.Character_Id).Store(v.Id).Build(), v.Serialize());
        c.Put(kb.Cleared().Store(Keys.Character_Name).Store(v.Name).Store(v.Id).Build(), new ByteSpan());
        c.Put(kb.Cleared().Store(Keys.Character_AgeWeight).Store(v.Age).Store(v.Weight).Store(v.Id).Build(), new ByteSpan());
    }

    public IEnumerable<Character> SearchByName(Range<string> Name)
    {
        var start = kb.Cleared().Store(Keys.Character_Name).Store(Name.Start).Build();
        var end = kb.Cleared().Store(Keys.Character_Name).Store(Name.End).Build();
        var found = c.GetRange(start, end);
        byte[] buf = new byte[4];
        return found.Select(kv =>
        {
            kv.Key.WriteTo(buf, 0, 1);
            var id = MyBitConverter.Reverse(BitConverter.ToInt32(buf));
            return Find(id);
        });
    }

    public IEnumerable<Character> SearchByAgeWeight(Range<int> Age)
    {
        var start = kb.Cleared().Store(Keys.Character_AgeWeight).Store(Age.Start).Build();
        var end = kb.Cleared().Store(Keys.Character_AgeWeight).Store(Age.End).Build();
        var found = c.GetRange(start, end);
        byte[] buf = new byte[4];
        return found.Select(kv =>
        {
            kv.Key.WriteTo(buf, 0, 9);
            var id = MyBitConverter.Reverse(BitConverter.ToInt32(buf));
            return Find(id);
        });
    }

    public IEnumerable<Character> SearchByAgeWeight(int Age,Range<int> Weight)
    {
        var start = kb.Cleared().Store(Keys.Character_AgeWeight).Store(Age).Store(Weight.Start).Build();
        var end = kb.Cleared().Store(Keys.Character_AgeWeight).Store(Age).Store(Weight.End).Build();
        var found = c.GetRange(start, end);
        byte[] buf = new byte[4];
        return found.Select(kv =>
        {
            kv.Key.WriteTo(buf, 0, 9);
            var id = MyBitConverter.Reverse(BitConverter.ToInt32(buf));
            return Find(id);
        });
    }

}


}
