// Generated by the codegen.rb.  DO NOT EDIT!

#if false
using System;
using System.Linq;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using ToydeaCabinet;

using Message = MapperSampleUtil.Message;
public partial class MapperSample : MapperBase
{
	public MapperSample()
	{
		Items = new ReadOnlyDictionary<int, MapperSampleUtil.Item>(Items_);
	}

	public override void LoadFromCabinet(Cabinet c)
	{
		Hp_ = default(Int32);
		Attack_ = default(Int32);
		Name_ = default(String);
		Items_.Clear();
		c_ = c;
		foreach( var r in c.All() )
		{
			var tag = (int)(r.Key.Value >> 56);
			switch(tag)
			{
				case 1:
					{
						Hp_ = Serializer.DeserializeInt32(r.Data);
					} break;
				case 2:
					{
						Attack_ = Serializer.DeserializeInt32(r.Data);
					} break;
				case 3:
					{
						Name_ = Serializer.DeserializeString(r.Data);
					} break;
				case 4:
					{
						var e = Serializer.DeserializeMessage<MapperSampleUtil.Item>(r.Data);
						Items_[e.Id] = e;
					} break;
				default:
					break;
			}
		}
	}

	Int32 Hp_;
	public Int32 Hp { get { return Hp_; } }
	public void UpdateHp(Int32 val) { Hp_ = val; c_.Put(GetHpCabinetKey(), Serializer.Serialize(val)); }
	public CabinetKey GetHpCabinetKey() { return new CabinetKey().Store(8, 1); }

	Int32 Attack_;
	public Int32 Attack { get { return Attack_; } }
	public void UpdateAttack(Int32 val) { Attack_ = val; c_.Put(GetAttackCabinetKey(), Serializer.Serialize(val)); }
	public CabinetKey GetAttackCabinetKey() { return new CabinetKey().Store(8, 2); }

	String Name_;
	public String Name { get { return Name_; } }
	public void UpdateName(String val) { Name_ = val; c_.Put(GetNameCabinetKey(), Serializer.Serialize(val)); }
	public CabinetKey GetNameCabinetKey() { return new CabinetKey().Store(8, 3); }

	Dictionary<int, MapperSampleUtil.Item> Items_ = new Dictionary<int, MapperSampleUtil.Item>();
	public ReadOnlyDictionary<int, MapperSampleUtil.Item> Items { get; private set; }
	public void UpdateItem(MapperSampleUtil.Item val) { Items_[val.Id] = val; c_.Put(GetItemCabinetKey(val.Id), Serializer.Serialize(val)); }
	public void DeleteItem(int id) { Items_.Remove(id); }
	public CabinetKey GetItemCabinetKey(int id) { return new CabinetKey().Store(8, 4).Store(32, (uint)id); }
	public CabinetKey GetItemCabinetPrefix() { return new CabinetKey().Store(8, 4); }

}

#endif